[{"title":"HDU-1978 How many ways","date":"2019-09-27T03:00:00.000Z","path":"2019/09/27/HDU-1978/","text":"题目描述这是一个简单的生存游戏，你控制一个机器人从一个棋盘的起始点(1,1)走到棋盘的终点(n,m)。游戏的规则描述如下：1.机器人一开始在棋盘的起始点并有起始点所标有的能量。2.机器人只能向右或者向下走，并且每走一步消耗一单位能量。3.机器人不能在原地停留。4.当机器人选择了一条可行路径后，当他走到这条路径的终点时，他将只有终点所标记的能量。如上图，机器人一开始在(1,1)点，并拥有4单位能量，蓝色方块表示他所能到达的点，如果他在这次路径选择中选择的终点是(2,4) 点，当他到达(2,4)点时将拥有1单位的能量，并开始下一次路径选择，直到到达(6,6)点。我们的问题是机器人有多少种方式从起点走到终点。这可能是一个很大的数，输出的结果对10000取模。 Input第一行输入一个整数T,表示数据的组数。对于每一组数据第一行输入两个整数$n,m(1 \\leq n,m \\leq 100)$。表示棋盘的大小。接下来输入n行,每行m个整数$e(0 \\leq e &lt; 20)$。 Output对于每一组数据输出方式总数对10000取模的结果. 输入样例16 64 5 6 6 4 32 2 3 1 7 21 1 4 6 2 75 8 4 3 9 57 6 6 2 1 53 1 1 3 7 2 输出样例3948 分析如果使用最朴素的dfs对于 $20\\ast20$ 的方阵其状态有$2^{20*20}$个，会超时。使用二维的$DP[i][j]$表示$第i行第j列$可行方案。对于每一个值为 $value$ 的方格，其可衍生的最大范围是$value$为边的等腰直角三角形，则初始边界条件为$dp[x][y] = -1$ ，可以得到方程。$dp[x][y] = dp[x][y] + dp[x + i][y + j]$ AC代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778//#include &lt;bits/stdc++.h&gt;#include &lt;iostream&gt;#include &lt;iomanip&gt;#include &lt;bitset&gt;#include &lt;string&gt;#include &lt;set&gt;#include &lt;stack&gt;#include &lt;sstream&gt;#include &lt;list&gt;#include &lt;array&gt;#include &lt;vector&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;memory&gt;#include &lt;iterator&gt;#include &lt;climits&gt;#include &lt;cassert&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;using namespace std;#define FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)#define all(x) (x).begin(), (x).end()typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;typedef pair&lt;int, int&gt; pdi;typedef pair&lt;ll, int&gt; pli;int const maxn = 100 + 10;inline int lc(int x) &#123;return x &lt;&lt; 1;&#125;inline int rc(int x) &#123;return x &lt;&lt; 1 | 1;&#125;int const MOD = 10000;int a[maxn][maxn];int dp[maxn][maxn];int n, m;bool check(int x, int y) &#123; if (x &gt; n || y &gt; m) return false; return true;&#125;int dfs(int x, int y) &#123; if (dp[x][y] &gt;= 0) return dp[x][y]; dp[x][y] = 0; for (int i = 0; i &lt;= a[x][y]; i++) &#123; for (int j = 0; j + i &lt;= a[x][y]; j++) &#123; if (check(x + i, y + j)) &#123; dp[x][y] += dfs(x + i, y + j) % MOD; dp[x][y] %= MOD; &#125; &#125; &#125; return dp[x][y];&#125;int main(void) &#123; FAST_IO; int t; cin &gt;&gt; t; while (t--) &#123; cin &gt;&gt; n &gt;&gt; m; for (int i = 1; i &lt;= n; i++) &#123; for (int j = 1; j &lt;= m; j++) &#123; cin &gt;&gt; a[i][j]; &#125; &#125; memset(dp, -1, sizeof(dp)); dp[n][m] = 1; cout &lt;&lt; dfs(1, 1) &lt;&lt; endl; &#125; return 0;&#125;","content":"<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>这是一个简单的生存游戏，你控制一个机器人从一个棋盘的起始点(1,1)走到棋盘的终点(n,m)。游戏的规则描述如下：<br>1.机器人一开始在棋盘的起始点并有起始点所标有的能量。<br>2.机器人只能向右或者向下走，并且每走一步消耗一单位能量。<br>3.机器人不能在原地停留。<br>4.当机器人选择了一条可行路径后，当他走到这条路径的终点时，他将只有终点所标记的能量。<br><img src=\"http://acm.hdu.edu.cn/data/images/C113-1003-1.gif\" alt><br>如上图，机器人一开始在(1,1)点，并拥有4单位能量，蓝色方块表示他所能到达的点，如果他在这次路径选择中选择的终点是(2,4)</p>\n<a id=\"more\"></a>\n<p>点，当他到达(2,4)点时将拥有1单位的能量，并开始下一次路径选择，直到到达(6,6)点。<br>我们的问题是机器人有多少种方式从起点走到终点。这可能是一个很大的数，输出的结果对10000取模。</p>\n<h2 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input\"></a>Input</h2><p>第一行输入一个整数T,表示数据的组数。<br>对于每一组数据第一行输入两个整数$n,m(1 \\leq n,m \\leq 100)$。表示棋盘的大小。接下来输入n行,每行m个整数$e(0 \\leq e &lt; 20)$。</p>\n<h2 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h2><p>对于每一组数据输出方式总数对10000取模的结果.</p>\n<h2 id=\"输入样例\"><a href=\"#输入样例\" class=\"headerlink\" title=\"输入样例\"></a>输入样例</h2><p>1<br>6 6<br>4 5 6 6 4 3<br>2 2 3 1 7 2<br>1 1 4 6 2 7<br>5 8 4 3 9 5<br>7 6 6 2 1 5<br>3 1 1 3 7 2</p>\n<h2 id=\"输出样例\"><a href=\"#输出样例\" class=\"headerlink\" title=\"输出样例\"></a>输出样例</h2><p>3948</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>如果使用最朴素的dfs对于 $20\\ast20$ 的方阵其状态有$2^{20*20}$个，会超时。使用二维的$DP[i][j]$表示$第i行第j列$可行方案。对于每一个值为 $value$ 的方格，其可衍生的最大范围是$value$为边的等腰直角三角形，则初始边界条件为$dp[x][y] = -1$ ，可以得到方程。$dp[x][y] = dp[x][y] + dp[x + i][y + j]$ </p>\n<h2 id=\"AC代码\"><a href=\"#AC代码\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//#include &lt;bits/stdc++.h&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bitset&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;list&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iterator&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cassert&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pdi;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;ll, <span class=\"keyword\">int</span>&gt; pli;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> maxn = <span class=\"number\">100</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">lc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>  </span>&#123;<span class=\"keyword\">return</span> x &lt;&lt; <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">rc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>  </span>&#123;<span class=\"keyword\">return</span> x &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> MOD = <span class=\"number\">10000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dp[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; n || y &gt; m) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dp[x][y] &gt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> dp[x][y];</span><br><span class=\"line\">    dp[x][y] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= a[x][y]; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j + i &lt;= a[x][y]; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (check(x + i, y + j)) &#123;</span><br><span class=\"line\">                dp[x][y] += dfs(x + i, y + j) % MOD;</span><br><span class=\"line\">                dp[x][y] %= MOD;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[x][y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> t;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j++) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">cin</span> &gt;&gt; a[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(dp, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(dp));</span><br><span class=\"line\">        dp[n][m] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; dfs(<span class=\"number\">1</span>, <span class=\"number\">1</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","link":"","categories":[{"name":"ACM","slug":"ACM","permalink":"http://yoursite.com/categories/ACM/"},{"name":"题解","slug":"ACM/题解","permalink":"http://yoursite.com/categories/ACM/题解/"}],"tags":[{"name":"DP","slug":"DP","permalink":"http://yoursite.com/tags/DP/"},{"name":"搜索","slug":"搜索","permalink":"http://yoursite.com/tags/搜索/"},{"name":"记忆化","slug":"记忆化","permalink":"http://yoursite.com/tags/记忆化/"}]},{"title":"HihoCoder-1828 The 2018 ACM-ICPC Asia Beijing First Round  Saving Tang Monk II","date":"2019-08-31T12:33:34.000Z","path":"2019/08/31/Saving-Tang-Monk-II/","text":"题目链接 题目描述《Journey to the West》(also 《Monkey》) is one of the Four Great Classical Novels of Chinese literature. It was written by Wu Cheng’en during the Ming Dynasty. In this novel, Monkey King Sun Wukong, pig Zhu Bajie and Sha Wujing, escorted Tang Monk to India to get sacred Buddhism texts. During the journey, Tang Monk was often captured by demons. Most of demons wanted to eat Tang Monk to achieve immortality, but some female demons just wanted to marry him because he was handsome. So, fighting demons and saving Monk Tang is the major job for Sun Wukong to do. Once, Tang Monk was captured by the demon White Bones. White Bones lived in a palace and she cuffed Tang Monk in a room. Sun Wukong managed to get into the palace, and he wanted to reach Tang Monk and rescue him. The palace can be described as a matrix of characters. Different characters stand for different rooms as below: $’S’$ : The original position of Sun Wukong $’T’$ : The location of Tang Monk $’.’$ : An empty room ‘#’ : A deadly gas room. $’B’$ : A room with unlimited number of oxygen bottles. Every time Sun Wukong entered a ‘B’ room from other rooms, he would get an oxygen bottle. But staying there would not get Sun Wukong more oxygen bottles. Sun Wukong could carry at most 5 oxygen bottles at the same time. $’P’$ : A room with unlimited number of speed-up pills. Every time Sun Wukong entered a ‘P’ room from other rooms, he would get a speed-up pill. But staying there would not get Sun Wukong more speed-up pills. Sun Wukong could bring unlimited number of speed-up pills with him. Sun Wukong could move in the palace. For each move, Sun Wukong might go to the adjacent rooms in 4 directions(north, west,south and east). But Sun Wukong couldn’t get into a ‘#’ room(deadly gas room) without an oxygen bottle. Entering a ‘#’ room each time would cost Sun Wukong one oxygen bottle. Each move took Sun Wukong one minute. But if Sun Wukong ate a speed-up pill, he could make next move without spending any time. In other words, each speed-up pill could save Sun Wukong one minute. And if Sun Wukong went into a ‘#’ room, he had to stay there for one extra minute to recover his health. Since Sun Wukong was an impatient monkey, he wanted to save Tang Monk as soon as possible. Please figure out the minimum time Sun Wukong needed to reach Tang Monk. 题意根据题求最短步数，宽搜变形，优先级搜索 S: 起点 T: 重点 ‘.’: The empty room ‘#’: 有毒的房间，需要氧气瓶，并且需要多一点时间 P: 获得一个加速器，可以免去一个时间 B: 一个氧气瓶，最多可以获得5个 分析本题需要剪枝，通过每一氧气瓶的数量记录状态，$vis[x][y][b_n]$。 AC代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118//#include &lt;bits/stdc++.h&gt;#include &lt;iostream&gt;#include &lt;iomanip&gt;#include &lt;bitset&gt;#include &lt;string&gt;#include &lt;set&gt;#include &lt;stack&gt;#include &lt;sstream&gt;#include &lt;list&gt;#include &lt;array&gt;#include &lt;vector&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;memory&gt;#include &lt;iterator&gt;#include &lt;climits&gt;#include &lt;cassert&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;using namespace std;#define FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)#define all(x) (x).begin(), (x).end()typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;typedef pair&lt;int, int&gt; pdi;typedef pair&lt;ll, int&gt; pli;int const maxn = 100 + 10;inline int lc(int x) &#123;return x &lt;&lt; 1;&#125;inline int rc(int x) &#123;return x &lt;&lt; 1 | 1;&#125;int n, m;char mp[maxn][maxn];int vis[maxn][maxn][10];const int dir[4][2] = &#123;1,0,0,1,-1,0,0,-1&#125;;struct node &#123; int x, y, step, b; node(const int &amp;x = 0, const int &amp;y = 0, const int &amp;step = 0, const int &amp;b = 0) : x(x), y(y), step(step), b(b) &#123; &#125; bool operator&lt;(const node &amp;obj) const &#123; if (step == obj.step) &#123; return b &lt; obj.b; &#125; return step &gt; obj.step; &#125;&#125;;bool check(int x, int y) &#123; if (x &lt;= 0 || x &gt; n || y &lt;= 0 || y &gt; m) &#123; return false; &#125; return true;&#125;int bfs(int x, int y) &#123; priority_queue&lt;node&gt; q; q.push(node(x, y)); vis[x][y][0] = 1; while (!q.empty()) &#123; node p = q.top(); q.pop(); if (mp[p.x][p.y] == 'T') return p.step; for (int i = 0; i &lt; 4; i++) &#123; int tx = p.x + dir[i][0]; int ty = p.y + dir[i][1]; int tb = p.b; int ts = p.step + 1; if (!check(tx, ty)) continue; if (mp[tx][ty] == 'P') &#123; ts--; &#125; if (mp[tx][ty] == 'B') &#123; if (tb &lt; 5) tb++; &#125; if (mp[tx][ty] == '#') &#123; if (tb &lt;= 0) continue; tb--; ts++; &#125; if (vis[tx][ty][tb]) continue; vis[tx][ty][tb] = 1; q.push(node(tx, ty, ts, tb)); &#125; &#125; return -1;&#125;int main(void) &#123; FAST_IO; while (cin &gt;&gt; n &gt;&gt; m) &#123; if (n == 0 &amp;&amp; m == 0) break; memset(vis, 0, sizeof(vis)); for (int i = 1; i &lt;= n; i++) &#123; cin &gt;&gt; (mp[i] + 1); &#125; int statr = -1, end = -1; for (int i = 1; i &lt;= n; i++) &#123; for (int j = 1; j &lt;= m; j++) &#123; if (mp[i][j] == 'S') &#123; statr = i; end = j; break; &#125; &#125; if (statr != -1) break; &#125; cout &lt;&lt; bfs(statr, end) &lt;&lt; endl; &#125; return 0;&#125;","content":"<p><a href=\"https://cn.vjudge.net/problem/HihoCoder-1828\" target=\"_blank\" rel=\"noopener\">题目链接</a></p>\n<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>《Journey to the West》(also 《Monkey》) is one of the Four Great Classical Novels of Chinese literature. It was written by Wu Cheng’en during the Ming Dynasty. In this novel, Monkey King Sun Wukong, pig Zhu Bajie and Sha Wujing, escorted Tang Monk to India to get sacred Buddhism texts.</p>\n<a id=\"more\"></a>\n<p>During the journey, Tang Monk was often captured by demons. Most of demons wanted to eat Tang Monk to achieve immortality, but some female demons just wanted to marry him because he was handsome. So, fighting demons and saving Monk Tang is the major job for Sun Wukong to do.</p>\n<p>Once, Tang Monk was captured by the demon White Bones. White Bones lived in a palace and she cuffed Tang Monk in a room. Sun Wukong managed to get into the palace, and he wanted to reach Tang Monk and rescue him.</p>\n<p>The palace can be described as a matrix of characters. Different characters stand for different rooms as below:</p>\n<p>$’S’$ : The original position of Sun Wukong</p>\n<p>$’T’$ : The location of Tang Monk</p>\n<p>$’.’$ : An empty room</p>\n<p>‘#’ : A deadly gas room.</p>\n<p>$’B’$ : A room with unlimited number of oxygen bottles. Every time Sun Wukong entered a ‘B’ room from other rooms, he would get an oxygen bottle. But staying there would not get Sun Wukong more oxygen bottles. Sun Wukong could carry at most 5 oxygen bottles at the same time.</p>\n<p>$’P’$ : A room with unlimited number of speed-up pills. Every time Sun Wukong entered a ‘P’ room from other rooms, he would get a speed-up pill. But staying there would not get Sun Wukong more speed-up pills. Sun Wukong could bring unlimited number of speed-up pills with him.</p>\n<p>Sun Wukong could move in the palace. For each move, Sun Wukong might go to the adjacent rooms in 4 directions(north, west,south and east). But Sun Wukong couldn’t get into a ‘#’ room(deadly gas room) without an oxygen bottle. Entering a ‘#’ room each time would cost Sun Wukong one oxygen bottle.</p>\n<p>Each move took Sun Wukong one minute. But if Sun Wukong ate a speed-up pill, he could make next move without spending any time. In other words, each speed-up pill could save Sun Wukong one minute. And if Sun Wukong went into a ‘#’ room, he had to stay there for one extra minute to recover his health.</p>\n<p>Since Sun Wukong was an impatient monkey, he wanted to save Tang Monk as soon as possible. Please figure out the minimum time Sun Wukong needed to reach Tang Monk.</p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>根据题求最短步数，宽搜变形，优先级搜索</p>\n<ul>\n<li>S: 起点</li>\n<li>T: 重点</li>\n<li>‘.’: The empty room</li>\n<li>‘#’: 有毒的房间，需要氧气瓶，并且需要多一点时间</li>\n<li>P: 获得一个加速器，可以免去一个时间</li>\n<li>B: 一个氧气瓶，最多可以获得5个</li>\n</ul>\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p>本题需要剪枝，通过每一氧气瓶的数量记录状态，$vis[x][y][b_n]$。</p>\n<h1 id=\"AC代码\"><a href=\"#AC代码\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//#include &lt;bits/stdc++.h&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bitset&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;list&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iterator&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cassert&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pdi;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;ll, <span class=\"keyword\">int</span>&gt; pli;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> maxn = <span class=\"number\">100</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">lc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>  </span>&#123;<span class=\"keyword\">return</span> x &lt;&lt; <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">rc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>  </span>&#123;<span class=\"keyword\">return</span> x &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\"><span class=\"keyword\">char</span> mp[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> vis[maxn][maxn][<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> dir[<span class=\"number\">4</span>][<span class=\"number\">2</span>] = &#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">-1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x, y, step, b;</span><br><span class=\"line\">    node(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp;x = <span class=\"number\">0</span>, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp;y = <span class=\"number\">0</span>, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp;step = <span class=\"number\">0</span>, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp;b = <span class=\"number\">0</span>) </span><br><span class=\"line\">        : x(x), y(y), step(step), b(b) &#123; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> node &amp;obj) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (step == obj.step) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> b &lt; obj.b;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> step &gt; obj.step;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt;= <span class=\"number\">0</span> || x &gt; n || y &lt;= <span class=\"number\">0</span> || y &gt; m) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">    priority_queue&lt;node&gt; q;</span><br><span class=\"line\">    q.push(node(x, y));</span><br><span class=\"line\">    vis[x][y][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty()) &#123;</span><br><span class=\"line\">        node p = q.top();</span><br><span class=\"line\">        q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mp[p.x][p.y] == <span class=\"string\">'T'</span>) </span><br><span class=\"line\">            <span class=\"keyword\">return</span> p.step;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tx = p.x + dir[i][<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> ty = p.y + dir[i][<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tb = p.b;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> ts = p.step + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!check(tx, ty)) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mp[tx][ty] == <span class=\"string\">'P'</span>) &#123;</span><br><span class=\"line\">                ts--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mp[tx][ty] == <span class=\"string\">'B'</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tb &lt; <span class=\"number\">5</span>) tb++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mp[tx][ty] == <span class=\"string\">'#'</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tb &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                tb--;</span><br><span class=\"line\">                ts++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (vis[tx][ty][tb]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            vis[tx][ty][tb] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            q.push(node(tx, ty, ts, tb));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span> &amp;&amp; m == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; (mp[i] + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> statr = <span class=\"number\">-1</span>, end = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (mp[i][j] == <span class=\"string\">'S'</span>) &#123;</span><br><span class=\"line\">                    statr = i;</span><br><span class=\"line\">                    end = j;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (statr != <span class=\"number\">-1</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; bfs(statr, end) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","link":"","categories":[{"name":"ACM","slug":"ACM","permalink":"http://yoursite.com/categories/ACM/"},{"name":"题解","slug":"ACM/题解","permalink":"http://yoursite.com/categories/ACM/题解/"},{"name":"2018ICPC北京","slug":"ACM/题解/2018ICPC北京","permalink":"http://yoursite.com/categories/ACM/题解/2018ICPC北京/"}],"tags":[{"name":"bfs","slug":"bfs","permalink":"http://yoursite.com/tags/bfs/"},{"name":"优先队列","slug":"优先队列","permalink":"http://yoursite.com/tags/优先队列/"}]},{"title":"Gemstones","date":"2019-08-10T07:33:17.000Z","path":"2019/08/10/Gemstones/","text":"题目来源：2019牛客暑期多校训练营（第八场）- G 题目描述&nbsp;&nbsp;&nbsp;&nbsp;Gromah and LZR have entered the seventh level. There are a sequence of gemstones on the wall. &nbsp;&nbsp;&nbsp;&nbsp;After some tries, Gromah discovers that one can take exactly three successive gemstones with the same types away from the gemstone sequence each time, after taking away three gemstones, the left two parts of origin sequence will be merged to one sequence in origin order automatically.&nbsp;&nbsp;&nbsp;&nbsp;For example, as for “$ATCCCTTG$”, we can take three ‘$C$’s away with two parts “$AT$”, “$TTG$” left, then the two parts will be merged to “$ATTTG$”, and we can take three ‘$T$’s next time. &nbsp;&nbsp;&nbsp;&nbsp;The password of this level is the maximum possible times to take gemstones from origin sequence. &nbsp;&nbsp;&nbsp;&nbsp;Please help them to determine the maximum times. 输入描述 Only one line containing $ a $ string $ s $ , denoting the gemstone sequence, where the same letters are regarded as the same types.$ 1\\leq \\mid s \\mid \\leq 10^5 $.$ s $ only contains uppercase letters. 输出描述 Print a non-negative integer in a single line, denoting the maximum times. ExampleInput ATCCCTTG Output 2 题意取出字符串中相同且连续的三个字母，剩下的字符串拼接再次重负操作。求最大的课操作次数。 分析运用栈后进先出的性质，用栈贪心的模拟取出操作即可。本场多校赛签到题之一。 Solve Code12345678910111213141516171819202122232425262728#include &lt;bits/stdc++.h&gt;using namespace std;#define FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;int const maxn = 1e5 + 10;char st[maxn];int main(void) &#123; FAST_IO; int top = 0; char s; int ans = 0; while (cin &gt;&gt; s) &#123; st[top++] = s; if (top &gt; 2) &#123; if (st[top - 1] == st[top - 2] &amp;&amp; st[top - 1] == st[top - 3]) &#123; ans++; top -= 3; &#125; &#125; &#125; cout &lt;&lt; ans &lt;&lt; endl; return 0;&#125;","content":"<p>题目来源：<a href=\"https://ac.nowcoder.com/acm/contest/888/G\" target=\"_blank\" rel=\"noopener\">2019牛客暑期多校训练营（第八场）- G</a></p>\n<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;Gromah and LZR have entered the seventh level. There are a sequence of gemstones on the wall.</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;After some tries, Gromah discovers that one can take exactly three successive gemstones with the same types away from the gemstone sequence each time, after taking away three gemstones, the left two parts of origin sequence will be merged to one sequence in origin order automatically.<br>&nbsp;&nbsp;&nbsp;&nbsp;For example, as for “$ATCCCTTG$”, we can take three ‘$C$’s away with two parts “$AT$”, “$TTG$” left, then the two parts will be merged to “$ATTTG$”, and we can take three ‘$T$’s next time.</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;The password of this level is the maximum possible times to take gemstones from origin sequence.</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;Please help them to determine the <strong>maximum</strong> times.</p>\n<a id=\"more\"></a>\n\n<h1 id=\"输入描述\"><a href=\"#输入描述\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h1><blockquote>\n<p>Only one line containing $ a $ string $ s $ , denoting the gemstone sequence, where the same letters are regarded as the same types.<br>$ 1\\leq \\mid s \\mid \\leq 10^5 $.<br>$ s $ only contains uppercase letters.</p>\n</blockquote>\n<h1 id=\"输出描述\"><a href=\"#输出描述\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h1><blockquote>\n<p>Print a non-negative integer in a single line, denoting the maximum times.</p>\n</blockquote>\n<h1 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h1><h2 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input\"></a>Input</h2><blockquote>\n<p>ATCCCTTG</p>\n</blockquote>\n<h2 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h2><blockquote>\n<p>2</p>\n</blockquote>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>取出字符串中相同且连续的三个字母，剩下的字符串拼接再次重负操作。求最大的课操作次数。</p>\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p>运用栈后进先出的性质，用栈贪心的模拟取出操作即可。本场多校赛签到题之一。</p>\n<h1 id=\"Solve-Code\"><a href=\"#Solve-Code\" class=\"headerlink\" title=\"Solve Code\"></a>Solve Code</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> maxn = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span> st[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> top = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> s;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">cin</span> &gt;&gt; s) &#123;</span><br><span class=\"line\">        st[top++] = s;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (top &gt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (st[top - <span class=\"number\">1</span>] == st[top - <span class=\"number\">2</span>] &amp;&amp; st[top - <span class=\"number\">1</span>] == st[top - <span class=\"number\">3</span>]) &#123;</span><br><span class=\"line\">                ans++;</span><br><span class=\"line\">                top -= <span class=\"number\">3</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","link":"","categories":[{"name":"ACM","slug":"ACM","permalink":"http://yoursite.com/categories/ACM/"},{"name":"牛客","slug":"ACM/牛客","permalink":"http://yoursite.com/categories/ACM/牛客/"},{"name":"多校赛","slug":"ACM/牛客/多校赛","permalink":"http://yoursite.com/categories/ACM/牛客/多校赛/"},{"name":"题解","slug":"ACM/牛客/多校赛/题解","permalink":"http://yoursite.com/categories/ACM/牛客/多校赛/题解/"}],"tags":[{"name":"模拟","slug":"模拟","permalink":"http://yoursite.com/tags/模拟/"},{"name":"栈","slug":"栈","permalink":"http://yoursite.com/tags/栈/"},{"name":"贪心","slug":"贪心","permalink":"http://yoursite.com/tags/贪心/"}]},{"title":"Leetcode-19:删除链表的倒数第N个节点","date":"2019-08-06T15:17:10.000Z","path":"2019/08/06/LeetCode-19-Remove Nth Node From End of List/","text":"原题链接 题目描述给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。 示例 给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n = 2.当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5. note给定的 n 保证是有效的。 思路遍历两次列表。第一遍历用于求出链表的长度$L$，然后第二次遍历节点指针到$L-n$处，把第$L-n$的节点的next连接到第$L-n+2$节点。复杂度 $O(L)$ 。注意编写接口时的边界处理，一开始在NULL处疯狂WA。 AC代码1234567891011121314151617181920212223242526272829303132/** * Definition for singly-linked list. * struct ListNode &#123; * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: ListNode* removeNthFromEnd(ListNode* head, int n) &#123; std::ios::sync_with_stdio(false),std::cin.tie(0),std::cout.tie(0); ListNode *cntnode = head, *prenode = head; int length = 0, cnt = 0; while (cntnode) &#123; ++length; cntnode = cntnode-&gt;next; &#125; length -= n; if (!length)&#123; head = head-&gt;next; return head; &#125; while (--length) &#123; prenode = prenode-&gt;next; &#125; auto x = prenode-&gt;next; prenode-&gt;next = x-&gt;next; delete x; return head; &#125;&#125;;","content":"<p><a href=\"https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/?utm_source=LCUS&utm_medium=ip_redirect_q_uns&utm_campaign=transfer2china\" target=\"_blank\" rel=\"noopener\">原题链接</a></p>\n<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><blockquote>\n<p>给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n = 2.<br>当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5.</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"note\"><a href=\"#note\" class=\"headerlink\" title=\"note\"></a>note</h2><p>给定的 n 保证是有效的。</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>遍历两次列表。第一遍历用于求出链表的长度$L$，然后第二次遍历节点指针到$L-n$处，把第$L-n$的节点的next连接到第$L-n+2$节点。复杂度 <strong>$O(L)$</strong> 。<br><strong>注意编写接口时的边界处理，一开始在NULL处疯狂WA</strong>。</p>\n<h2 id=\"AC代码\"><a href=\"#AC代码\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * struct ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode *next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">removeNthFromEnd</span><span class=\"params\">(ListNode* head, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::ios::sync_with_stdio(<span class=\"literal\">false</span>),<span class=\"built_in\">std</span>::<span class=\"built_in\">cin</span>.tie(<span class=\"number\">0</span>),<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>.tie(<span class=\"number\">0</span>);</span><br><span class=\"line\">        ListNode *cntnode = head, *prenode = head;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = <span class=\"number\">0</span>, cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cntnode) &#123;</span><br><span class=\"line\">            ++length;</span><br><span class=\"line\">            cntnode = cntnode-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        length -= n;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!length)&#123;</span><br><span class=\"line\">            head = head-&gt;next;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (--length) &#123;</span><br><span class=\"line\">            prenode = prenode-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> x = prenode-&gt;next;</span><br><span class=\"line\">        prenode-&gt;next = x-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> x;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","link":"","categories":[{"name":"LeetCode","slug":"LeetCode","permalink":"http://yoursite.com/categories/LeetCode/"},{"name":"休闲","slug":"LeetCode/休闲","permalink":"http://yoursite.com/categories/LeetCode/休闲/"}],"tags":[{"name":"链表","slug":"链表","permalink":"http://yoursite.com/tags/链表/"}]},{"title":"牛客假日团队赛9-部分题解","date":"2019-08-05T06:19:39.000Z","path":"2019/08/05/nowcoder_team_contest09_solve_part/","text":"A-乘积最大题目链接 题意&nbsp;&nbsp;&nbsp;&nbsp;给定一个数字字符串，把字符串分成$K+1$个数，使这些数乘积最大。 分析本题最佳解法应该是区间dp但本蒟蒻不会dp。只能暴力dfs了。在串中插入*其性质和排列类似。可以参考蓝书P15递归实现排列型枚举。对于在第$i$个位置插入*分成$i$之前的为一段，及$i$和$i$之后一段。 需要注意在数字相连时的边界情况。 AC代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include &lt;bits/stdc++.h&gt;using namespace std;#define FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;const int maxn = 50;string a;int n, k;int vis[maxn];ll s[maxn];ll ans = -1;void dfs(int x) &#123; if (x == k) &#123; ll x = 1; int t = 0; memset(s, 0, sizeof(s)); s[t] = a[0] - 48; for (int i = 1; i &lt; n; i++) &#123; if (vis[i - 1]) &#123; s[++t] = (a[i] - '0'); &#125; else &#123; s[t] = s[t] * 10 + (a[i] - '0'); &#125; &#125; for (int i = 0; i &lt;= t; i++) &#123; x *= s[i]; &#125; ans = max(ans, x); return; &#125; for (int i = 0; i &lt; n - 1; i++) &#123; if (vis[i]) continue; vis[i] = 1; dfs(x + 1); vis[i] = 0; &#125;&#125;int main(void) &#123; FAST_IO; cin &gt;&gt; n &gt;&gt; k; cin &gt;&gt; a; dfs(0); cout &lt;&lt; ans &lt;&lt; endl; return 0;&#125; C-单词接龙题目链接 题意&emsp;&emsp;给定一个字符和一些字符串，按照字符串之间重叠的部分，连接字符串，求最长的连接长度。 分析&emsp;&emsp;比较经典的DFS+字符串，比较考察细节，比如字符串的模拟操作、dfs回溯的处理。&emsp;&emsp;有两种基本的思路： 对于字符串，本题数据较少，可以搜索时暴力处理。使用C++的string比较方便，但仍需要注意边界细节。(我写的时候在substr上调了好久，emmmm) 比较好的做法可以先预处理一个$num$数组，其中$num[i][j]$表示串$i$和串$j$之间可以连接的字符数。在DFS的时候使用 $num[i][j]$ 进行回溯等操作。 AC代码方法1(string暴力)12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#include &lt;bits/stdc++.h&gt;using namespace std;#define FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;int const maxn = 50;int vis[maxn];vector&lt;string&gt; v_str;int ans = 0;void dfs(string &amp;s) &#123; int flag = 0; for (int i = 0; i &lt; (int)v_str.size(); i++) &#123; if (vis[i] &gt;= 2) continue; string &amp;ts = v_str[i]; int n = 0; int len1 = (int)s.length(); int len2 = (int)ts.length(); for (int j = 0; j &lt; min(len1, len2); j++) &#123; if (ts.substr(0, j + 1) == s.substr(len1 - j - 1)) &#123; flag = 1; n = j + 1; break; &#125; &#125; if (n) &#123; vis[i]++; auto temp = s; s = s + ts.substr(n); dfs(s); s = temp; vis[i]--; &#125; &#125; if (!flag) &#123; ans = max((int)s.length(), ans); &#125;&#125;int main(void) &#123; FAST_IO; int n; cin &gt;&gt; n; for (int i = 0; i &lt; n; i++) &#123; string s; cin &gt;&gt; s; v_str.push_back(s); &#125; string s; cin &gt;&gt; s; dfs(s); cout &lt;&lt; ans &lt;&lt; endl; return 0;&#125; 方法2(预处理字符数)12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576#include &lt;bits/stdc++.h&gt;using namespace std; int n;string dc[25];int cd[25][25];int cs[25]; int mincd(int x,int y)&#123; bool p=true; int ky=0; for(int k=dc[x].size()-1;k&gt;=0;k--) &#123; for(int kx=k;kx&lt;dc[x].size();kx++) if(dc[x][kx]!=dc[y][ky++]) &#123; p=false; break; &#125; if(p==true) return dc[x].size()-k; ky=0; p=true; &#125; return 0;&#125; char sta;int ans=0;int mans=0; void dfs(int p)&#123; bool jx=false; for(int i=1;i&lt;=n;i++) &#123; if(cs[i]&gt;=2) continue; if(cd[p][i]==0) continue; if(cd[p][i]==dc[p].size() || cd[p][i]==dc[i].size()) continue; mans+=dc[i].size()-cd[p][i]; cs[i]++; jx=true; dfs(i); //接上 mans-=dc[i].size()-cd[p][i]; //回溯 cs[i]--; &#125; if(jx==false) ans=max(ans,mans); return ;&#125;int main()&#123; cin&gt;&gt;n; for(int i=1;i&lt;=n;i++) cin&gt;&gt;dc[i]; cin&gt;&gt;sta; for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=n;j++) cd[i][j]=mincd(i,j); for(int i=1;i&lt;=n;i++)&#123; if(dc[i][0]==sta)&#123; cs[i]++; mans=dc[i].size(); dfs(i); cs[i]=0; &#125; &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125; D-Cow Line题目链接 题意&emsp;&emsp;有一些人排队，允许进行以下四种操作： A L —– 从左边插入一人 A R —– 从右边插入一人 D L N —– 从左边走出N人 D R N —– 从右边走出N人 &emsp;&emsp;问最后队伍中的序号。 分析&emsp;&emsp;用双端队列$deque$模拟入队出队，即可。复杂度$O(N)$ AC代码123456789101112131415161718192021222324252627282930313233343536373839#include &lt;bits/stdc++.h&gt;using namespace std;#define FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;deque&lt;int&gt; q;int main(void) &#123; FAST_IO; int n; cin &gt;&gt; n; string opt, dir; int num = 0, k; while (n--) &#123; cin &gt;&gt; opt &gt;&gt; dir; if (opt == \"A\") &#123; if (dir == \"L\") &#123; q.push_front(++num); &#125; else &#123; q.push_back(++num); &#125; &#125; else &#123; cin &gt;&gt; k; if (dir == \"L\") &#123; for (int i = 0; i &lt; k &amp;&amp; !q.empty(); i++) q.pop_front(); &#125; else &#123; for (int i = 0; i &lt; k &amp;&amp; !q.empty(); i++) q.pop_back(); &#125; &#125; &#125; while (!q.empty()) &#123; cout &lt;&lt; q.front() &lt;&lt; endl; q.pop_front(); &#125; return 0;&#125; G-Cow Digit Game题目链接 分析&emsp;&emsp;好像是道SG函数的博弈裸题，队友说套一下SG函数就好了。直接上代码吧。 AC代码12345678910111213141516171819202122232425262728293031323334#include &lt;bits/stdc++.h&gt;using namespace std;int g, n;bool sg[1000005]; int main()&#123; for(int i = 1; i &lt;= 9; i++) sg[i] = true; for(int i = 10; i &lt;= 1000000; i++) &#123; int ma = 0, mi = 10, t = i; while(t) &#123; int x = t % 10; if(x) mi = min(mi, x); ma = max(ma, x); t /= 10; &#125; if(sg[i - ma] &amp;&amp; sg[i - mi]) sg[i] = false; else sg[i] = true; &#125; cin &gt;&gt; g; for(int i = 0; i &lt; g; i++) &#123; cin &gt;&gt; n; if (sg[n]) cout &lt;&lt; \"YES\" &lt;&lt; endl; else cout &lt;&lt; \"NO\" &lt;&lt; endl; &#125;&#125; I-旅行家的预算题目链接 分析&emsp;&emsp;一道操作比较繁琐的贪心+模拟。可以转换区间贪心。加入起点与终点共$n+2$个站点。若当前在点$i$则需要考虑若在当前站点加多少油可以到达下一个便宜的站点。如果无法到达下一个便宜的站，那就需要加满油。 复杂度$O(N^2)$。 本题的N超级小。。 AC代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#include &lt;bits/stdc++.h&gt;using namespace std;#define FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;int const maxn = 20;struct node &#123; double d, p; bool operator&lt;(const node &amp;obj) const &#123; if (d == obj.d) return p &lt; obj.p; return d &lt; obj.d; &#125;&#125;D[maxn];int main(void) &#123; FAST_IO; int n; double d, c, cd, p; cin &gt;&gt; d &gt;&gt; c &gt;&gt; cd &gt;&gt; p &gt;&gt; n; D[0].p = p; for (int i = 1; i &lt;= n; i++) &#123; cin &gt;&gt; D[i].d &gt;&gt; D[i].p; &#125; D[n + 1].d = d; D[n + 1].p = 0; sort(D + 1, D + 1 + n); double total = 0, oil = 0, x = 0; for (int i = 0; i &lt;= n + 1; i++) &#123; oil -= (D[i].d - x) / cd;//当前剩余的油量 if (oil &lt; 0) &#123; total = -1; break; &#125; int j = i + 1; while (D[j].p &gt; D[i].p &amp;&amp; j &lt;= n) &#123;//寻找比当前要便宜的站点 j++; &#125; double need = (D[j].d - D[i].d) / cd; need = min(c, need); double add = need - oil; if (add &gt; 0) &#123; total += add * D[i].p; oil += add; &#125; x = D[i].d; &#125; if (total == -1) &#123; cout &lt;&lt; \"No Solution\" &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; fixed &lt;&lt; setprecision(2) &lt;&lt; total &lt;&lt; endl; &#125; return 0;&#125; K-Hide and Seek题目链接 题意&emsp;&emsp;奶牛贝西和农夫约翰（FJ）玩捉迷藏，现在有N个谷仓，FJ开始在第一个谷仓，贝西为了不让FJ找到她，当然要藏在距离第一个谷仓最远的那个谷仓了。现在告诉你N个谷仓，和M个两两谷仓间的“无向边”。每两个仓谷间当然会有最短路径，现在要求距离第一个谷仓（FJ那里）最远的谷仓是哪个（所谓最远就是距离第一个谷仓最大的最短路径）？如有多个则输出编号最小的。以及求这最远距离是多少，和有几个这样的谷仓距离第一个谷仓那么远。 分析&emsp;&emsp;只要求出1-N的单源最短路，遍历找出最大值就可。因为本题所有边的边权全是1，所以只要从1开始bfs遍历图就行了。复杂度$O(N+M)$. 12345// C++的STL里有一些直接的简单算法可用（以下算法复杂度均为O(N)）：//头文件 algorithmmax_element(begin(), end(), cmp); //找到序列最大值，返回其指针min_element(begin(), end(), cmp); //找到序列最小值，返回其指针count(begin(), end(), value) //统计序列中为value值的个数 AC 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include &lt;bits/stdc++.h&gt;using namespace std;#define FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;int const maxn = 50000 + 10;struct node &#123; int v, next;&#125;e[maxn &lt;&lt; 1];int head[maxn], cnt;int dis[maxn], vis[maxn];void add(int u, int v) &#123; e[cnt].v = v; e[cnt].next = head[u]; head[u] = cnt++;&#125;void bfs() &#123; queue&lt;pair&lt;int, int&gt;&gt; q; dis[1] = 0; vis[1] = 1; q.push(make_pair(1, 0)); while (!q.empty()) &#123; auto x = q.front(); q.pop(); int u = x.first; dis[u] = x.second; for (int i = head[u]; ~i; i = e[i].next) &#123; int v = e[i].v; if (vis[v]) continue; vis[v] = 1; q.push(make_pair(v, x.second + 1)); &#125; &#125;&#125;int main(void) &#123; FAST_IO; memset(head, -1, sizeof(head)); int n, m; cin &gt;&gt; n &gt;&gt; m; for (int i = 0; i &lt; m; i++) &#123; int u, v; cin &gt;&gt; u &gt;&gt;v; add(u, v); add(v, u); &#125; bfs(); int mx = *max_element(dis + 1, dis + 1 + n); int cont = count(dis + 1, dis + 1 + n, mx); int p = 0; for (int i = 1; i &lt;= n; i++) &#123; if (dis[i] == mx) &#123; p = i; break; &#125; &#125; cout &lt;&lt; p &lt;&lt; \" \" &lt;&lt; mx &lt;&lt; \" \" &lt;&lt; cont &lt;&lt; endl; return 0;&#125; L-回文数题目链接 分析&emsp;&emsp;模拟N进制加法，并判断回文。 AC代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include &lt;bits/stdc++.h&gt;using namespace std;#define FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;int n;string clac(string a) &#123; string ans, b(a); reverse(b.begin(), b.end()); ans.resize(a.length()); int d = 0; for (int i = a.length() - 1; i &gt;= 0; i--) &#123; int x, y; if (isdigit(a[i])) &#123; x = a[i] - '0'; &#125; else &#123; x = a[i] - 'A' + 10; &#125; if (isdigit(b[i])) &#123; y = b[i] - '0'; &#125; else &#123; y = b[i] - 'A' + 10; &#125; int c = (x + y + d) % n; if (c &lt; 10) ans[i] = c + '0'; else &#123; ans[i] = c - 10 + 'A'; &#125; d = (x + y + d) / n; &#125; if (d &gt; 0) ans.insert(ans.begin(), d &lt; 10 ? d + '0' : d - 10 + 'A'); return ans;&#125;bool ok(string &amp;s) &#123; int len = (int)s.length(); for (int i = 0; i &lt; len / 2; i++) &#123; if (s[i] != s[len - 1 - i]) &#123; return false; &#125; &#125; return true;&#125;int main(void) &#123; FAST_IO; string m; cin &gt;&gt; n &gt;&gt; m; int ans = 0; while (!ok(m)) &#123; m = clac(m); ans++; if (ans &gt; 30) &#123; cout &lt;&lt; \"Impossible!\" &lt;&lt; endl; break; &#125; &#125; if (ans &lt;= 30) cout &lt;&lt; \"STEP=\" &lt;&lt; ans &lt;&lt; endl; return 0;&#125;","content":"<h1 id=\"A-乘积最大\"><a href=\"#A-乘积最大\" class=\"headerlink\" title=\"A-乘积最大\"></a>A-乘积最大</h1><p><a href=\"https://ac.nowcoder.com/acm/contest/1071/A\" target=\"_blank\" rel=\"noopener\">题目链接</a></p>\n<h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;给定一个数字字符串，把字符串分成$K+1$个数，使这些数乘积最大。</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>本题最佳解法应该是<code>区间dp</code>但本蒟蒻不会dp。只能暴力dfs了。<br>在串中插入<code>*</code>其性质和排列类似。可以参考蓝书P15<code>递归实现排列型枚举</code>。<br>对于在第$i$个位置插入<code>*</code>分成$i$之前的为一段，及$i$和$i$之后一段。</p>\n<a id=\"more\"></a>\n\n<blockquote>\n<p>需要注意在数字相连时的边界情况。</p>\n</blockquote>\n<h2 id=\"AC代码\"><a href=\"#AC代码\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">50</span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> a;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, k;</span><br><span class=\"line\"><span class=\"keyword\">int</span> vis[maxn];</span><br><span class=\"line\">ll s[maxn];</span><br><span class=\"line\">ll ans = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x == k) &#123;</span><br><span class=\"line\">        ll x = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> t = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(s, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(s));</span><br><span class=\"line\">        s[t] = a[<span class=\"number\">0</span>] - <span class=\"number\">48</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (vis[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                s[++t] = (a[i] - <span class=\"string\">'0'</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                s[t] = s[t] * <span class=\"number\">10</span> + (a[i] - <span class=\"string\">'0'</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= t; i++) &#123;</span><br><span class=\"line\">            x *= s[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans = max(ans, x);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (vis[i])</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        vis[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        dfs(x + <span class=\"number\">1</span>);</span><br><span class=\"line\">        vis[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; a;</span><br><span class=\"line\">    dfs(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"C-单词接龙\"><a href=\"#C-单词接龙\" class=\"headerlink\" title=\"C-单词接龙\"></a>C-单词接龙</h1><p><a href=\"https://ac.nowcoder.com/acm/contest/1071/C\" target=\"_blank\" rel=\"noopener\">题目链接</a></p>\n<h2 id=\"题意-1\"><a href=\"#题意-1\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>&emsp;&emsp;给定一个字符和一些字符串，按照字符串之间重叠的部分，连接字符串，求最长的连接长度。</p>\n<h2 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>&emsp;&emsp;比较经典的DFS+字符串，比较考察细节，比如字符串的模拟操作、dfs回溯的处理。<br>&emsp;&emsp;有两种基本的思路：</p>\n<ol>\n<li>对于字符串，本题数据较少，可以搜索时暴力处理。使用C++的string比较方便，但仍需要注意边界细节。(我写的时候在substr上调了好久，emmmm)</li>\n<li>比较好的做法可以先预处理一个$num$数组，其中$num[i][j]$表示串$i$和串$j$之间可以连接的字符数。在DFS的时候使用 $num[i][j]$ 进行回溯等操作。</li>\n</ol>\n<h2 id=\"AC代码-1\"><a href=\"#AC代码-1\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><h3 id=\"方法1-string暴力\"><a href=\"#方法1-string暴力\" class=\"headerlink\" title=\"方法1(string暴力)\"></a>方法1(string暴力)</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> maxn = <span class=\"number\">50</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> vis[maxn];</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; v_str;</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"built_in\">string</span> &amp;s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; (<span class=\"keyword\">int</span>)v_str.size(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (vis[i] &gt;= <span class=\"number\">2</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> &amp;ts = v_str[i];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len1 = (<span class=\"keyword\">int</span>)s.length();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len2 = (<span class=\"keyword\">int</span>)ts.length();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; min(len1, len2); j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ts.substr(<span class=\"number\">0</span>, j + <span class=\"number\">1</span>) == s.substr(len1 - j - <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">                flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">                n = j + <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n) &#123;</span><br><span class=\"line\">            vis[i]++;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> temp = s;</span><br><span class=\"line\">            s = s + ts.substr(n);</span><br><span class=\"line\">            dfs(s);</span><br><span class=\"line\">            s = temp;</span><br><span class=\"line\">            vis[i]--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!flag) &#123;</span><br><span class=\"line\">        ans = max((<span class=\"keyword\">int</span>)s.length(), ans);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> s;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; s;</span><br><span class=\"line\">        v_str.push_back(s);</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">    <span class=\"built_in\">string</span> s;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; s;</span><br><span class=\"line\">    dfs(s);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方法2-预处理字符数\"><a href=\"#方法2-预处理字符数\" class=\"headerlink\" title=\"方法2(预处理字符数)\"></a>方法2(预处理字符数)</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"built_in\">string</span> dc[<span class=\"number\">25</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> cd[<span class=\"number\">25</span>][<span class=\"number\">25</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> cs[<span class=\"number\">25</span>];</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mincd</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> p=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ky=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=dc[x].size()<span class=\"number\">-1</span>;k&gt;=<span class=\"number\">0</span>;k--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> kx=k;kx&lt;dc[x].size();kx++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dc[x][kx]!=dc[y][ky++])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                p=<span class=\"literal\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p==<span class=\"literal\">true</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> dc[x].size()-k;</span><br><span class=\"line\">         </span><br><span class=\"line\">        ky=<span class=\"number\">0</span>;</span><br><span class=\"line\">        p=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">     </span><br><span class=\"line\"><span class=\"keyword\">char</span> sta;</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> mans=<span class=\"number\">0</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> jx=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cs[i]&gt;=<span class=\"number\">2</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cd[p][i]==<span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cd[p][i]==dc[p].size() || cd[p][i]==dc[i].size()) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        mans+=dc[i].size()-cd[p][i];</span><br><span class=\"line\">        cs[i]++;</span><br><span class=\"line\">        jx=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        dfs(i);   <span class=\"comment\">//接上</span></span><br><span class=\"line\">        mans-=dc[i].size()-cd[p][i];   <span class=\"comment\">//回溯</span></span><br><span class=\"line\">        cs[i]--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(jx==<span class=\"literal\">false</span>)  </span><br><span class=\"line\">    ans=max(ans,mans);</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;dc[i];</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;sta;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)</span><br><span class=\"line\">            cd[i][j]=mincd(i,j);</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dc[i][<span class=\"number\">0</span>]==sta)&#123;</span><br><span class=\"line\">            cs[i]++;</span><br><span class=\"line\">            mans=dc[i].size();</span><br><span class=\"line\">            dfs(i);</span><br><span class=\"line\">            cs[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;ans&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"D-Cow-Line\"><a href=\"#D-Cow-Line\" class=\"headerlink\" title=\"D-Cow Line\"></a>D-Cow Line</h1><p><a href=\"https://ac.nowcoder.com/acm/contest/1071/D\" target=\"_blank\" rel=\"noopener\">题目链接</a></p>\n<h2 id=\"题意-2\"><a href=\"#题意-2\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>&emsp;&emsp;有一些人排队，允许进行以下四种操作：</p>\n<ul>\n<li>A L —– 从左边插入一人</li>\n<li>A R —– 从右边插入一人</li>\n<li>D L N —– 从左边走出N人</li>\n<li>D R N —– 从右边走出N人</li>\n</ul>\n<p>&emsp;&emsp;问最后队伍中的序号。</p>\n<h2 id=\"分析-2\"><a href=\"#分析-2\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>&emsp;&emsp;用双端队列$deque$模拟入队出队，即可。复杂度$O(N)$</p>\n<h2 id=\"AC代码-2\"><a href=\"#AC代码-2\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt; q;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> opt, dir;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>, k;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; opt &gt;&gt; dir;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (opt == <span class=\"string\">\"A\"</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dir == <span class=\"string\">\"L\"</span>) &#123;</span><br><span class=\"line\">                q.push_front(++num);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                q.push_back(++num);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; k;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dir == <span class=\"string\">\"L\"</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k &amp;&amp; !q.empty(); i++)</span><br><span class=\"line\">                    q.pop_front();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k &amp;&amp; !q.empty(); i++)</span><br><span class=\"line\">                    q.pop_back();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty()) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; q.front() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        q.pop_front();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"G-Cow-Digit-Game\"><a href=\"#G-Cow-Digit-Game\" class=\"headerlink\" title=\"G-Cow Digit Game\"></a>G-Cow Digit Game</h1><p><a href=\"https://ac.nowcoder.com/acm/contest/1071/G\" target=\"_blank\" rel=\"noopener\">题目链接</a></p>\n<h2 id=\"分析-3\"><a href=\"#分析-3\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>&emsp;&emsp;好像是道SG函数的博弈裸题，队友说套一下SG函数就好了。直接上代码吧。</p>\n<h2 id=\"AC代码-3\"><a href=\"#AC代码-3\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> g, n;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> sg[<span class=\"number\">1000005</span>];</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">9</span>; i++)</span><br><span class=\"line\">        sg[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">10</span>; i &lt;= <span class=\"number\">1000000</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ma = <span class=\"number\">0</span>, mi = <span class=\"number\">10</span>, t = i;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(t)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x = t % <span class=\"number\">10</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(x) mi = min(mi, x);</span><br><span class=\"line\">            ma = max(ma, x);</span><br><span class=\"line\">            t /= <span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sg[i - ma] &amp;&amp; sg[i - mi])</span><br><span class=\"line\">            sg[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            sg[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; g;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; g; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sg[n]) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"YES\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"NO\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"I-旅行家的预算\"><a href=\"#I-旅行家的预算\" class=\"headerlink\" title=\"I-旅行家的预算\"></a>I-旅行家的预算</h1><p><a href=\"https://ac.nowcoder.com/acm/contest/1071/I\" target=\"_blank\" rel=\"noopener\">题目链接</a></p>\n<h2 id=\"分析-4\"><a href=\"#分析-4\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>&emsp;&emsp;一道操作比较繁琐的<code>贪心+模拟</code>。可以转换区间贪心。加入起点与终点共$n+2$个站点。<br>若当前在点$i$则需要考虑若在当前站点加多少油可以到达下一个便宜的站点。如果无法到达下一个便宜的站，那就需要加满油。</p>\n<p>复杂度$O(N^2)$。 </p>\n<blockquote>\n<p>本题的N超级小。。</p>\n</blockquote>\n<h2 id=\"AC代码-4\"><a href=\"#AC代码-4\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> maxn = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> d, p;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> node &amp;obj) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (d == obj.d)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> p &lt; obj.p;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> d &lt; obj.d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;D[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> d, c, cd, p;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; d &gt;&gt; c &gt;&gt; cd &gt;&gt; p  &gt;&gt; n;</span><br><span class=\"line\">    D[<span class=\"number\">0</span>].p = p;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; D[i].d &gt;&gt; D[i].p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    D[n + <span class=\"number\">1</span>].d = d;</span><br><span class=\"line\">    D[n + <span class=\"number\">1</span>].p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    sort(D + <span class=\"number\">1</span>, D + <span class=\"number\">1</span> + n);</span><br><span class=\"line\">    <span class=\"keyword\">double</span> total = <span class=\"number\">0</span>, oil = <span class=\"number\">0</span>, x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n + <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        oil -= (D[i].d - x) / cd;<span class=\"comment\">//当前剩余的油量</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oil &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            total = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (D[j].p &gt; D[i].p &amp;&amp; j &lt;= n) &#123;<span class=\"comment\">//寻找比当前要便宜的站点</span></span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> need = (D[j].d - D[i].d) / cd;</span><br><span class=\"line\">        need = min(c, need);</span><br><span class=\"line\">        <span class=\"keyword\">double</span> add = need - oil;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (add &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            total += add * D[i].p;</span><br><span class=\"line\">            oil += add;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        x = D[i].d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (total == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"No Solution\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class=\"number\">2</span>) &lt;&lt; total &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"K-Hide-and-Seek\"><a href=\"#K-Hide-and-Seek\" class=\"headerlink\" title=\"K-Hide and Seek\"></a>K-Hide and Seek</h1><p><a href=\"https://ac.nowcoder.com/acm/contest/1071/K\" target=\"_blank\" rel=\"noopener\">题目链接</a></p>\n<h2 id=\"题意-3\"><a href=\"#题意-3\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>&emsp;&emsp;奶牛贝西和农夫约翰（FJ）玩捉迷藏，现在有N个谷仓，FJ开始在第一个谷仓，贝西为了不让FJ找到她，当然要藏在距离第一个谷仓最远的那个谷仓了。现在告诉你N个谷仓，和M个两两谷仓间的“无向边”。每两个仓谷间当然会有最短路径，现在要求距离第一个谷仓（FJ那里）最远的谷仓是哪个（所谓最远就是距离第一个谷仓最大的最短路径）？如有多个则输出编号最小的。以及求这最远距离是多少，和有几个这样的谷仓距离第一个谷仓那么远。</p>\n<h2 id=\"分析-5\"><a href=\"#分析-5\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>&emsp;&emsp;只要求出1-N的单源最短路，遍历找出最大值就可。因为本题所有边的边权全是1，所以只要从1开始bfs遍历图就行了。复杂度$O(N+M)$.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// C++的STL里有一些直接的简单算法可用（以下算法复杂度均为O(N)）：</span></span><br><span class=\"line\"><span class=\"comment\">//头文件 algorithm</span></span><br><span class=\"line\">max_element(begin(), end(), cmp);  <span class=\"comment\">//找到序列最大值，返回其指针</span></span><br><span class=\"line\">min_element(begin(), end(), cmp); <span class=\"comment\">//找到序列最小值，返回其指针</span></span><br><span class=\"line\">count(begin(), end(), value) <span class=\"comment\">//统计序列中为value值的个数</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"AC-代码\"><a href=\"#AC-代码\" class=\"headerlink\" title=\"AC 代码\"></a>AC 代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> maxn = <span class=\"number\">50000</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> v, next;</span><br><span class=\"line\">&#125;e[maxn &lt;&lt; <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> head[maxn], cnt;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dis[maxn], vis[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    e[cnt].v = v;</span><br><span class=\"line\">    e[cnt].next = head[u];</span><br><span class=\"line\">    head[u] = cnt++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt; q;</span><br><span class=\"line\">    dis[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    vis[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    q.push(make_pair(<span class=\"number\">1</span>, <span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> x = q.front();</span><br><span class=\"line\">        q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = x.first;</span><br><span class=\"line\">        dis[u] = x.second;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = head[u]; ~i; i = e[i].next) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v = e[i].v;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (vis[v]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            vis[v] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            q.push(make_pair(v, x.second + <span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(head, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(head));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u, v;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; u &gt;&gt;v;</span><br><span class=\"line\">        add(u, v);</span><br><span class=\"line\">        add(v, u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bfs();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mx = *max_element(dis + <span class=\"number\">1</span>, dis + <span class=\"number\">1</span> + n);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cont = count(dis + <span class=\"number\">1</span>, dis + <span class=\"number\">1</span> + n, mx);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dis[i] == mx) &#123;</span><br><span class=\"line\">            p = i;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; p &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; mx &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; cont &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"L-回文数\"><a href=\"#L-回文数\" class=\"headerlink\" title=\"L-回文数\"></a>L-回文数</h1><p><a href=\"https://ac.nowcoder.com/acm/contest/1071/L\" target=\"_blank\" rel=\"noopener\">题目链接</a></p>\n<h2 id=\"分析-6\"><a href=\"#分析-6\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>&emsp;&emsp;模拟N进制加法，并判断回文。</p>\n<h2 id=\"AC代码-5\"><a href=\"#AC代码-5\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">clac</span><span class=\"params\">(<span class=\"built_in\">string</span> a)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> ans, b(a);</span><br><span class=\"line\">    reverse(b.begin(), b.end());</span><br><span class=\"line\">    ans.resize(a.length());</span><br><span class=\"line\">    <span class=\"keyword\">int</span> d = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = a.length() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x, y;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">isdigit</span>(a[i])) &#123;</span><br><span class=\"line\">            x = a[i] - <span class=\"string\">'0'</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            x = a[i] - <span class=\"string\">'A'</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">isdigit</span>(b[i])) &#123;</span><br><span class=\"line\">            y = b[i] - <span class=\"string\">'0'</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            y = b[i] - <span class=\"string\">'A'</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> c = (x + y + d) % n;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c &lt; <span class=\"number\">10</span>)</span><br><span class=\"line\">            ans[i] = c + <span class=\"string\">'0'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            ans[i] = c - <span class=\"number\">10</span> + <span class=\"string\">'A'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        d = (x + y + d) / n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        ans.insert(ans.begin(), d &lt; <span class=\"number\">10</span> ? d + <span class=\"string\">'0'</span> : d - <span class=\"number\">10</span> + <span class=\"string\">'A'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">ok</span><span class=\"params\">(<span class=\"built_in\">string</span> &amp;s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = (<span class=\"keyword\">int</span>)s.length();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len / <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s[i] != s[len - <span class=\"number\">1</span> - i]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> m;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!ok(m)) &#123;</span><br><span class=\"line\">        m = clac(m);</span><br><span class=\"line\">        ans++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ans &gt; <span class=\"number\">30</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Impossible!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ans &lt;= <span class=\"number\">30</span>) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"STEP=\"</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","link":"","categories":[{"name":"ACM","slug":"ACM","permalink":"http://yoursite.com/categories/ACM/"},{"name":"牛客","slug":"ACM/牛客","permalink":"http://yoursite.com/categories/ACM/牛客/"},{"name":"题解","slug":"ACM/牛客/题解","permalink":"http://yoursite.com/categories/ACM/牛客/题解/"}],"tags":[{"name":"模拟","slug":"模拟","permalink":"http://yoursite.com/tags/模拟/"},{"name":"贪心","slug":"贪心","permalink":"http://yoursite.com/tags/贪心/"},{"name":"DP","slug":"DP","permalink":"http://yoursite.com/tags/DP/"},{"name":"暴力","slug":"暴力","permalink":"http://yoursite.com/tags/暴力/"},{"name":"最短路","slug":"最短路","permalink":"http://yoursite.com/tags/最短路/"},{"name":"dfs","slug":"dfs","permalink":"http://yoursite.com/tags/dfs/"}]},{"title":"牛客假日团队赛8-部分题解","date":"2019-07-28T13:50:53.000Z","path":"2019/07/28/nowcoder-team-contest08-solve-part/","text":"比赛总结暑期第一次打牛客团队赛，居然运气不错的就中奖了。不过这次的题总体都不难，差1题就可以AK了呢。还是来总结下吧，先附上算法大纲。 easy：B(模拟)、C(高精度)、G(排序)、H(BF)、I(规律题)、J(简单DP)、L(打表BF) mid：K(floyd传递闭包)、D(复杂模拟)、F(最短路+二分) hard：E(二分+并查集)、A(树形DP求最小支配集合) 其中蒟蒻的我写了BCGHIF(果然我只配写简单题) B-iCow题目传送门 题意&emsp;&emsp;有$N$ $(1 &lt;= N &lt;= 1,000)$首歌曲，按照$1-N$编号。 第i首曲子有一个初始权值$R_i(1 &lt;= R_i &lt;= 10,000)$。 当一首曲子播放完毕，接下来播放的将是所有曲子中权值最大的那首（如果有两首或多首曲子的权值相同，那么这些曲子中编号最小的那首会被选中）。 一首曲子在播放结束后，它的权值会被平均地分给其他N-1首曲子，它本身的权值清零。 &emsp;&emsp;如果一首曲子的权值无法被平均分配（也就是说，无法被N-1整除），那么被N-1除的余数部分将会以1为单位，顺次分配给排名靠前的曲子（也就是说，顺序为曲目1、曲目2 etc依次下去。当然，刚播放过的那首曲子需要被跳过），直到多出的部分被分配完。在选定的下一首曲子播放完毕后，这个算法再次被执行，调整曲子的权值，并选出再接下来播放的曲目。 &emsp;&emsp;请你计算一下，按FJ的算法，最先播放的$T(1 &lt;= T &lt;= 1000)$首曲子分别是哪些。 分析&emsp;&emsp;数据不大，简单模拟题。 AC代码1234567891011121314151617181920212223242526272829303132333435#include &lt;bits/stdc++.h&gt;#define FAST_IO std::ios::sync_with_stdio(false),std::cin.tie(0),std::cout.tie(0)#define pause system(\"pause\")using namespace std;typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;int const maxn = 1000 + 10;int a[maxn];int main(void) &#123; FAST_IO; int n, t; cin &gt;&gt; n &gt;&gt; t; for (int i = 1; i &lt;= n; i++) &#123; cin &gt;&gt; a[i]; &#125; for (int i = 0; i &lt; t; i++) &#123; int pos = max_element(a + 1, a + 1 + n) - a; cout &lt;&lt; pos &lt;&lt; endl; int x = a[pos] % (n - 1); int s = a[pos] / (n - 1); a[pos]= 0; for (int i = 1; i &lt;= n; i++) &#123; if (i == pos) continue; a[i] += s; if (x) &#123; a[i]++; x--; &#125; &#125; &#125; // pause; return 0;&#125; C-阶乘之和题目传送门 分析&emsp;&emsp;python大法真好 AC代码1234567891011121314n = int(input())def fact(x): s = 1 for i in range(1, x + 1): s *= i return ssum = 0for i in range(1, n + 1): sum += fact(i)if sum == 0: sum += 1print(sum) G-Election Time题目传送门 题意&emsp;&emsp;一场比赛，规则有两轮，再第一轮中选出前k个牛，再在这k只牛中选取第二轮中票数最多的牛，输出它的编号。 分析&emsp;&emsp;进行两次排序就行。 AC代码1234567891011121314151617181920212223242526272829303132#include &lt;bits/stdc++.h&gt;#define FAST_IO std::ios::sync_with_stdio(false),std::cin.tie(0),std::cout.tie(0)#define pause system(\"pause\")using namespace std;typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;typedef pair&lt;ll, ll&gt; pll;int const maxn = 50000 + 10;struct node &#123; ll a, b; int x;&#125;;node a[maxn];int main(void) &#123; FAST_IO; int n, k; cin &gt;&gt; n &gt;&gt; k; for (int i = 1; i &lt;= n; i++) &#123; cin &gt;&gt; a[i].a &gt;&gt; a[i].b; a[i].x = i; &#125; sort(a + 1 , a + 1 + k, [](const node &amp;x, const node &amp;y)&#123; return x.a &gt; y.a; &#125;); sort(a + 1 , a + 1 + k, [](const node &amp;x, const node &amp;y)&#123; return x.b &gt; y.b; &#125;); cout &lt;&lt; a[1].x &lt;&lt; endl; // pause; return 0;&#125; H-Costume Party题目传送门 分析真的暴力就行了emmm. AC代码1234567891011121314151617181920212223242526272829#include &lt;bits/stdc++.h&gt;#define FAST_IO std::ios::sync_with_stdio(false),std::cin.tie(0),std::cout.tie(0)#define pause system(\"pause\")using namespace std;typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;typedef pair&lt;ll, ll&gt; pll;int const maxn = 50000 + 10;int a[maxn];int main(void) &#123; FAST_IO; int num = 0; int n, s; cin &gt;&gt; n &gt;&gt; s; for (int i = 0; i &lt; n;i++) &#123; cin &gt;&gt; a[i]; &#125; for (int i = 0; i &lt; n; i++) &#123; for (int j = i + 1;j &lt; n; j++) &#123; if (a[i] + a[j] &lt;= s) ++num; &#125; &#125; cout &lt;&lt; num &lt;&lt; endl; // pause; return 0;&#125; I-Cantor表题目传送门 分析数表提示我们按照斜线分类。第1条斜线有1个数，第2条有2个数，第3条有3个数……第k条有k个数。这样，前k条斜线一共有$S=1+2+3+……+k$个数。 第n项在哪条斜线上呢？只要找到一个最小的k，使得$S≥n$，那么第$n$项就是第k条斜线上倒数第$S-n+1$个数（最后一个元素是倒数第1个元素，而不是倒数第0个元素）。 而k的奇偶决定着第k条斜线上数的顺序：若k是奇数，第k条斜线上倒数第i个元素是$i\\over (k+1-i)$；若k是偶数，第k条斜线上倒数第i个元素是$(k+1-i)\\over i$。 AC代码1234567891011121314151617181920#include &lt;bits/stdc++.h&gt;using namespace std; int main()&#123; ios::sync_with_stdio(false); cin.tie(0); int n,h=1; cin&gt;&gt;n; while(n-h&gt;0) &#123; n=n-h; h++; &#125; if(!h%2) cout&lt;&lt;n&lt;&lt;\"/\"&lt;&lt;h+1-n&lt;&lt;endl; else cout&lt;&lt;h+1-n&lt;&lt;\"/\"&lt;&lt;n&lt;&lt;endl; return 0;&#125; F-Telephone Lines题目传送门 题意找出1-n的通路中，第K+1大的路径权值最小的值。 分析经典的二分+最短路解法。由于答案具有单调性，所以可以对其二分答案，若路径$i$的权值大于$mid$则为1，否则为0。然后进行找$1$到$n$的最短路。那么跑完最短路之后，由于小于$mid$的边权值均为0，$1-n$最短路的值就是路径上所有比$mid$大的边的总数。 AC代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091#include &lt;bits/stdc++.h&gt;typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;typedef unsigned long long ull;#define FAST_IO std::ios::sync_with_stdio(false),std::cin.tie(0),std::cout.tie(0)#define PAUSE system(\"pause\")using namespace std;int const maxn = 10000 + 10;struct Node &#123; int v, w, next;&#125;e[maxn &lt;&lt; 1];struct node &#123; int u; int w; node(int const &amp;u = 0, int const &amp;w = 0) : u(u), w(w) &#123;&#125; bool operator&lt;(const node &amp;p) const&#123; return w &gt; p.w; &#125; &#125;;int head[maxn], vis[maxn];int dis[maxn];int cnt = 0;int n, m, k;void add(int u, int v, int w) &#123; e[cnt].v = v; e[cnt].w = w; e[cnt].next = head[u]; head[u] = cnt++;&#125;void dijkstra(int mid) &#123; priority_queue&lt;node&gt; q; for (int i = 1; i &lt;= n; i++) &#123; dis[i] = INT_MAX; vis[i] = 0; &#125; dis[1] = 0; q.push(node(1, dis[1])); while (!q.empty()) &#123; int u = q.top().u; q.pop(); if (vis[u]) continue; vis[u] = 1; for (int i = head[u]; ~i; i = e[i].next) &#123; int v = e[i].v; int w = e[i].w &gt; mid ? 1 : 0; if (dis[v] &gt; dis[u] + w) &#123; dis[v] = dis[u] + w; q.push(node(v, dis[v])); &#125; &#125; &#125;&#125;int main(void) &#123; FAST_IO; memset(head, -1, sizeof(head)); cin &gt;&gt; n &gt;&gt; m &gt;&gt; k; int l = 0, r = -1; for (int i = 0; i &lt; m; i++) &#123; int u, v, w; cin &gt;&gt; u &gt;&gt; v &gt;&gt; w; r = max(r, w); add(u, v, w); add(v, u, w); &#125; int mx = r; while (l &lt; r) &#123; int mid = (l + r) / 2; dijkstra(mid); if (dis[n] &lt;= k) &#123; r = mid; &#125; else &#123; l = mid + 1; &#125; &#125; if (mx == r) &#123; cout &lt;&lt; -1 &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; r &lt;&lt; endl; &#125; // PAUSE; return 0;&#125;","content":"<h1 id=\"比赛总结\"><a href=\"#比赛总结\" class=\"headerlink\" title=\"比赛总结\"></a>比赛总结</h1><p>暑期第一次打牛客团队赛，居然运气不错的就中奖了。不过这次的题总体都不难，差1题就可以AK了呢。<br>还是来总结下吧，先附上算法大纲。</p>\n<ul>\n<li>easy：B(模拟)、C(高精度)、G(排序)、H(BF)、I(规律题)、J(简单DP)、L(打表BF)</li>\n<li>mid：K(floyd传递闭包)、D(复杂模拟)、F(最短路+二分)</li>\n<li>hard：E(二分+并查集)、A(树形DP求最小支配集合)</li>\n</ul>\n<p>其中蒟蒻的我写了BCGHIF(果然我只配写简单题)</p>\n<a id=\"more\"></a>\n\n<h1 id=\"B-iCow\"><a href=\"#B-iCow\" class=\"headerlink\" title=\"B-iCow\"></a>B-iCow</h1><p><a href=\"https://ac.nowcoder.com/acm/contest/1069/B\" target=\"_blank\" rel=\"noopener\">题目传送门</a></p>\n<h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>&emsp;&emsp;有$N$ $(1 &lt;= N &lt;= 1,000)$首歌曲，按照$1-N$编号。</p>\n<ul>\n<li>第i首曲子有一个初始权值$R_i(1 &lt;= R_i &lt;= 10,000)$。</li>\n<li>当一首曲子播放完毕，接下来播放的将是所有曲子中权值最大的那首（如果有两首或多首曲子的权值相同，那么这些曲子中编号最小的那首会被选中）。</li>\n<li>一首曲子在播放结束后，它的权值会被平均地分给其他N-1首曲子，它本身的权值清零。</li>\n</ul>\n<p>&emsp;&emsp;如果一首曲子的权值无法被平均分配（也就是说，无法被N-1整除），那么被N-1除的余数部分将会以1为单位，顺次分配给排名靠前的曲子（也就是说，顺序为<strong>曲目1、曲目2 etc</strong>依次下去。当然，刚播放过的那首曲子需要被跳过），直到多出的部分被分配完。<br>在选定的下一首曲子播放完毕后，这个算法再次被执行，调整曲子的权值，并选出再接下来播放的曲目。</p>\n<p>&emsp;&emsp;请你计算一下，按FJ的算法，最先播放的$T(1 &lt;= T &lt;= 1000)$首曲子分别是哪些。</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>&emsp;&emsp;数据不大，简单模拟题。</p>\n<h2 id=\"AC代码\"><a href=\"#AC代码\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO std::ios::sync_with_stdio(false),std::cin.tie(0),std::cout.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pause system(<span class=\"meta-string\">\"pause\"</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> maxn = <span class=\"number\">1000</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, t;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; t; </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; t; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pos = max_element(a + <span class=\"number\">1</span>, a + <span class=\"number\">1</span> + n) - a;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; pos &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = a[pos] % (n - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> s = a[pos] / (n - <span class=\"number\">1</span>);</span><br><span class=\"line\">        a[pos]= <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == pos) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            a[i] += s;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x) &#123;</span><br><span class=\"line\">                a[i]++;</span><br><span class=\"line\">                x--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// pause;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"C-阶乘之和\"><a href=\"#C-阶乘之和\" class=\"headerlink\" title=\"C-阶乘之和\"></a>C-阶乘之和</h1><p><a href=\"https://ac.nowcoder.com/acm/contest/1069/C\" target=\"_blank\" rel=\"noopener\">题目传送门</a></p>\n<h2 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>&emsp;&emsp;python大法真好</p>\n<h2 id=\"AC代码-1\"><a href=\"#AC代码-1\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = int(input())</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fact</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    s = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, x + <span class=\"number\">1</span>):</span><br><span class=\"line\">        s *= i</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s</span><br><span class=\"line\"></span><br><span class=\"line\">sum = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, n + <span class=\"number\">1</span>):</span><br><span class=\"line\">    sum += fact(i)</span><br><span class=\"line\"><span class=\"keyword\">if</span> sum == <span class=\"number\">0</span>:</span><br><span class=\"line\">    sum += <span class=\"number\">1</span></span><br><span class=\"line\">print(sum)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"G-Election-Time\"><a href=\"#G-Election-Time\" class=\"headerlink\" title=\"G-Election Time\"></a>G-Election Time</h1><p><a href=\"https://ac.nowcoder.com/acm/contest/1069/G\" target=\"_blank\" rel=\"noopener\">题目传送门</a></p>\n<h2 id=\"题意-1\"><a href=\"#题意-1\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>&emsp;&emsp;一场比赛，规则有两轮，再第一轮中选出前k个牛，再在这k只牛中选取第二轮中票数最多的牛，输出它的编号。</p>\n<h2 id=\"分析-2\"><a href=\"#分析-2\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>&emsp;&emsp;进行两次排序就行。</p>\n<h2 id=\"AC代码-2\"><a href=\"#AC代码-2\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO std::ios::sync_with_stdio(false),std::cin.tie(0),std::cout.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pause system(<span class=\"meta-string\">\"pause\"</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> maxn = <span class=\"number\">50000</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">    ll a, b;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">node a[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, k;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; a[i].a &gt;&gt; a[i].b;</span><br><span class=\"line\">        a[i].x = i; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sort(a + <span class=\"number\">1</span> , a + <span class=\"number\">1</span> + k, [](<span class=\"keyword\">const</span> node &amp;x, <span class=\"keyword\">const</span> node &amp;y)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x.a &gt; y.a;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    sort(a + <span class=\"number\">1</span> , a + <span class=\"number\">1</span> + k, [](<span class=\"keyword\">const</span> node &amp;x, <span class=\"keyword\">const</span> node &amp;y)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x.b &gt; y.b;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; a[<span class=\"number\">1</span>].x &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"comment\">// pause;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"H-Costume-Party\"><a href=\"#H-Costume-Party\" class=\"headerlink\" title=\"H-Costume Party\"></a>H-Costume Party</h1><p><a href=\"https://ac.nowcoder.com/acm/contest/1069/H\" target=\"_blank\" rel=\"noopener\">题目传送门</a></p>\n<h2 id=\"分析-3\"><a href=\"#分析-3\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>真的暴力就行了emmm.</p>\n<h2 id=\"AC代码-3\"><a href=\"#AC代码-3\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO std::ios::sync_with_stdio(false),std::cin.tie(0),std::cout.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pause system(<span class=\"meta-string\">\"pause\"</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> maxn = <span class=\"number\">50000</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, s;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; s;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n;i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>;j &lt; n; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a[i] + a[j] &lt;= s) </span><br><span class=\"line\">                ++num;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; num &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"comment\">// pause;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"I-Cantor表\"><a href=\"#I-Cantor表\" class=\"headerlink\" title=\"I-Cantor表\"></a>I-Cantor表</h1><p><a href=\"https://ac.nowcoder.com/acm/contest/1069/I\" target=\"_blank\" rel=\"noopener\">题目传送门</a></p>\n<h2 id=\"分析-4\"><a href=\"#分析-4\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>数表提示我们按照斜线分类。第1条斜线有1个数，第2条有2个数，第3条有3个数……第k条有k个数。这样，前k条斜线一共有$S=1+2+3+……+k$个数。</p>\n<p>第n项在哪条斜线上呢？只要找到一个最小的k，使得$S≥n$，那么第$n$项就是第k条斜线上倒数第$S-n+1$个数（最后一个元素是倒数第1个元素，而不是倒数第0个元素）。</p>\n<p>而k的奇偶决定着第k条斜线上数的顺序：若k是奇数，第k条斜线上倒数第i个元素是$i\\over (k+1-i)$；若k是偶数，第k条斜线上倒数第i个元素是$(k+1-i)\\over i$。</p>\n<h2 id=\"AC代码-4\"><a href=\"#AC代码-4\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::sync_with_stdio(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>.tie(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,h=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n-h&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        n=n-h;</span><br><span class=\"line\">        h++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!h%<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;n&lt;&lt;<span class=\"string\">\"/\"</span>&lt;&lt;h+<span class=\"number\">1</span>-n&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;h+<span class=\"number\">1</span>-n&lt;&lt;<span class=\"string\">\"/\"</span>&lt;&lt;n&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"F-Telephone-Lines\"><a href=\"#F-Telephone-Lines\" class=\"headerlink\" title=\"F-Telephone Lines\"></a>F-Telephone Lines</h1><p><a href=\"https://ac.nowcoder.com/acm/contest/1069/F\" target=\"_blank\" rel=\"noopener\">题目传送门</a></p>\n<h2 id=\"题意-2\"><a href=\"#题意-2\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>找出1-n的通路中，第<code>K+1</code>大的路径权值最小的值。</p>\n<h2 id=\"分析-5\"><a href=\"#分析-5\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>经典的二分+最短路解法。由于答案具有单调性，所以可以对其二分答案，若路径$i$的权值大于$mid$则为1，否则为0。然后进行找$1$到$n$的最短路。那么跑完最短路之后，由于小于$mid$的边权值均为0，$1-n$最短路的值就是路径上所有比$mid$大的边的总数。</p>\n<h2 id=\"AC代码-5\"><a href=\"#AC代码-5\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO std::ios::sync_with_stdio(false),std::cin.tie(0),std::cout.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PAUSE system(<span class=\"meta-string\">\"pause\"</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> maxn = <span class=\"number\">10000</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> v, w, next;</span><br><span class=\"line\">&#125;e[maxn &lt;&lt; <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> u;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> w;</span><br><span class=\"line\">    node(<span class=\"keyword\">int</span> <span class=\"keyword\">const</span> &amp;u = <span class=\"number\">0</span>, <span class=\"keyword\">int</span> <span class=\"keyword\">const</span> &amp;w = <span class=\"number\">0</span>) : </span><br><span class=\"line\">        u(u), w(w) &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> node &amp;p) <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> w &gt; p.w;</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> head[maxn], vis[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dis[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, k;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> w)</span> </span>&#123;</span><br><span class=\"line\">    e[cnt].v = v;</span><br><span class=\"line\">    e[cnt].w = w;</span><br><span class=\"line\">    e[cnt].next = head[u];</span><br><span class=\"line\">    head[u] = cnt++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dijkstra</span><span class=\"params\">(<span class=\"keyword\">int</span> mid)</span> </span>&#123;</span><br><span class=\"line\">    priority_queue&lt;node&gt; q;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        dis[i] = INT_MAX;</span><br><span class=\"line\">        vis[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dis[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    q.push(node(<span class=\"number\">1</span>, dis[<span class=\"number\">1</span>]));</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = q.top().u;</span><br><span class=\"line\">        q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (vis[u]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        vis[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = head[u]; ~i; i = e[i].next) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v = e[i].v;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> w = e[i].w &gt; mid ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dis[v] &gt; dis[u] + w) &#123;</span><br><span class=\"line\">                dis[v] = dis[u] + w;</span><br><span class=\"line\">                q.push(node(v, dis[v]));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(head, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(head));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = <span class=\"number\">0</span>, r = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u, v, w;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class=\"line\">        r = max(r, w);</span><br><span class=\"line\">        add(u, v, w);</span><br><span class=\"line\">        add(v, u, w);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mx = r;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (l &lt; r) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = (l + r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        dijkstra(mid);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dis[n] &lt;= k) &#123;</span><br><span class=\"line\">            r = mid;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            l = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mx == r) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"number\">-1</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; r &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// PAUSE;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","link":"","categories":[{"name":"ACM","slug":"ACM","permalink":"http://yoursite.com/categories/ACM/"},{"name":"牛客","slug":"ACM/牛客","permalink":"http://yoursite.com/categories/ACM/牛客/"},{"name":"题解","slug":"ACM/牛客/题解","permalink":"http://yoursite.com/categories/ACM/牛客/题解/"}],"tags":[{"name":"模拟","slug":"模拟","permalink":"http://yoursite.com/tags/模拟/"},{"name":"DP","slug":"DP","permalink":"http://yoursite.com/tags/DP/"},{"name":"暴力","slug":"暴力","permalink":"http://yoursite.com/tags/暴力/"},{"name":"最短路","slug":"最短路","permalink":"http://yoursite.com/tags/最短路/"},{"name":"数学","slug":"数学","permalink":"http://yoursite.com/tags/数学/"},{"name":"二分","slug":"二分","permalink":"http://yoursite.com/tags/二分/"},{"name":"高精度","slug":"高精度","permalink":"http://yoursite.com/tags/高精度/"}]},{"title":"TextOut","date":"2019-07-20T11:42:42.000Z","path":"2019/07/20/TextOut/","text":"TextOut函数原型1234567BOOL TextOut( HDC hdc, //设备环境句柄 int nXStart, //开始输出位置的x坐标 int nYStart, //开始输出位置的y坐标 LPCTSTR lpString, //要输出的字符串 int cbString //字符串的长度); 样例123456789101112131415161718192021222324252627LRESULT CALLBACK WndProc( HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)&#123; HDC hdc; //设备环境句柄 PAINTSTRUCT ps; //存储绘图环境的相关信息 TCHAR szText[20] = TEXT(\"Hello\"); switch (message)&#123; case WM_PAINT: //开始绘图并返回环境句柄 hdc = BeginPaint (hwnd, &amp;ps); //输出文字 TextOut(hdc, 50, 50, szText, wcslen(szText)); //结束绘图并释放环境句柄 EndPaint (hwnd, &amp;ps) ; return 0 ; case WM_DESTROY: PostQuitMessage(0) ; return 0 ; &#125; return DefWindowProc(hwnd, message, wParam, lParam) ;&#125;","content":"<h1 id=\"TextOut\"><a href=\"#TextOut\" class=\"headerlink\" title=\"TextOut\"></a>TextOut</h1><h1 id=\"函数原型\"><a href=\"#函数原型\" class=\"headerlink\" title=\"函数原型\"></a>函数原型</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">BOOL <span class=\"title\">TextOut</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    HDC hdc, <span class=\"comment\">//设备环境句柄</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"keyword\">int</span> nXStart, <span class=\"comment\">//开始输出位置的x坐标</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"keyword\">int</span> nYStart, <span class=\"comment\">//开始输出位置的y坐标</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    LPCTSTR lpString, <span class=\"comment\">//要输出的字符串</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"keyword\">int</span> cbString <span class=\"comment\">//字符串的长度</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n<h1 id=\"样例\"><a href=\"#样例\" class=\"headerlink\" title=\"样例\"></a>样例</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">LRESULT CALLBACK <span class=\"title\">WndProc</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    HWND hwnd,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    UINT message,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    WPARAM wParam,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    LPARAM lParam</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    HDC         hdc;  <span class=\"comment\">//设备环境句柄</span></span><br><span class=\"line\">    PAINTSTRUCT ps;  <span class=\"comment\">//存储绘图环境的相关信息</span></span><br><span class=\"line\">    TCHAR szText[<span class=\"number\">20</span>] = TEXT(<span class=\"string\">\"Hello\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (message)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> WM_PAINT:</span><br><span class=\"line\">            <span class=\"comment\">//开始绘图并返回环境句柄</span></span><br><span class=\"line\">            hdc = BeginPaint (hwnd, &amp;ps);</span><br><span class=\"line\">            <span class=\"comment\">//输出文字</span></span><br><span class=\"line\">            TextOut(hdc, <span class=\"number\">50</span>, <span class=\"number\">50</span>, szText, wcslen(szText));</span><br><span class=\"line\">            <span class=\"comment\">//结束绘图并释放环境句柄</span></span><br><span class=\"line\">            EndPaint (hwnd, &amp;ps) ;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> WM_DESTROY:</span><br><span class=\"line\">            PostQuitMessage(<span class=\"number\">0</span>) ;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> DefWindowProc(hwnd, message, wParam, lParam) ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","link":"","categories":[],"tags":[{"name":"Windows","slug":"Windows","permalink":"http://yoursite.com/tags/Windows/"}]},{"title":"POJ 2777 Count Color(线段树+二进制位运算)","date":"2019-07-19T11:38:54.000Z","path":"2019/07/19/POJ-2777-Count-Color-线段树-二进制位运算/","text":"DescriptionChosen Problem Solving and Program design as an optional course, you are required to solve all kinds of problems. Here, we get a new problem. There is a very long board with length L centimeter, L is a positive integer, so we can evenly divide the board into L segments, and they are labeled by 1, 2, … L from left to right, each is 1 centimeter long. Now we have to color the board - one segment with only one color. We can do following two operations on the board: “C A B C” Color the board from segment A to segment B with color C. “P A B” Output the number of different colors painted between segment A and segment B (including). In our daily life, we have very few words to describe a color (red, green, blue, yellow…), so you may assume that the total number of different colors T is very small. To make it simple, we express the names of colors as color 1, color 2, … color T. At the beginning, the board was painted in color 1. Now the rest of problem is left to your. InputFirst line of input contains L (1 &lt;= L &lt;= 100000), T (1 &lt;= T &lt;= 30) and O (1 &lt;= O &lt;= 100000). Here O denotes the number of operations. Following O lines, each contains “C A B C” or “P A B” (here A, B, C are integers, and A may be larger than B) as an operation defined previously. OutputOuput results of the output operation in order, each line contains a number. Sample Input2 2 4C 1 1 2P 1 2C 2 2 2P 1 2 Sample Output21 题意给一个固定长度为L的画板有两个操作：C A B C：区间A–B内涂上颜色C。P A B：查询区间AB内颜色种类数。 思路可以采用二进制的思想，第i种颜色，则标记二进制的i位为1，可以建立线段树，然后使用 | 运算传递二进制。 AC代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;cstring&gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;string&gt;#include &lt;algorithm&gt;#define FAST_IO std::ios::sync_with_stdio(false),std::cin.tie(0),std::cout.tie(0)#define pause system(\"pause\")using namespace std;typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;int const maxn = 100000 + 10;int a[maxn], color[maxn], ans;struct seg &#123; int l, r; int v, tag; void update(int x) &#123; v = x; tag = x; &#125;&#125;tree[maxn &lt;&lt; 2];inline int lc(int x) &#123;return x &lt;&lt; 1;&#125;inline int rc(int x) &#123;return x &lt;&lt; 1 | 1;&#125;void push_up(int p) &#123; tree[p].v = tree[lc(p)].v | tree[rc(p)].v;&#125;void push_down(int p) &#123; if (tree[p].tag) &#123; int v = tree[p].v; tree[lc(p)].update(v); tree[rc(p)].update(v); tree[p].tag = 0; &#125;&#125;void bulid(int p, int l, int r) &#123; tree[p].l = l, tree[p].r = r; tree[p].tag = tree[p].v = 0; if(l == r) &#123; tree[p].v = 1; tree[p].tag = 0; return; &#125; int mid = (l + r ) &gt;&gt; 1; bulid(lc(p), l, mid); bulid(rc(p), mid + 1, r); push_up(p);&#125;void update(int p, int l, int r, int x) &#123; if (l &lt;= tree[p].l &amp;&amp; r &gt;= tree[p].r) &#123; tree[p].update((1 &lt;&lt; (x - 1))); return; &#125; push_down(p); int mid = (tree[p].l + tree[p].r) &gt;&gt; 1; if (l &lt;= mid) update(lc(p), l, r, x); if (r &gt; mid) update(rc(p), l, r, x); push_up(p);&#125;ll query(int p, int l, int r) &#123; if(l &lt;= tree[p].l &amp;&amp; r &gt;= tree[p].r) &#123; return tree[p].v; &#125; push_down(p); int ans = 0; int mid = (tree[p].l + tree[p].r) &gt;&gt; 1; if (l &lt;= mid) ans = ans | query(lc(p),l , r); if (r &gt; mid) ans = ans | query(rc(p),l , r); return ans;&#125;int main(void) &#123; int n, m, t; scanf(\"%d %d %d\", &amp;n, &amp;t, &amp;m); bulid(1, 1, n); while (m--) &#123; char opt[5]; int x, y; scanf(\"%s %d %d\", opt, &amp;x, &amp;y); if (x &gt; y) swap(x, y); if(opt[0] == 'C') &#123; int z; scanf(\"%d\", &amp;z); update(1, x, y, z); &#125; else &#123; int ans = query(1, x, y); int num = 0; while (ans) &#123; if (ans &amp; 1) num++; ans &gt;&gt;= 1; &#125; printf(\"%d\\n\", num); &#125; &#125; // pause; return 0;&#125;","content":"<h1 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h1><p>Chosen Problem Solving and Program design as an optional course, you are required to solve all kinds of problems. Here, we get a new problem. </p>\n<p>There is a very long board with length L centimeter, L is a positive integer, so we can evenly divide the board into L segments, and they are labeled by 1, 2, … L from left to right, each is 1 centimeter long. Now we have to color the board - one segment with only one color. We can do following two operations on the board: </p>\n<blockquote>\n<ol>\n<li>“C A B C” Color the board from segment A to segment B with color C. </li>\n<li>“P A B” Output the number of different colors painted between segment A and segment B (including). </li>\n</ol>\n</blockquote>\n<p>In our daily life, we have very few words to describe a color (red, green, blue, yellow…), so you may assume that the total number of different colors T is very small. To make it simple, we express the names of colors as color 1, color 2, … color T. At the beginning, the board was painted in color 1. Now the rest of problem is left to your. </p>\n<a id=\"more\"></a>\n<h1 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input\"></a>Input</h1><p>First line of input contains L (1 &lt;= L &lt;= 100000), T (1 &lt;= T &lt;= 30) and O (1 &lt;= O &lt;= 100000). Here O denotes the number of operations. Following O lines, each contains “C A B C” or “P A B” (here A, B, C are integers, and A may be larger than B) as an operation defined previously.</p>\n<h1 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h1><p>Ouput results of the output operation in order, each line contains a number.</p>\n<h1 id=\"Sample-Input\"><a href=\"#Sample-Input\" class=\"headerlink\" title=\"Sample Input\"></a>Sample Input</h1><p>2 2 4<br>C 1 1 2<br>P 1 2<br>C 2 2 2<br>P 1 2</p>\n<h1 id=\"Sample-Output\"><a href=\"#Sample-Output\" class=\"headerlink\" title=\"Sample Output\"></a>Sample Output</h1><p>2<br>1</p>\n<h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>给一个固定长度为L的画板<br>有两个操作：<br>C A B C：区间A–B内涂上颜色C。<br>P A B：查询区间AB内颜色种类数。</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>可以采用二进制的思想，第i种颜色，则标记二进制的i位为1，可以建立线段树，然后使用 <code>|</code> 运算传递二进制。</p>\n<h2 id=\"AC代码\"><a href=\"#AC代码\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO std::ios::sync_with_stdio(false),std::cin.tie(0),std::cout.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pause system(<span class=\"meta-string\">\"pause\"</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> maxn = <span class=\"number\">100000</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[maxn], color[maxn], ans;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">seg</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> l, r;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> v, tag;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        v = x;</span><br><span class=\"line\">        tag = x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;tree[maxn &lt;&lt; <span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">lc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>  </span>&#123;<span class=\"keyword\">return</span> x &lt;&lt; <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">rc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>  </span>&#123;<span class=\"keyword\">return</span> x &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push_up</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span> </span>&#123;</span><br><span class=\"line\">    tree[p].v = tree[lc(p)].v | tree[rc(p)].v;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push_down</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tree[p].tag) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = tree[p].v;</span><br><span class=\"line\">        tree[lc(p)].update(v);</span><br><span class=\"line\">        tree[rc(p)].update(v);</span><br><span class=\"line\">        tree[p].tag = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bulid</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">    tree[p].l = l, tree[p].r = r;</span><br><span class=\"line\">    tree[p].tag = tree[p].v = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l == r) &#123;</span><br><span class=\"line\">        tree[p].v = <span class=\"number\">1</span>;</span><br><span class=\"line\">        tree[p].tag = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l + r ) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    bulid(lc(p), l, mid);</span><br><span class=\"line\">    bulid(rc(p), mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">    push_up(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &lt;= tree[p].l &amp;&amp; r &gt;= tree[p].r) &#123;</span><br><span class=\"line\">        tree[p].update((<span class=\"number\">1</span> &lt;&lt; (x - <span class=\"number\">1</span>)));</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    push_down(p);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (tree[p].l + tree[p].r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &lt;= mid)</span><br><span class=\"line\">        update(lc(p), l, r, x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r &gt; mid)</span><br><span class=\"line\">        update(rc(p), l, r, x);</span><br><span class=\"line\">    push_up(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &lt;= tree[p].l &amp;&amp; r &gt;= tree[p].r) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tree[p].v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    push_down(p);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (tree[p].l + tree[p].r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &lt;= mid)</span><br><span class=\"line\">        ans = ans | query(lc(p),l , r);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r &gt; mid)</span><br><span class=\"line\">        ans = ans | query(rc(p),l , r);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, m, t;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d %d\"</span>, &amp;n, &amp;t, &amp;m);</span><br><span class=\"line\">    bulid(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (m--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> opt[<span class=\"number\">5</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x, y;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s %d %d\"</span>, opt, &amp;x, &amp;y);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &gt; y)</span><br><span class=\"line\">            swap(x, y);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(opt[<span class=\"number\">0</span>] == <span class=\"string\">'C'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> z;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;z);</span><br><span class=\"line\">            update(<span class=\"number\">1</span>, x, y, z);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> ans = query(<span class=\"number\">1</span>, x, y);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (ans) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ans &amp; <span class=\"number\">1</span>) num++;</span><br><span class=\"line\">                ans &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, num);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// pause;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","link":"","categories":[{"name":"ACM","slug":"ACM","permalink":"http://yoursite.com/categories/ACM/"},{"name":"题解","slug":"ACM/题解","permalink":"http://yoursite.com/categories/ACM/题解/"},{"name":"POJ","slug":"ACM/题解/POJ","permalink":"http://yoursite.com/categories/ACM/题解/POJ/"}],"tags":[{"name":"线段树","slug":"线段树","permalink":"http://yoursite.com/tags/线段树/"},{"name":"位运算","slug":"位运算","permalink":"http://yoursite.com/tags/位运算/"}]},{"title":"Device Context","date":"2019-07-19T07:55:11.000Z","path":"2019/07/19/Device-Context/","text":"Device Context 和 BeginPaint EndPaint设备环境（DC）在Windows中，一切能在显示器上看到的都是图形，不但包括点、线、矩形、圆等，也包括文字、字体。对用户来说文字和图片是不同的，但它们在本质上都是图形，都需要在显示器上画出来。这也是Windows被称作图形操作系统的原因。 Windows不允许我们直接访问硬件，如键盘、显示器、打印机等，在与这些硬件通信前要获得设备环境（Device Context，简称 DC），进而间接的访问硬件。 设备环境有时也被称为设备上下文或设备描述表。 所谓设备环境，就是与当前硬件设备有关的各种信息，它是硬件设备的抽象。也就是说，设备环境就代表当前的硬件。 与文字输出、图形绘制有关的函数，在使用时大都需要传入一个参数，就是设备环境句柄。获取设备环境句柄有多种方式，常用的是 BeginPaint 函数。绘图完成后，还要释放句柄，使用 EndPaint 函数。 BeginPaint 和 EndPaint 函数当发生 WM_PAINT 事件时，应用程序开始绘图。绘图之前需要先调用 BeginPai绘图结束后，也需要调用 EndPaint 函数通知Windows，告诉它绘图结束了，你可以继续后面的工作了。nt 函数通知 Windows，告诉它当前程序需要使用显示器，你安排一下吧。BeginPaint 函数执行完毕就返回设备环境句柄，接下来就可以使用 GDI 函数绘图了。","content":"<h1 id=\"Device-Context-和-BeginPaint-EndPaint\"><a href=\"#Device-Context-和-BeginPaint-EndPaint\" class=\"headerlink\" title=\"Device Context 和 BeginPaint EndPaint\"></a>Device Context 和 BeginPaint EndPaint</h1><h1 id=\"设备环境（DC）\"><a href=\"#设备环境（DC）\" class=\"headerlink\" title=\"设备环境（DC）\"></a>设备环境（DC）</h1><p>在Windows中，一切能在显示器上看到的都是图形，不但包括点、线、矩形、圆等，也包括文字、字体。对用户来说文字和图片是不同的，但它们在本质上都是图形，都需要在显示器上画出来。这也是Windows被称作图形操作系统的原因。</p>\n<p>Windows不允许我们直接访问硬件，如键盘、显示器、打印机等，在与这些硬件通信前要获得<strong>设备环境（Device Context，简称 DC）</strong>，进而间接的访问硬件。</p>\n<blockquote>\n<p>设备环境有时也被称为设备上下文或设备描述表。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>所谓设备环境，就是与当前硬件设备有关的各种信息，它是硬件设备的抽象。也就是说，设备环境就代表当前的硬件。</p>\n<p>与文字输出、图形绘制有关的函数，在使用时大都需要传入一个参数，就是设备环境句柄。获取设备环境句柄有多种方式，常用的是 BeginPaint 函数。绘图完成后，还要释放句柄，使用 EndPaint 函数。</p>\n<h1 id=\"BeginPaint-和-EndPaint-函数\"><a href=\"#BeginPaint-和-EndPaint-函数\" class=\"headerlink\" title=\"BeginPaint 和 EndPaint 函数\"></a>BeginPaint 和 EndPaint 函数</h1><p>当发生 WM_PAINT 事件时，应用程序开始绘图。绘图之前需要先调用 BeginPai<br>绘图结束后，也需要调用 EndPaint 函数通知Windows，告诉它绘图结束了，你可以继续后面的工作了。nt 函数通知 Windows，告诉它当前程序需要使用显示器，你安排一下吧。BeginPaint 函数执行完毕就返回设备环境句柄，接下来就可以使用 GDI 函数绘图了。</p>\n","link":"","categories":[],"tags":[{"name":"Windows","slug":"Windows","permalink":"http://yoursite.com/tags/Windows/"}]}]