[{"title":"牛客算法周周练1","date":"2020-04-07T14:59:38.000Z","path":"2020/04/07/nowcoder0407/","text":"传送门 A - Maximize The Beautiful Valuetags: 贪心、前缀和、推公式分析题目说明了是不降的序列，所以低于答案的贡献$i *a[i]$必定是越大的数字在后面越好，我们可以考虑如果枚举$[k+1, n]$数字，让他们都往前移动$k$位，取最大的值。 本题难点在于如何移动进行计算，如果暴力计算的话复杂度为$O(n^2)$。我们设原答案为$ans_0$，选择的是第$x$个数字$k + 1\\leq x\\leq n$，观察数列变化，返现对于答案的贡献$\\sum_{i=1}^{i\\leq x-1} i *a[i]$是不变的，$\\sum_{i=x+1}^{i\\leq n} i *a[i]$的结果每一项都加上了$a[i]$。所以可以维护前缀和，取得这一部分的区间和。 时间复杂度$O(n)$ AC代码123456789101112131415161718192021222324252627282930313233343536#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;#define FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)int const maxn = 1e5 + 10;ll a[maxn];int n, k;ll pre[maxn];int main(void) &#123; FAST_IO; int t; cin &gt;&gt; t; while (t--) &#123; cin &gt;&gt; n &gt;&gt; k; ll first = 0; ll ans = 0; for (int i = 1; i &lt;= n; i++) &#123; cin &gt;&gt; a[i]; pre[i] = pre[i - 1] + a[i]; first += a[i] * i; &#125; for (int i = k + 1; i &lt;= n; i++) &#123; int x = i; int l = i - k; int r = i - 1; ll p = first - i * a[i] + a[i] * l; p += pre[r] - pre[l - 1]; ans = max(p, ans); &#125; cout &lt;&lt; ans &lt;&lt; endl; &#125; return 0;&#125; B- 身体训练tags: 数学分析因为概率相等，所以直接从第$i$个开始枚举，计算总和。然后$ans / n$ 时间复杂度$O(n^2)$ AC 代码123456789101112131415161718192021222324#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;#define FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)int const maxn = 1e5 + 10;int main(void) &#123; FAST_IO; int n; double v, u; cin &gt;&gt; n &gt;&gt; v &gt;&gt; u; vector&lt;double&gt; c(n), d(n); for (auto &amp;x : c) cin &gt;&gt; x; for (auto &amp;x : d) cin &gt;&gt; x; double ans = 0; for (int i = 0; i &lt; n; i++) &#123; for (int j = 0; j &lt; n; j++) &#123; ans += n * u / (c[i] - j * d[i] - v); &#125; &#125; cout &lt;&lt;fixed &lt;&lt; setprecision(3) &lt;&lt; ans / (n * 1.0) &lt;&lt; endl; return 0;&#125; C - Borrow Classroomtags：图论、LCA分析对于何老师拦截的方案，可以简化为两种： 何老师在节点1出等待 何老师中途和同学相遇 那么设$B-&gt;C-&gt;1$的最短距离为$disq$, $A-&gt;1$的距离为$dish$。 当$disq&gt;dish$，因小Q还未到达节点1，所以老师必定可以在A点等待 当$disq&lt;dish$，老师没有小Q走的快，必定拦截 当$disq=dish$： 如果$lca(C,A)=1$，那么C和A分别属于节点$1$的两个子树，不定不会相遇，无法拦截 如果$lca(C,A)!=1$，因为$disq=dish$，所以从必定会在LCA处相遇 本题需要快速查询，所有最短距离可以通过LCA进行。 复杂度$O(t * nlogn * q)$ PS：本题T组输入有坑，wa了10次，从$tarjan$到$倍增$，最后发现$dep$数组没有清空，真的坑QWQ。 AC代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;#define FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)int const maxn = 1e5 + 10;int vis[maxn];struct node &#123; int v, next;&#125;e[maxn &lt;&lt; 1];int head[maxn];int fa[maxn][25];int dep[maxn], cnt;int n;void add(int u, int v) &#123; e[cnt].v = v; e[cnt].next = head[u]; head[u] = cnt++;&#125;void init() &#123; memset(head, -1, sizeof(head)); memset(vis, 0, sizeof(vis)); memset(dep, 0, sizeof(dep)); memset(fa, 0, sizeof(fa)); cnt = 0;&#125;void dfs(int u, int v) &#123; if (vis[u]) return; vis[u] = 1; fa[u][0] = v; for (int i = head[u]; ~i; i = e[i].next) &#123; int x = e[i].v; if (v == x) continue; dep[x] = dep[u] + 1; dfs(x, u); &#125;&#125;void doubly() &#123; dfs(1, 1); for (int j = 1; j &lt;= 20; j++) &#123; for (int i = 1; i &lt;= n; i++) &#123; fa[i][j] = fa[fa[i][j - 1]][j - 1]; &#125; &#125;&#125;int lca(int u, int v) &#123; if (dep[u] &gt; dep[v]) &#123; swap(u, v); &#125; for (int i = 20; i &gt;= 0; i--) &#123; if ((dep[v] - (1 &lt;&lt; i)) &gt;= dep[u]) &#123; v = fa[v][i]; &#125; &#125; if (u == v) return u; for (int i = 20; i &gt;= 0; i--) &#123; if (fa[u][i] != fa[v][i]) &#123; u = fa[u][i]; v = fa[v][i]; &#125; &#125; return fa[v][0];&#125;int main(void) &#123; FAST_IO; int t; cin &gt;&gt; t; while (t--) &#123; init(); int q; cin &gt;&gt; n &gt;&gt; q; for (int i = 1; i &lt; n; i++) &#123; int u, v; cin &gt;&gt; u &gt;&gt; v; add(u, v); add(v, u); &#125; doubly(); while (q--) &#123; int a, b, c; cin &gt;&gt; a &gt;&gt; b &gt;&gt; c; // cout &lt;&lt; x &lt;&lt; endl; int disq = abs(dep[b] - dep[1]) + 2 * abs(dep[lca(b, c)] - dep[c]); int dish = abs(dep[a] - dep[1]); int x = lca(c, a); if (dish &gt; disq || (dish == disq &amp;&amp; x == 1)) &#123; cout &lt;&lt; \"NO\" &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; \"YES\" &lt;&lt; endl; &#125; &#125; &#125; return 0;&#125; D - 景区路线规划推迟是概率DP，等待明天大佬题解，先留个坑。。 E - 幸运数字Ⅱtags: 打表，二分查找分析对于满足条件的数字，可以由$x10+4$ 和 $x10+7$ 获得。需要求$\\sum_{i=l}^{i\\leq r}next[i]$，可以通过二分找next[i]的边界范围。再通过尺取的方式取$next[i]$个数。 参考代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;#define FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)int const maxn = 1e5 + 10;vector&lt;ll&gt; v = &#123;4, 7&#125;;void bfs() &#123; queue&lt;ll&gt; q; q.emplace(4); q.emplace(7); while (!q.empty()) &#123; if (v.back() &gt;= 1000000000) return; auto x = q.front(); q.pop(); q.emplace(x * 10 + 4); q.emplace(x * 10 + 7); v.emplace_back(x * 10 + 4); v.emplace_back(x * 10 + 7); &#125;&#125;int main() &#123; FAST_IO; bfs(); ll l, r; cin &gt;&gt; l &gt;&gt; r; ll ans = 0; int pos1 = lower_bound(v.begin(), v.end(), l) - v.begin(); int pos2 = lower_bound(v.begin(), v.end(), r) - v.begin(); if (pos1 == pos2) &#123; cout &lt;&lt; (r - l + 1) * v[pos1] &lt;&lt; endl; &#125; else &#123; for (int i = pos1; i &lt;= pos2; i++) &#123; if (v[i] &gt;= l) &#123; while (l != r &amp;&amp; l &lt;= v[i]) &#123; ans += v[i]; l++; &#125; if (l == r) &#123; ans += v[i]; break; &#125; &#125; &#125; cout &lt;&lt; ans &lt;&lt; endl; &#125; return 0;&#125;","content":"<p><a href=\"https://ac.nowcoder.com/acm/contest/5086\" target=\"_blank\" rel=\"noopener\">传送门</a></p>\n<h1 id=\"A-Maximize-The-Beautiful-Value\"><a href=\"#A-Maximize-The-Beautiful-Value\" class=\"headerlink\" title=\"A - Maximize The Beautiful Value\"></a>A - <a href=\"https://ac.nowcoder.com/acm/contest/5086/A\" target=\"_blank\" rel=\"noopener\">Maximize The Beautiful Value</a></h1><h2 id=\"tags-贪心、前缀和、推公式\"><a href=\"#tags-贪心、前缀和、推公式\" class=\"headerlink\" title=\"tags: 贪心、前缀和、推公式\"></a>tags: 贪心、前缀和、推公式</h2><h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>题目说明了是不降的序列，所以低于答案的贡献$i *a[i]$必定是越大的数字在后面越好，我们可以考虑如果枚举$[k+1, n]$数字，让他们都往前移动$k$位，取最大的值。</p>\n<p>本题难点在于如何移动进行计算，如果暴力计算的话复杂度为$O(n^2)$。我们设原答案为$ans_0$，选择的是第$x$个数字$k + 1\\leq x\\leq n$，观察数列变化，返现对于答案的贡献$\\sum_{i=1}^{i\\leq x-1} i *a[i]$是不变的，$\\sum_{i=x+1}^{i\\leq n} i *a[i]$的结果每一项都加上了$a[i]$。所以可以维护前缀和，取得这一部分的区间和。</p>\n<ul>\n<li>时间复杂度$O(n)$</li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"AC代码\"><a href=\"#AC代码\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> maxn = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\">ll a[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, k;</span><br><span class=\"line\">ll pre[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> t;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">        ll first = <span class=\"number\">0</span>;</span><br><span class=\"line\">        ll ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; a[i];</span><br><span class=\"line\">            pre[i] = pre[i - <span class=\"number\">1</span>] + a[i];</span><br><span class=\"line\">            first += a[i] * i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = k + <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x = i;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> l = i - k;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> r = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">            ll p = first - i * a[i] + a[i] * l;</span><br><span class=\"line\">            p += pre[r] - pre[l - <span class=\"number\">1</span>];</span><br><span class=\"line\">            ans = max(p, ans);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"B-身体训练\"><a href=\"#B-身体训练\" class=\"headerlink\" title=\"B- 身体训练\"></a>B- <a href=\"https://ac.nowcoder.com/acm/contest/5086/B\" target=\"_blank\" rel=\"noopener\">身体训练</a></h1><h2 id=\"tags-数学\"><a href=\"#tags-数学\" class=\"headerlink\" title=\"tags: 数学\"></a>tags: 数学</h2><h2 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>因为概率相等，所以直接从第$i$个开始枚举，计算总和。然后$ans / n$</p>\n<p>时间复杂度$O(n^2)$</p>\n<h2 id=\"AC-代码\"><a href=\"#AC-代码\" class=\"headerlink\" title=\"AC 代码\"></a>AC 代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> maxn = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> v, u;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; v &gt;&gt; u;</span><br><span class=\"line\">    vector&lt;double&gt; c(n), d(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;x : c) <span class=\"built_in\">cin</span> &gt;&gt; x;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;x : d) <span class=\"built_in\">cin</span> &gt;&gt; x;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">            ans += n * u / (c[i] - j * d[i] - v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt;fixed &lt;&lt; setprecision(<span class=\"number\">3</span>) &lt;&lt; ans / (n * <span class=\"number\">1.0</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"C-Borrow-Classroom\"><a href=\"#C-Borrow-Classroom\" class=\"headerlink\" title=\"C - Borrow Classroom\"></a>C - <a href=\"https://ac.nowcoder.com/acm/contest/5086/C\" target=\"_blank\" rel=\"noopener\">Borrow Classroom</a></h2><h2 id=\"tags：图论、LCA\"><a href=\"#tags：图论、LCA\" class=\"headerlink\" title=\"tags：图论、LCA\"></a>tags：图论、LCA</h2><h2 id=\"分析-2\"><a href=\"#分析-2\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>对于何老师拦截的方案，可以简化为两种：</p>\n<ul>\n<li>何老师在节点1出等待</li>\n<li>何老师中途和同学相遇</li>\n</ul>\n<p>那么设$B-&gt;C-&gt;1$的最短距离为$disq$, $A-&gt;1$的距离为$dish$。</p>\n<ul>\n<li>当$disq&gt;dish$，因小Q还未到达节点1，所以老师必定可以在A点等待</li>\n<li>当$disq&lt;dish$，老师没有小Q走的快，必定拦截</li>\n<li>当$disq=dish$：<ul>\n<li>如果$lca(C,A)=1$，那么C和A分别属于节点$1$的两个子树，不定不会相遇，无法拦截</li>\n<li>如果$lca(C,A)!=1$，因为$disq=dish$，所以从必定会在LCA处相遇</li>\n</ul>\n</li>\n</ul>\n<p>本题需要快速查询，所有最短距离可以通过LCA进行。</p>\n<p>复杂度$O(t * nlogn * q)$</p>\n<p>PS：本题T组输入有坑，wa了10次，从$tarjan$到$倍增$，最后发现$dep$数组没有清空，真的坑QWQ。</p>\n<h2 id=\"AC代码-1\"><a href=\"#AC代码-1\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> maxn = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> vis[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> v, next;</span><br><span class=\"line\">&#125;e[maxn &lt;&lt; <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> head[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> fa[maxn][<span class=\"number\">25</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dep[maxn], cnt;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    e[cnt].v = v;</span><br><span class=\"line\">    e[cnt].next = head[u];</span><br><span class=\"line\">    head[u] = cnt++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(head, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(head));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dep, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(dep));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(fa, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(fa));</span><br><span class=\"line\">    cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (vis[u]) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    vis[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    fa[u][<span class=\"number\">0</span>] = v;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = head[u]; ~i; i = e[i].next) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = e[i].v;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v == x) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        dep[x] = dep[u] + <span class=\"number\">1</span>;</span><br><span class=\"line\">        dfs(x, u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doubly</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    dfs(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= <span class=\"number\">20</span>; j++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            fa[i][j] = fa[fa[i][j - <span class=\"number\">1</span>]][j - <span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lca</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dep[u] &gt; dep[v]) &#123;</span><br><span class=\"line\">        swap(u, v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">20</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((dep[v] - (<span class=\"number\">1</span> &lt;&lt; i)) &gt;= dep[u]) &#123;</span><br><span class=\"line\">            v = fa[v][i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (u == v) <span class=\"keyword\">return</span> u;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">20</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fa[u][i] != fa[v][i]) &#123;</span><br><span class=\"line\">            u = fa[u][i];</span><br><span class=\"line\">            v = fa[v][i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fa[v][<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> t;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t--) &#123;</span><br><span class=\"line\">        init();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> q;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> u, v;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class=\"line\">            add(u, v);</span><br><span class=\"line\">            add(v, u);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        doubly();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (q--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> a, b, c;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class=\"line\">            <span class=\"comment\">// cout &lt;&lt; x &lt;&lt; endl;</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> disq = <span class=\"built_in\">abs</span>(dep[b] - dep[<span class=\"number\">1</span>]) + <span class=\"number\">2</span> * <span class=\"built_in\">abs</span>(dep[lca(b, c)] - dep[c]);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> dish = <span class=\"built_in\">abs</span>(dep[a] - dep[<span class=\"number\">1</span>]);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x = lca(c, a);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dish &gt; disq || (dish == disq &amp;&amp; x == <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"NO\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"YES\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"D-景区路线规划\"><a href=\"#D-景区路线规划\" class=\"headerlink\" title=\"D - 景区路线规划\"></a>D - <a href=\"https://ac.nowcoder.com/acm/contest/5086/D\" target=\"_blank\" rel=\"noopener\">景区路线规划</a></h1><p>推迟是概率DP，等待明天大佬题解，先留个坑。。</p>\n<h1 id=\"E-幸运数字Ⅱ\"><a href=\"#E-幸运数字Ⅱ\" class=\"headerlink\" title=\"E - 幸运数字Ⅱ\"></a>E - <a href=\"https://ac.nowcoder.com/acm/contest/5086/E\" target=\"_blank\" rel=\"noopener\">幸运数字Ⅱ</a></h1><h2 id=\"tags-打表，二分查找\"><a href=\"#tags-打表，二分查找\" class=\"headerlink\" title=\"tags: 打表，二分查找\"></a>tags: 打表，二分查找</h2><h2 id=\"分析-3\"><a href=\"#分析-3\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>对于满足条件的数字，可以由$x<em>10+4$ 和 $x</em>10+7$ 获得。需要求$\\sum_{i=l}^{i\\leq r}next[i]$，可以通过二分找next[i]的边界范围。再通过尺取的方式取$next[i]$个数。</p>\n<h2 id=\"参考代码\"><a href=\"#参考代码\" class=\"headerlink\" title=\"参考代码\"></a>参考代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> maxn = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;ll&gt; v = &#123;<span class=\"number\">4</span>, <span class=\"number\">7</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;ll&gt; q;</span><br><span class=\"line\">    q.emplace(<span class=\"number\">4</span>);</span><br><span class=\"line\">    q.emplace(<span class=\"number\">7</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v.back() &gt;= <span class=\"number\">1000000000</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> x = q.front();</span><br><span class=\"line\">        q.pop();</span><br><span class=\"line\">        q.emplace(x * <span class=\"number\">10</span> + <span class=\"number\">4</span>);</span><br><span class=\"line\">        q.emplace(x * <span class=\"number\">10</span> + <span class=\"number\">7</span>);</span><br><span class=\"line\">        v.emplace_back(x * <span class=\"number\">10</span> + <span class=\"number\">4</span>);</span><br><span class=\"line\">        v.emplace_back(x * <span class=\"number\">10</span> + <span class=\"number\">7</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">    bfs();</span><br><span class=\"line\">    ll l, r;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; l &gt;&gt; r;</span><br><span class=\"line\">    ll ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pos1 = lower_bound(v.begin(), v.end(), l) - v.begin();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pos2 = lower_bound(v.begin(), v.end(), r) - v.begin();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pos1 == pos2) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; (r - l + <span class=\"number\">1</span>) * v[pos1] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = pos1; i &lt;= pos2; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (v[i] &gt;= l) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (l != r &amp;&amp; l &lt;= v[i]) &#123;</span><br><span class=\"line\">                    ans += v[i];</span><br><span class=\"line\">                    l++;</span><br><span class=\"line\">                &#125; </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (l == r) &#123;</span><br><span class=\"line\">                    ans += v[i];</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","link":"","categories":[{"name":"题解","slug":"题解","permalink":"http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"},{"name":"ACM","slug":"题解/ACM","permalink":"http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/ACM/"}],"tags":[{"name":"打表","slug":"打表","permalink":"http://yoursite.com/tags/%E6%89%93%E8%A1%A8/"},{"name":"前缀和","slug":"前缀和","permalink":"http://yoursite.com/tags/%E5%89%8D%E7%BC%80%E5%92%8C/"},{"name":"LCA","slug":"LCA","permalink":"http://yoursite.com/tags/LCA/"}]},{"title":"CF上蓝总结和后续计划","date":"2020-04-01T03:00:02.000Z","path":"2020/04/01/summary-1/","text":"以上图文无关，如有大佬看到了本文，我们可以邮箱先交流下ming.yu.5483@gmail.com。QWQ 前言从大一开始接触codeforces到现在快一年半了，期间的学习过程曲折不断。见证了$Div2/3$的参加人数从一年前的6~7k到了现在的场场2w。也从半年前的灰色慢慢地升到了蓝色。虽然我还是菜的不行，但大佬们说的一点不得不认同的，CF这东西多打了，从长远来看就一定可以上分（关键还是不要自闭和掉分）。下面自言自语下这段时间的总结和下面的计划吧。 上图我的辣鸡分数曲线，大佬看了别喷QWQ 关于算题的看法刷算法题虽然确实很花时间和精力，但也有挺多的好处。我觉得主要是以下两个方便： 最大的好处就是大大增加了调试能力。 同时上一些书本上的知识，不再知识纸上谈兵的文字而已了。 比如计算机网络、操作系统这些比较偏理论的课上，书本的部分算法有了更多的理解。如：RIP算法、TCP的滑动窗口、银行算法等等，这些文字性描述，自己都可以再一定的场合去模拟下简单的实现，并且能够分析出优缺点，也大概可以猜测到当时算法研究的场景。 回忆下Codeforces说起来我认真打CF场次并不多见，大一也不是常打。大概是半年前网络赛的时候，跟着实验室的学长们一起写题算是正式开始认真了。这段时间也吃过不少学长学弟们的烂分，那个时候一个实验室一堆打CF的还是挺欢乐的。 在网络赛之后，因为课程多和一些自己的惰性问题，也有很多场次拉下来，没有及时的去补，思维上也有部分局限了。反而在这一段时间特殊时间内，放养了几周的概率论（好吧，其实是自己太懒了），有空的时候自己写写专题，晚上被队友拉着打打AT、CF、nowcoder，见过了更多比较脑洞的题目，进步的更多了。之前有几场有机会可以蓝的，却都被$FST$了，只能怪自己太菜了。 总和一下一年来CF的变化，总体来说上分变的容易了。大概从D题开始，和以前的难度相差了小半个层次，相对来说对于我们这种中等菜鸟来说更加友好了。当然，也有时候是如下的阶梯难度 关于题型的话，感觉CF也挺思维的，虽然不能和atcoder那种想到了就是会的水题相比。我感觉上$[1600, 1700]$的差距一般可以靠思维速度和手速去弥补，实际有可能差的不大。一般Div2的前3题基本以数学+思维+贪心，加上各种基础算法为主的。稍难的算法需要在DEF中出现。所以如果是以竞赛为主的，CF要多打，但不能只打CF，其它OJ很多算法专题也需要去刷。 后面的日程计划关于后续的计划，马上要大三了，我要学习的东西也不只是局限在算法上，也需要接触一些其它的东西。 现在已经在日程上的有以下一些，这些想法可以请各位列表朋友圈监督下，我惰性有点大 QWQ： 先蹭着清明，把欠下的几周概率论和两三节的计组补一下。要不然就挂科了 QWQ 日常的刷题，学习，为了不知道什么时候的 蓝桥杯 和 省赛 做准备 尝试学习、修改用Django重构下nbutacm，如果弄的好的话暑期集训就可以用上了。 课程外的知识暂时安排上docker和整理C++ primer的思维导图 一些有想法，没有安排上去（有可能会咕咕咕的）： 用CF的API完善CF机器人的查询功能，学期结束可以考虑用WEB写一套网站。虽然感觉github上源码应该挺多的，hhhh。 加强一下windows programming 整整$VIM$? 学学nodejs或者Kotlin","content":"<img src=\"https://s1.ax1x.com/2020/04/01/G10jv6.md.jpg\" alt=\"G10jv6.md.jpg\" style=\"zoom: 80%;\" />\n\n<blockquote>\n<p>以上图文无关，如有大佬看到了本文，我们可以邮箱先交流下<code>ming.yu.5483@gmail.com</code>。QWQ</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>从大一开始接触<code>codeforces</code>到现在快一年半了，期间的学习过程曲折不断。见证了$Div2/3$的参加人数从一年前的<code>6~7k</code>到了现在的场场<code>2w</code>。也从半年前的灰色慢慢地升到了蓝色。虽然我还是菜的不行，但大佬们说的一点不得不认同的，CF这东西多打了，从长远来看就一定可以上分（关键还是不要自闭和掉分）。下面自言自语下这段时间的总结和下面的计划吧。</p>\n<a id=\"more\"></a>\n\n<img src=\"https://s1.ax1x.com/2020/04/01/G1UKL4.jpg\" alt=\"cf_id:yuming_mov\" style=\"zoom: 67%;\" />\n\n<blockquote>\n<p>上图我的辣鸡分数曲线，大佬看了别喷QWQ</p>\n</blockquote>\n<h1 id=\"关于算题的看法\"><a href=\"#关于算题的看法\" class=\"headerlink\" title=\"关于算题的看法\"></a>关于算题的看法</h1><p>刷算法题虽然确实很花时间和精力，但也有挺多的好处。我觉得主要是以下两个方便：</p>\n<ul>\n<li><p>最大的好处就是大大增加了调试能力。</p>\n</li>\n<li><p>同时上一些书本上的知识，不再知识纸上谈兵的文字而已了。</p>\n<p>  比如计算机网络、操作系统这些比较偏理论的课上，书本的部分算法有了更多的理解。如：RIP算法、TCP的滑动窗口、银行算法等等，这些文字性描述，自己都可以再一定的场合去模拟下简单的实现，并且能够分析出优缺点，也大概可以猜测到当时算法研究的场景。</p>\n</li>\n</ul>\n<h1 id=\"回忆下Codeforces\"><a href=\"#回忆下Codeforces\" class=\"headerlink\" title=\"回忆下Codeforces\"></a>回忆下Codeforces</h1><p>说起来我认真打CF场次并不多见，大一也不是常打。大概是半年前网络赛的时候，跟着实验室的学长们一起写题算是正式开始认真了。这段时间也吃过不少学长学弟们的烂分，那个时候一个实验室一堆打CF的还是挺欢乐的。</p>\n<p>在网络赛之后，因为课程多和一些自己的惰性问题，也有很多场次拉下来，没有及时的去补，思维上也有部分局限了。反而在这一段时间特殊时间内，放养了几周的概率论（好吧，其实是自己太懒了），有空的时候自己写写专题，晚上被队友拉着打打<code>AT、CF、nowcoder</code>，见过了更多比较脑洞的题目，进步的更多了。之前有几场有机会可以蓝的，却都被$FST$了，只能怪自己太菜了。</p>\n<p>总和一下一年来CF的变化，总体来说上分变的容易了。大概从D题开始，和以前的难度相差了小半个层次，相对来说对于我们这种中等菜鸟来说更加友好了。当然，也有时候是如下的阶梯难度<img src=\"https://s1.ax1x.com/2020/04/01/G1yuyq.png\" alt=\"G1yuyq.png\" style=\"zoom:35%;\" /></p>\n<p>关于题型的话，感觉CF也挺思维的，虽然不能和<code>atcoder</code>那种想到了就是会的水题相比。我感觉上$[1600, 1700]$的差距一般可以靠思维速度和手速去弥补，实际有可能差的不大。一般<code>Div2</code>的前3题基本以数学+思维+贪心，加上各种基础算法为主的。稍难的算法需要在DEF中出现。所以如果是以竞赛为主的，CF要多打，但不能只打CF，其它<code>OJ</code>很多算法专题也需要去刷。</p>\n<h1 id=\"后面的日程计划\"><a href=\"#后面的日程计划\" class=\"headerlink\" title=\"后面的日程计划\"></a>后面的日程计划</h1><p>关于后续的计划，马上要大三了，我要学习的东西也不只是局限在算法上，也需要接触一些其它的东西。</p>\n<p>现在已经在日程上的有以下一些，这些想法可以请各位列表朋友圈监督下，我惰性有点大 QWQ：</p>\n<ul>\n<li>先蹭着清明，把欠下的几周概率论和两三节的计组补一下。要不然就挂科了 QWQ</li>\n<li>日常的刷题，学习，为了不知道什么时候的 <strong>蓝桥杯</strong> 和 <strong>省赛</strong> 做准备</li>\n<li>尝试学习、修改用<code>Django</code>重构下<code>nbutacm</code>，如果弄的好的话暑期集训就可以用上了。</li>\n<li>课程外的知识暂时安排上<code>docker</code>和整理<code>C++ primer</code>的思维导图</li>\n</ul>\n<p>一些有想法，没有安排上去（有可能会咕咕咕的）：</p>\n<ul>\n<li>用CF的API完善CF机器人的查询功能，学期结束可以考虑用<code>WEB</code>写一套网站。虽然感觉<code>github</code>上源码应该挺多的，hhhh。</li>\n<li>加强一下<code>windows programming</code></li>\n<li>整整$VIM$?</li>\n<li>学学<code>nodejs</code>或者<code>Kotlin</code></li>\n</ul>\n","link":"","categories":[{"name":"学习","slug":"学习","permalink":"http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"},{"name":"生活","slug":"学习/生活","permalink":"http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/%E7%94%9F%E6%B4%BB/"},{"name":"规划","slug":"学习/生活/规划","permalink":"http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/%E7%94%9F%E6%B4%BB/%E8%A7%84%E5%88%92/"}],"tags":[{"name":"总结","slug":"总结","permalink":"http://yoursite.com/tags/%E6%80%BB%E7%BB%93/"}]},{"title":"Div2 2019下半学期周赛(四) 题解","date":"2020-03-22T13:27:52.000Z","path":"2020/03/22/[题解]Div2 2019下半学期周赛(四)/","text":"Div2 2019下半学期周赛(四) 题解 难度分布 123简单：AGB中等：CF难：ED 总结 1234567A：签到B：贪心 前缀和C：二分D：dp 前缀和E：数学暴力F：因子分解G：签到 A-我是最简单的QwQ-CF931A签到题。由于 m 和 n都&lt;=1e8。 若当$2^n &gt; 1e8$的时候，答案就是m，否则计算$m%2^n$。 通过对二进制的了解。当$n&gt;30$的时候$2^n$必定大于1e8。 使用位运算可以加快并减少代码 1printf(\"%d\\n\", n &gt;= 30 ? m : m % (1 &lt;&lt; n)); 时间复杂度：$O(1)$ PS：万万想不到cmath的pow居然可行。估计这场codeforces​的出题人也没想到。虽然可以pow过但大家还是少用的好（毕竟有玄学成分）。 B-小明的期末考试-CF1322A用前面学习栈的时候的括号匹配的思想。 首先如果左括号和右括号不相等，那么肯定没法完成目标。 如果相等，设立一个游标p，初始化为0，如果遇到左括号就p++，遇到右括号p--。 以p变为0的时候为分割线分成若干个字串。 如果某个字串是p正的变为0的，那么就是正常的括号匹配，比如 “(()())” 如果某个字串p负的变为0的，那么就要对这个字串进行重新排序，比如“))((”需要变成”(())”，此操作的代价是花费字符串长度所需的时间。 时间复杂度：$O(n)$ C-corn的增肥计划-POJ3273题意解析：按照题意把序列$v$分成m段，并且使得$sum(seg[i]_{1&lt;=i&lt;=m})$最小。即最小化最大值。 我们可以枚举答案$ans$然后通过$O(n)$复杂度模拟分段的过程，逼近ans。如果最后的段数$seg \\leq m$，则表示$ans$可以继续缩小找到更小的答案，如果$seg&gt;m$，则表示$ans$的值需要增大。 暴力从小开始枚举$ans$在1s的时间内无法完成。所以我们采用二分ans的方式，其中$check$函数复杂度$O(n)$。 二分上下界分别为：$max_{1 \\leq i \\leq n}(v[i])$ 和 $sum_{1 \\leq i \\leq n}(v[i])$ 所以总的时间复杂度：$O(n*log_2^{sum_{1 \\leq i \\leq n}(v[i])})$ D-兔子奇特的吃草技巧-CF474D有两种吃草技巧，吃一根，吃k根 看到这里我们应该能得到一个转移公式 $i&lt;k$时 $dp[i]=dp[i-1]$ $i&gt;=k$时 $dp[i]=dp[i-1]+dp[i-k]$ 这样我们就可以先预处理出$i$根草时的不同吃法有$dp[i]$种 再观察数据，询问次数有1e5次，如果每次$[l,r]$的加过去无疑会$TLE$，最差$o(1e5^2)$的复杂度 所以要再前缀和预处理一下（这里前缀和取模有一点细节操作，因为都取模了1e9+7所以可能后面的数据会比前面的小，所以最后应该再加上一个mod再取余） 所以要再前缀和预处理一下 $O(1)$查询。 E-奇怪的知识增加了-CF550C首先看到数据范围，大家应该都用的字符串吧，长度100的字符串。 然后我们再看张图，学一些奇怪的知识（结论）。 看到这张图，大家应该就知道怎么做了，只要for三层遍历其中是否有 3位 或 2位 或 1位 能够整除8, 能整出就yes输出并退出，三层循环外面在写个no就好了。 本题主要是数学结论和暴力。 时间复杂度：$O(len(s)^3)$ F-小公举的自信日常-CF150A这题主要是运用 算数基本定理 ： 任何一个大于1的自然数 N,如果N不为质数，那么N可以唯一分解成有限个质数的乘积。知道这个定理后，我们令输入的数可以被拆分为X个质数相乘。 当X大于等于3时 ： 先手胜，取出的数为X个中任取两个因子相乘即可； 当X等于2时 ： 后手胜； 当X等于1时 ： 先手胜，因为不能取出所以输出0； sqrt(n)的时间复杂度，分解因子即可。 时间复杂度：$O(sqrt(n))$ G-无聊的小公举-CF1325B签到题。 这题的序列最好情况就是序列本身就是递增序列，就不用拼接，输出序列长度即可。如： 1 2 3 4 5 6 7 8 9 答案就是9； 最坏的情况就是序列本身是递减序列，这样为了把每一个数都用上我们就需要拼接n（n为原序列的长度）个序列。如： 4 3 2 1就需要拼接成 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 加粗字体为最长递增序列。 所以这题就是求出原序列中不同的数字有几个。 利用set自动去重的特性，保存一下数字，输出set中个数即可。 时间复杂度：$O(nlogn)$","content":"<h1 id=\"Div2-2019下半学期周赛-四-题解\"><a href=\"#Div2-2019下半学期周赛-四-题解\" class=\"headerlink\" title=\"Div2 2019下半学期周赛(四) 题解\"></a><center>Div2 2019下半学期周赛(四) 题解</center></h1><ul>\n<li><p>难度分布</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">简单：AGB</span><br><span class=\"line\">中等：CF</span><br><span class=\"line\">难：ED</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>总结</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A：签到</span><br><span class=\"line\">B：贪心 前缀和</span><br><span class=\"line\">C：二分</span><br><span class=\"line\">D：dp 前缀和</span><br><span class=\"line\">E：数学暴力</span><br><span class=\"line\">F：因子分解</span><br><span class=\"line\">G：签到</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"A-我是最简单的QwQ-CF931A\"><a href=\"#A-我是最简单的QwQ-CF931A\" class=\"headerlink\" title=\"A-我是最简单的QwQ-CF931A\"></a>A-我是最简单的QwQ-CF931A</h2><p>签到题。由于 m 和 n都&lt;=1e8。</p>\n<p>若当$2^n &gt; 1e8$的时候，答案就是m，否则计算$m%2^n$。</p>\n<p>通过对二进制的了解。当$n&gt;30$的时候$2^n$必定大于1e8。</p>\n<ul>\n<li>使用位运算可以加快并减少代码</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, n &gt;= <span class=\"number\">30</span> ? m : m % (<span class=\"number\">1</span> &lt;&lt; n));</span><br></pre></td></tr></table></figure>\n\n<p>时间复杂度：$O(1)$</p>\n<ul>\n<li>PS：万万想不到cmath的<code>pow</code>居然可行。估计这场<code>codeforces​</code>的出题人也没想到。虽然可以pow过但大家还是少用的好（毕竟有玄学成分）。</li>\n</ul>\n<h2 id=\"B-小明的期末考试-CF1322A\"><a href=\"#B-小明的期末考试-CF1322A\" class=\"headerlink\" title=\"B-小明的期末考试-CF1322A\"></a>B-小明的期末考试-CF1322A</h2><p>用前面学习栈的时候的括号匹配的思想。</p>\n<p>首先如果左括号和右括号不相等，那么肯定没法完成目标。</p>\n<p>如果相等，设立一个游标<code>p</code>，初始化为0，如果遇到左括号就<code>p++</code>，遇到右括号<code>p--</code>。</p>\n<ul>\n<li><p>以p变为0的时候为分割线分成若干个字串。</p>\n</li>\n<li><p>如果某个字串是<code>p</code>正的变为<code>0</code>的，那么就是正常的括号匹配，比如 <code>“(()())”</code></p>\n</li>\n<li><p>如果某个字串<code>p</code>负的变为<code>0</code>的，那么就要对这个字串进行重新排序，比如<code>“))((</code>”需要变成<code>”(())”</code>，此操作的代价是花费字符串长度所需的时间。</p>\n</li>\n</ul>\n<p>时间复杂度：$O(n)$</p>\n<h2 id=\"C-corn的增肥计划-POJ3273\"><a href=\"#C-corn的增肥计划-POJ3273\" class=\"headerlink\" title=\"C-corn的增肥计划-POJ3273\"></a>C-corn的增肥计划-POJ3273</h2><p>题意解析：按照题意把序列$v$分成m段，并且使得$sum(seg[i]_{1&lt;=i&lt;=m})$最小。即最小化最大值。</p>\n<p>我们可以枚举答案$ans$然后通过$O(n)$复杂度模拟分段的过程，逼近ans。如果最后的段数$seg \\leq m$，则表示$ans$可以继续缩小找到更小的答案，如果$seg&gt;m$，则表示$ans$的值需要增大。</p>\n<p>暴力从小开始枚举$ans$在1s的时间内无法完成。所以我们采用二分ans的方式，其中$check$函数复杂度$O(n)$。</p>\n<p>二分上下界分别为：$max_{1 \\leq i \\leq n}(v[i])$ 和 $sum_{1 \\leq i \\leq n}(v[i])$</p>\n<p>所以总的时间复杂度：$O(n*log_2^{sum_{1 \\leq i \\leq n}(v[i])})$</p>\n<h2 id=\"D-兔子奇特的吃草技巧-CF474D\"><a href=\"#D-兔子奇特的吃草技巧-CF474D\" class=\"headerlink\" title=\"D-兔子奇特的吃草技巧-CF474D\"></a>D-兔子奇特的吃草技巧-CF474D</h2><p>有两种吃草技巧，<code>吃一根，吃k根</code></p>\n<p>看到这里我们应该能得到一个转移公式</p>\n<ul>\n<li><p>$i&lt;k$时 $dp[i]=dp[i-1]$     </p>\n</li>\n<li><p>$i&gt;=k$时  $dp[i]=dp[i-1]+dp[i-k]$</p>\n</li>\n</ul>\n<p>这样我们就可以先预处理出$i$根草时的不同吃法有$dp[i]$种</p>\n<p>再观察数据，询问次数有1e5次，如果每次$[l,r]$的加过去无疑会$TLE$，最差$o(1e5^2)$的复杂度   所以要再前缀和预处理一下（这里前缀和取模有一点细节操作，因为都取模了<code>1e9+7</code>所以可能后面的数据会比前面的小，所以最后应该再加上一个mod再取余）</p>\n<p>所以要再前缀和预处理一下 $O(1)$查询。</p>\n<h2 id=\"E-奇怪的知识增加了-CF550C\"><a href=\"#E-奇怪的知识增加了-CF550C\" class=\"headerlink\" title=\"E-奇怪的知识增加了-CF550C\"></a>E-奇怪的知识增加了-CF550C</h2><p>首先看到数据范围，大家应该都用的字符串吧，长度100的字符串。</p>\n<p>然后我们再看张图，学一些奇怪的知识（结论）。</p>\n<img src=\"1584774468555.png\" alt=\"数学结论\" style=\"zoom: 70%;\" />\n\n<p>看到这张图，大家应该就知道怎么做了，只要for三层遍历其中是否有 3位 或 2位 或 1位 能够整除8, 能整出就yes输出并退出，三层循环外面在写个no就好了。</p>\n<p>本题主要是数学结论和暴力。</p>\n<p>时间复杂度：$O(len(s)^3)$</p>\n<h2 id=\"F-小公举的自信日常-CF150A\"><a href=\"#F-小公举的自信日常-CF150A\" class=\"headerlink\" title=\"F-小公举的自信日常-CF150A\"></a>F-小公举的自信日常-CF150A</h2><p>这题主要是运用 算数基本定理 ： 任何一个大于1的自然数 N,如果N不为质数，那么N可以唯一分解成有限个质数的乘积。知道这个定理后，我们令输入的数可以被拆分为X个质数相乘。</p>\n<ul>\n<li><p>当X大于等于3时 ： 先手胜，取出的数为X个中任取两个因子相乘即可；</p>\n</li>\n<li><p>当X等于2时     ： 后手胜；</p>\n</li>\n<li><p>当X等于1时     ： 先手胜，因为不能取出所以输出0；</p>\n</li>\n</ul>\n<p>sqrt(n)的时间复杂度，分解因子即可。</p>\n<p>时间复杂度：$O(sqrt(n))$</p>\n<h2 id=\"G-无聊的小公举-CF1325B\"><a href=\"#G-无聊的小公举-CF1325B\" class=\"headerlink\" title=\"G-无聊的小公举-CF1325B\"></a>G-无聊的小公举-CF1325B</h2><p>签到题。</p>\n<p>这题的序列最好情况就是序列本身就是递增序列，就不用拼接，输出序列长度即可。如：</p>\n<p>1 2 3 4 5 6 7 8 9 答案就是9；</p>\n<p>最坏的情况就是序列本身是递减序列，这样为了把每一个数都用上我们就需要拼接n（n为原序列的长度）个序列。如：</p>\n<p><code>4 3 2 1</code>就需要拼接成 4 3 2 <strong>1</strong> 4 3 <strong>2</strong> 1 4 <strong>3</strong> 2 1 <strong>4</strong> 3 2 1 加粗字体为最长递增序列。</p>\n<p>所以这题就是求出原序列中不同的数字有几个。</p>\n<p>利用<code>set</code>自动去重的特性，保存一下数字，输出set中个数即可。</p>\n<p>时间复杂度：$O(nlogn)$</p>\n","link":"","categories":[{"name":"ACM","slug":"ACM","permalink":"http://yoursite.com/categories/ACM/"},{"name":"题解","slug":"ACM/题解","permalink":"http://yoursite.com/categories/ACM/%E9%A2%98%E8%A7%A3/"},{"name":"实验室","slug":"ACM/题解/实验室","permalink":"http://yoursite.com/categories/ACM/%E9%A2%98%E8%A7%A3/%E5%AE%9E%E9%AA%8C%E5%AE%A4/"}],"tags":[{"name":"二分","slug":"二分","permalink":"http://yoursite.com/tags/%E4%BA%8C%E5%88%86/"},{"name":"思维","slug":"思维","permalink":"http://yoursite.com/tags/%E6%80%9D%E7%BB%B4/"},{"name":"DP","slug":"DP","permalink":"http://yoursite.com/tags/DP/"}]},{"title":"寒假练习（五） 最短路 线段树 差分约束","date":"2020-01-21T03:43:22.000Z","path":"2020/01/21/200121/","text":"","content":"","link":"","categories":[],"tags":[]},{"title":"寒假训练（三、四）最短路&&搜索&&状压","date":"2020-01-16T15:20:25.000Z","path":"2020/01/16/200116/","text":"POJ - 1860 最短路 判正环题意一开始，在$S$点有$V$个金币，而点$u → v$的过程会产生$V = (V - c_{uv}) * r_{uv}$的变化，问是否有一条路线可以使得最终的$V_{end} &gt; V$。 分析要是最找的$V$增加，有两种可能性： 原本路径中就纯在这样的边权 有正环的存在，因为$uv$而双向的通路，而若纯在一个正环，在环中走一些，不断的松弛操作后，最终会变成一个无穷大的数字，这样无论环中是否存在点$S$都可以通过回路达到$S$ 所以本题能够利用$bellman-Ford$的思想去解题。 因此初始化$dis(S)=V$而源点到其他点的距离（权值）初始化为无穷小（0），当$S$到其他某点的距离能不断变大时，说明存在最大路径；如果可以一直变大（也就是松弛次数超过$N-1$次），说明存在正环。 本题因为数据范围不大，使用$Bellman-Ford或SPFA$都可以。我此题采用的是$SPFA$。复杂度$O(C*nlogn)$，SPFA的玄学常数，不过本题数据小无所谓。 AC代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113//#include &lt;bits/stdc++.h&gt;#include &lt;iostream&gt;#include &lt;iomanip&gt;#include &lt;bitset&gt;#include &lt;string&gt;#include &lt;set&gt;#include &lt;stack&gt;#include &lt;sstream&gt;#include &lt;list&gt;//#include &lt;array&gt;#include &lt;vector&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;memory&gt;#include &lt;iterator&gt;#include &lt;climits&gt;#include &lt;cassert&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;using namespace std;#define FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)#define all(x) (x).begin(), (x).end()typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;typedef pair&lt;int, int&gt; pdi;typedef pair&lt;ll, int&gt; pli;int const maxn = 1e4 + 10;const int INF = 0x3f3f3f3f;const ll INFL = 0x3f3f3f3f3f3f3f3f;inline int lc(int x) &#123;return x &lt;&lt; 1;&#125;inline int rc(int x) &#123;return x &lt;&lt; 1 | 1;&#125;int vis[maxn];int head[maxn], cnt, ans[maxn];double dis[maxn];int n, m, S;double V;struct node &#123; int v, next; double r, c;&#125;e[maxn &lt;&lt; 1];void init() &#123; memset(head, -1, sizeof(head)); cnt = 0;&#125;void add(int u, int v, double r, double c) &#123; e[cnt].v = v; e[cnt].r = r, e[cnt].c = c; e[cnt].next = head[u]; head[u] = cnt++;&#125;bool SPFA(int s) &#123; memset(vis, 0, sizeof(vis)); memset(ans, 0, sizeof(ans)); memset(dis, 0, sizeof(dis)); queue&lt;int&gt; q; q.push(s); dis[s] = V; vis[s] = 1; ans[s] ++; while (!q.empty()) &#123; int u = q.front(); vis[u] = 0; q.pop(); for (int i = head[u]; ~i; i = e[i].next) &#123; int v = e[i].v; double r = e[i].r; double c = e[i].c; double w = (dis[u] - c) * r; if (dis[v] &lt; w) &#123; dis[v] = w; if (!vis[v]) &#123; vis[v] = 1; q.push(v); if (++ans[v] &gt;= n) return true; &#125; &#125; &#125; &#125; if (dis[s] &gt; V) return true; return false;&#125;int main(void) &#123; FAST_IO; init(); cin &gt;&gt; n &gt;&gt; m &gt;&gt; S &gt;&gt; V; for (int i = 0; i &lt; m; i++) &#123; int u, v; double rab, cab, rba, cba; cin &gt;&gt; u &gt;&gt; v &gt;&gt; rab &gt;&gt; cab &gt;&gt; rba &gt;&gt; cba; add(u, v, rab, cab); add(v, u, rba, cba); &#125; if (SPFA(S)) &#123; cout &lt;&lt; \"YES\" &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; \"NO\" &lt;&lt; endl; &#125; return 0;&#125; POJ - 1511 双向建图题意给定一张单向通路图（同时只能单向行驶），然后$n-1$个人从$1$号点出发，到剩余$n-1$个宣传点，然后再回到$1$号点汇报结果，求所有人往返路径和的最小值，保证有解。 分析本题的唯一难点在于$u到v和v到u$的最短路可能不同。所以，需要一次正向存边,一次反向存边，相当于从源点到其他店和从其他到源点，跑两次最短路。 值得一题的是，本想想偷懒，用$vector$来存图，但$TLE$到自闭。。必须使用前向星。愿意应该是本题的$N、M$数据都是超大，vector的清空，复杂度需要$O(n)$，而前向星清空的复杂度只需要$O(1)$。 AC代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110//#include &lt;bits/stdc++.h&gt;#include &lt;iostream&gt;#include &lt;iomanip&gt;#include &lt;bitset&gt;#include &lt;string&gt;#include &lt;set&gt;#include &lt;stack&gt;#include &lt;sstream&gt;#include &lt;list&gt;//#include &lt;array&gt;#include &lt;vector&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;memory&gt;#include &lt;iterator&gt;#include &lt;climits&gt;#include &lt;cassert&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;using namespace std;#define FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)#define all(x) (x).begin(), (x).end()typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;typedef pair&lt;int, int&gt; pdi;typedef pair&lt;ll, int&gt; pli;int const maxn = 1e6 + 10;const int INF = 0x3f3f3f3f;const ll INFL = 0x3f3f3f3f3f3f3f3f;inline int lc(int x) &#123;return x &lt;&lt; 1;&#125;inline int rc(int x) &#123;return x &lt;&lt; 1 | 1;&#125;ll dis[2][maxn];struct node &#123; int v, w, next;&#125;e[2][maxn];int cnt1, cnt2, head[2][maxn];int vis[maxn];void init(int n) &#123; memset(head, -1, sizeof(head)); memset(dis, 0x3f, sizeof(dis)); cnt1 = 0; cnt2 = 0;&#125;void add(int id, int u, int v, int w, int &amp;cnt) &#123; e[id][cnt].v = v; e[id][cnt].w = w; e[id][cnt].next = head[id][u]; head[id][u] = cnt++;&#125;void dijkstra(int id) &#123; memset(vis, 0, sizeof(vis)); priority_queue&lt;pair&lt;ll, int&gt; &gt;q; q.push(make_pair(0, 1)); dis[id][1] = 0; while (!q.empty()) &#123; int u = q.top().second; q.pop(); if (vis[u]) continue; vis[u] = 1; for (int i = head[id][u]; ~i; i = e[id][i].next) &#123; int v = e[id][i].v; ll w = e[id][i].w; if (dis[id][v] &gt; dis[id][u] + w) &#123; dis[id][v] = dis[id][u] + w; q.push(make_pair(-dis[id][v], v)); &#125; &#125; &#125;&#125;int main(void) &#123; FAST_IO; int t; // cin &gt;&gt; t; scanf(\"%d\", &amp;t); while (t--) &#123; int n, m; // cin &gt;&gt; n &gt;&gt; m; scanf(\"%d %d\", &amp;n, &amp;m); init(n); for (int i = 0; i &lt; m; i++) &#123; int u, v, w; // cin &gt;&gt; u &gt;&gt; v &gt;&gt; w; scanf(\"%d %d %d\", &amp;u, &amp;v, &amp;w); add(0, u, v, w, cnt1); add(1, v, u, w, cnt2); &#125; dijkstra(0); dijkstra(1); ll ans = 0; for (int i = 1; i &lt;= n; i++) &#123; // cout &lt;&lt; dis[0][i] &lt;&lt; \" \" &lt;&lt; dis[1][i] &lt;&lt; endl; ans += dis[1][i] + dis[0][i]; &#125; // cout &lt;&lt; ans &lt;&lt; endl; printf(\"%lld\\n\", ans); &#125; return 0;&#125; POJ - 3087 暴力模拟题意现有字符串s1、s2、s12，其中s1、s2的长度为len，s12的长度为2*len。是否可以通过一些操作使s1和s2转换合并成s12。无论怎么变换都不会得到s12，那么输出 -1。变换的操作规则如下： 假设$s1=12345,s2=67890$ 变换后的序列$ s=6172839405$ 如果s和s12完全相同，那么输出变换次数。如果不完全相等，s的前半部分作为s1，后半部分作为s2，重复上述过程。 分析按照题意，暴力模拟字符即可。。这种水题居然会在搜索里。 AC代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869//#include &lt;bits/stdc++.h&gt;#include &lt;iostream&gt;#include &lt;iomanip&gt;#include &lt;bitset&gt;#include &lt;string&gt;#include &lt;set&gt;#include &lt;stack&gt;#include &lt;sstream&gt;#include &lt;list&gt;//#include &lt;array&gt;#include &lt;vector&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;memory&gt;#include &lt;iterator&gt;#include &lt;climits&gt;#include &lt;cassert&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;using namespace std;#define FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)#define all(x) (x).begin(), (x).end()typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;typedef pair&lt;int, int&gt; pdi;typedef pair&lt;ll, int&gt; pli;int const maxn = 100 + 10;const int INF = 0x3f3f3f3f;const ll INFL = 0x3f3f3f3f3f3f3f3f;inline int lc(int x) &#123;return x &lt;&lt; 1;&#125;inline int rc(int x) &#123;return x &lt;&lt; 1 | 1;&#125;int main(void) &#123; FAST_IO; int t; cin &gt;&gt; t; int nt = 0; while (t--) &#123; int n; cin &gt;&gt; n; string s1, s2, s, ans; cin &gt;&gt; s1 &gt;&gt; s2 &gt;&gt; ans; s = s1 + s2; int cnt = 0; while (s != ans) &#123; if (cnt != 0 &amp;&amp; s == s1 + s2) &#123; cnt = -1; break; &#125; // cout &lt;&lt; s &lt;&lt; endl; string temp = s; for (int i = 0, j = 0; i &lt; 2 * n; i += 2, j++) &#123; s[i] = temp[n + j]; s[i + 1] = temp[j]; &#125; cnt++; &#125; cout &lt;&lt; ++nt &lt;&lt; \" \" &lt;&lt; cnt &lt;&lt; endl; &#125; return 0;&#125; HDU - 1556 差分裸题题意有n个气球，给出M条$[l, r]$染色信息表示这个区间内被染色1次。求最后每个气球的染色次数。 分析本题N、M、L、R的范围都是$1e6$。暴力跑一定超时。 这时候可以采用差分数组。 令$d[0] = 0,d[i] = d[i] - d[i - 1]$。而原数组可以同差分数组前缀和获得，即$a[n] = sum_i^{1 \\leq i \\leq n}$。$O(N)$查询 而若是需要对区间$[l, r]$内的元素同时增加$x$，可以通过差分$d[l] += x, d[r + 1] -= x$完成。证明此处省略。$O(1)$更新。 AC代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263//#include &lt;bits/stdc++.h&gt;#include &lt;iostream&gt;#include &lt;iomanip&gt;#include &lt;bitset&gt;#include &lt;string&gt;#include &lt;set&gt;#include &lt;stack&gt;#include &lt;sstream&gt;#include &lt;list&gt;//#include &lt;array&gt;#include &lt;vector&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;memory&gt;#include &lt;iterator&gt;#include &lt;climits&gt;#include &lt;cassert&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;using namespace std;#define FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)#define all(x) (x).begin(), (x).end()typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;typedef pair&lt;int, int&gt; pdi;typedef pair&lt;ll, int&gt; pli;int const maxn = 100000 + 10;const int INF = 0x3f3f3f3f;const ll INFL = 0x3f3f3f3f3f3f3f3f;inline int lc(int x) &#123;return x &lt;&lt; 1;&#125;inline int rc(int x) &#123;return x &lt;&lt; 1 | 1;&#125;int d[maxn];int main(void) &#123; FAST_IO; int n; while (cin &gt;&gt; n) &#123; if (n == 0) break; // for (int i = 1; i &lt;= n; i++) d[i] = 1; memset(d, 0, sizeof(d)); for (int i = 1; i &lt;= n; i++) &#123; int l, r; cin &gt;&gt; l &gt;&gt; r; d[l]++; d[r + 1]--; &#125; for (int i = 1; i &lt;= n; i++) &#123; d[i] = d[i] + d[i - 1]; cout &lt;&lt; d[i]; if (i != n) cout &lt;&lt; \" \"; &#125; cout &lt;&lt; endl; &#125; return 0;&#125; 送外卖 美团面试题 反向建图，两次搜索题意外卖员从0开始到n-1送外卖，都到一个点，就有$a[i]、b[i]$两种选择，用字母ab来表示选择的方式。要求输出字典序最小的情况，无法到达$n - 1$输出$”No solution!”$,如果字符串无限长，就输出$ “Infinity!”$ 分析首先需要判定是否可以到达点$n - 1$，本题是一个有向图，所有需要判断终点和起点是否连通，并且确定哪些点是可达点。 所以先反向建图，从终点开始经行一次$BFS(DFS)$，记录可达点，并且确定连通性。若是不连通则输出”No solution!”。 再从0点开始，更加可达点二次搜索，因为要字典序最小，所以若是a可达就优先选择a的方案。若是其中存在回路，则表示字符串无限长。 AC代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119//#include &lt;bits/stdc++.h&gt;#include &lt;bitset&gt;#include &lt;iomanip&gt;#include &lt;iostream&gt;#include &lt;list&gt;#include &lt;set&gt;#include &lt;sstream&gt;#include &lt;stack&gt;#include &lt;string&gt;//#include &lt;array&gt;#include &lt;algorithm&gt;#include &lt;cassert&gt;#include &lt;climits&gt;#include &lt;cmath&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iterator&gt;#include &lt;map&gt;#include &lt;memory&gt;#include &lt;queue&gt;#include &lt;vector&gt;using namespace std;#define FAST_IO ios::sync_with_stdio(false), cin.tie(0), cout.tie(0)#define all(x) (x).begin(), (x).end()typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;typedef pair&lt;int, int&gt; pdi;typedef pair&lt;ll, int&gt; pli;int const maxn = 1e6 + 10;const int INF = 0x3f3f3f3f;const ll INFL = 0x3f3f3f3f3f3f3f3f;inline int lc(int x) &#123; return x &lt;&lt; 1; &#125;inline int rc(int x) &#123; return x &lt;&lt; 1 | 1; &#125;struct node &#123; int v, next;&#125; e[maxn];int head[maxn], cnt, flag;int a[maxn], b[maxn];int vis[maxn];string ans;int n;void add(int u, int v) &#123; e[cnt].v = v; e[cnt].next = head[u]; head[u] = cnt++;&#125;void init(void) &#123; memset(head, -1, sizeof(head)); cnt = 0;&#125;void dfs(int u) &#123; if (vis[u]) return; vis[u] = 1; for (int i = head[u]; ~i; i = e[i].next) &#123; dfs(e[i].v); &#125;&#125;void dfs2(int u, int step) &#123; if (u &gt;= n || u &lt; 0 || !vis[u] || step &gt;= n) &#123; return; &#125; if (u == n - 1) &#123; flag = 1; return; &#125; int v1 = u + a[u], v2 = u + b[u]; if (vis[v1] &amp;&amp; v1 &lt; n &amp;&amp; v1 &gt;= 0) &#123; ans += 'a'; dfs2(v1, step + 1); &#125; else if (vis[v2] &amp;&amp; v2 &lt; n &amp;&amp; v2 &gt;= 0) &#123; ans += 'b'; dfs2(v2, step + 1); &#125;&#125;int main(void) &#123; FAST_IO; init(); cin &gt;&gt; n; for (int i = 0; i &lt; n; i++) &#123; cin &gt;&gt; a[i]; &#125; for (int i = 0; i &lt; n; i++) &#123; cin &gt;&gt; b[i]; &#125; for (int i = 0; i &lt; n; i++) &#123; if (i + a[i] &gt;= 0 &amp;&amp; i + a[i] &lt; n) &#123; add(i + a[i], i); &#125; &#125; for (int i = 0; i &lt; n; i++) &#123; if (i + b[i] &gt;= 0 &amp;&amp; i + b[i] &lt; n) &#123; add(i + b[i], i); &#125; &#125; dfs(n - 1); if (!vis[0]) &#123; cout &lt;&lt; \"No solution!\" &lt;&lt; endl; &#125; else &#123; ans = \"\"; flag = 0; dfs2(0, 0); if (!flag) cout &lt;&lt; \"Infinity!\" &lt;&lt; endl; else cout &lt;&lt; ans &lt;&lt; endl; &#125; return 0;&#125; 点石成金 状压枚举题意有n块石头，每块石头有两种属性$x、y$，同时对于每块石头有两种不同的操作： x+a[i], y-b[i] y+c[i], x-d[i] 数值不会变为负数，即任何时候，如果数值小于了0，它会立即变为0 求若按照1-n的顺序操作视同，如何是的最后x*y的值最大。 对于20%的数据，1≤n≤2对于100%的数据，1≤n≤15，0≤ai,bi,ci,di≤1,000,000 分析数据较小，可以使用搜索或则状态压缩枚举所有过程。 AC代码状压解法 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667//#include &lt;bits/stdc++.h&gt;#include &lt;iostream&gt;#include &lt;iomanip&gt;#include &lt;bitset&gt;#include &lt;string&gt;#include &lt;set&gt;#include &lt;stack&gt;#include &lt;sstream&gt;#include &lt;list&gt;#include &lt;array&gt;#include &lt;vector&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;memory&gt;#include &lt;iterator&gt;#include &lt;climits&gt;#include &lt;cassert&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;using namespace std;#define FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)#define all(x) (x).begin(), (x).end()typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;typedef pair&lt;int, int&gt; pdi;typedef pair&lt;ll, int&gt; pli;int const maxn = 15 + 10;inline int lc(int x) &#123;return x &lt;&lt; 1;&#125;inline int rc(int x) &#123;return x &lt;&lt; 1 | 1;&#125;ll a[maxn], b[maxn], c[maxn], d[maxn];ll dp[maxn];int main(void) &#123; FAST_IO; int n; cin &gt;&gt; n; for (int i = 0; i &lt; n; i++) &#123; cin &gt;&gt; a[i] &gt;&gt; b[i] &gt;&gt; c[i] &gt;&gt; d[i]; &#125; ll ans = 0; for (int i = 0; i &lt; (1 &lt;&lt; n); i++) &#123; ll x = 0, y = 0; for (int j = 0; j &lt; n; j++) &#123; if (i &amp; (1 &lt;&lt; j)) &#123; x += a[j]; y -= b[j]; &#125; else &#123; x -= d[j]; y += c[j]; &#125; x = x &lt; 0 ? 0 : x; y = y &lt; 0 ? 0 : y; &#125; ans = max(ans, x * y); &#125; cout &lt;&lt; ans &lt;&lt; endl; return 0;&#125; 初心如金 结论，瞎搞题意详细见链接。 分析可以更加当前输入数字的奇偶性判断，因为输入的都是奇数，所以若是出现偶数，则表示二进制末尾的几个是$1 xor 1$，否则便是$1 xor 0$,因此可以直接根据后面询问的奇偶性判断上一次的答案。瞎搞的结论题。 AC代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081//#include &lt;bits/stdc++.h&gt;#include &lt;iostream&gt;#include &lt;iomanip&gt;#include &lt;bitset&gt;#include &lt;string&gt;#include &lt;set&gt;#include &lt;stack&gt;#include &lt;sstream&gt;#include &lt;list&gt;#include &lt;array&gt;#include &lt;vector&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;memory&gt;#include &lt;iterator&gt;#include &lt;climits&gt;#include &lt;cassert&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;using namespace std;#define FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)#define all(x) (x).begin(), (x).end()typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;typedef pair&lt;int, int&gt; pdi;typedef pair&lt;ll, int&gt; pli; int const maxn = 1e5 + 10;inline int lc(int x) &#123;return x &lt;&lt; 1;&#125;inline int rc(int x) &#123;return x &lt;&lt; 1 | 1;&#125; template &lt;typename T&gt;int read(T &amp;x) &#123; x = 0; int ch = getchar(), f = 1; while (ch &gt; '9' || ch &lt; '0') &#123; if (ch == EOF) return 0; if (ch == '-') f = -f; ch = getchar(); &#125; while (ch &gt;= '0' &amp;&amp; ch &lt;= '9') x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + (ch ^ 48), ch = getchar(); x *= f; return 1;&#125;template &lt;typename T&gt;void out(T x) &#123; if (x &lt; 0) putchar('-'),x = -x; if (x &gt; 9) out(x / 10); putchar(x % 10 + '0');&#125; int isprime(ll a) &#123; if (a == 1) return 0; for (ll i = 2; i * i &lt;= a; ++i) &#123; if (a % i == 0) return 0; &#125; return 1;&#125; int main(void) &#123; FAST_IO; int n; read(n); ll a; int x = 0; read(a); // x = isprime(a); for (int i = 1; i &lt; n; i++) &#123; read(a); out(!(a &amp; 1)); printf(\"\\n\"); &#125; return 0;&#125; 最短Hamilton路径 状压 Floyd最短路题意给定一张 n$(n \\leq 20)$ 个点的带权无向图，点从$0 \\sim n-1$标号，求起点 0 到终点 n-1 的最短Hamilton路径。 Hamilton路径的定义是从 0 到 n-1 不重不漏地经过每个点恰好一次。 对于任意的x,y,z，数据保证 a[x,x]=0，a[x,y]=a[y,x] 并且a[x,y]+a[y,z]≥a[x,z]a[x,y]+a[y,z] \\geq a[x,z]a[x,y]+a[y,z]≥a[x,z]。 分析首先我们要思考如果让这个NP完全题目复杂度降低，那么可以优先考虑到使用位运算，状态压缩等解决思路。然后接着思考，我们可以发现，我们所需要的不是整个方案，而只是方案最优解，所以我们只需要记录当前这个方案的最优解即可，那么我们考虑的状态，不久只有，在当前方案i中，目前抵达的点是j。现在既然装填已经确定好了当前点j，那么这个j点是由哪一个状态移动而来的呢？我们可以选择k，也就是说我们的状态转移方程可以为$f[i][j]=min(f[i][j],f[i(1&lt;&lt;j)][k]+weight[k][j])$ i^(1&lt;&lt;j)的意思是，i 异或 1右移j位，具体来说就是i这个方案集合 xor 10……0,(其中1的位置在第j位)。其作用是： 第一点它是在判断第j位的情况 第二点位运算速度快 AC代码12345678910111213141516171819202122232425262728293031323334353637#include &lt;bits/stdc++.h&gt;#define FAST_IO std::ios::sync_with_stdio(false),std::cin.tie(nullptr),std::cout.tie(nullptr)using namespace std;typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;int const maxn = 21;int dp[1 &lt;&lt; maxn][maxn];int d[maxn][maxn];int const INF = 0x3f3f3f3f;int main(void) &#123; FAST_IO; memset(dp, INF, sizeof(dp)); int n; cin &gt;&gt; n; for (int i = 0; i &lt; n; i++) &#123; for (int j = 0; j &lt; n; j++) &#123; cin &gt;&gt; d[i][j]; &#125; &#125; dp[1][0] = 0; for (int i = 1; i &lt; (1 &lt;&lt; n); i++) &#123; for (int j = 0; j &lt; n; j++) &#123; if (i &gt;&gt; j &amp; 1) &#123; for (int k = 0; k &lt; n; k++) &#123; if ((i ^ 1 &lt;&lt; j) &gt;&gt; k &amp; 1) &#123; dp[i][j] = min(dp[i][j], dp[i ^ 1 &lt;&lt; j][k] + d[k][j]); &#125; &#125; &#125; &#125; &#125; cout &lt;&lt; dp[(1 &lt;&lt; n) - 1][n - 1] &lt;&lt; endl; return 0;&#125;","content":"<h1 id=\"POJ-1860-最短路-判正环\"><a href=\"#POJ-1860-最短路-判正环\" class=\"headerlink\" title=\"POJ - 1860 最短路 判正环\"></a><a href=\"https://vjudge.net/problem/POJ-1860\" target=\"_blank\" rel=\"noopener\">POJ - 1860</a> 最短路 判正环</h1><h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>一开始，在$S$点有$V$个金币，而点$u → v$的过程会产生$V = (V - c_{uv}) * r_{uv}$的变化，问是否有一条路线可以使得最终的$V_{end} &gt; V$。</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>要是最找的$V$增加，有两种可能性：</p>\n<ul>\n<li>原本路径中就纯在这样的边权</li>\n<li>有正环的存在，因为$uv$而双向的通路，而若纯在一个正环，在环中走一些，不断的松弛操作后，最终会变成一个无穷大的数字，这样无论环中是否存在点$S$都可以通过回路达到$S$</li>\n</ul>\n<p>所以本题能够利用$bellman-Ford$的思想去解题。 因此初始化$dis(S)=V$而源点到其他点的距离（权值）初始化为无穷小（0），当$S$到其他某点的距离能不断变大时，说明存在最大路径；如果可以一直变大（也就是松弛次数超过$N-1$次），说明存在正环。</p>\n<p>本题因为数据范围不大，使用$Bellman-Ford或SPFA$都可以。我此题采用的是$SPFA$。复杂度$O(C*nlogn)$，SPFA的玄学常数，不过本题数据小无所谓。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"AC代码\"><a href=\"#AC代码\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//#include &lt;bits/stdc++.h&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bitset&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;list&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//#include &lt;array&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iterator&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cassert&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pdi;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;ll, <span class=\"keyword\">int</span>&gt; pli;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> maxn = <span class=\"number\">1e4</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ll INFL = <span class=\"number\">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">lc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>  </span>&#123;<span class=\"keyword\">return</span> x &lt;&lt; <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">rc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>  </span>&#123;<span class=\"keyword\">return</span> x &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> vis[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> head[maxn], cnt, ans[maxn];</span><br><span class=\"line\"><span class=\"keyword\">double</span> dis[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, S;</span><br><span class=\"line\"><span class=\"keyword\">double</span> V;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> v, next;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> r, c;</span><br><span class=\"line\">&#125;e[maxn &lt;&lt; <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(head, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(head));</span><br><span class=\"line\">    cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v, <span class=\"keyword\">double</span> r, <span class=\"keyword\">double</span> c)</span> </span>&#123;</span><br><span class=\"line\">    e[cnt].v = v;</span><br><span class=\"line\">    e[cnt].r = r, e[cnt].c = c;</span><br><span class=\"line\">    e[cnt].next = head[u];</span><br><span class=\"line\">    head[u] = cnt++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">SPFA</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(ans, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(ans));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(dis));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; q;</span><br><span class=\"line\">    q.push(s);</span><br><span class=\"line\">    dis[s] = V;</span><br><span class=\"line\">    vis[s] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    ans[s] ++;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = q.front();</span><br><span class=\"line\">        vis[u] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = head[u]; ~i; i = e[i].next) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v = e[i].v;</span><br><span class=\"line\">            <span class=\"keyword\">double</span> r = e[i].r;</span><br><span class=\"line\">            <span class=\"keyword\">double</span> c = e[i].c;</span><br><span class=\"line\">            <span class=\"keyword\">double</span> w = (dis[u] - c) * r;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dis[v] &lt; w) &#123;</span><br><span class=\"line\">                dis[v] = w;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!vis[v]) &#123;</span><br><span class=\"line\">                    vis[v] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                    q.push(v);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (++ans[v] &gt;= n) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dis[s] &gt; V) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">    </span><br><span class=\"line\">    init();</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; S &gt;&gt; V;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u, v;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> rab, cab, rba, cba;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; rab &gt;&gt; cab &gt;&gt; rba &gt;&gt; cba;</span><br><span class=\"line\">        add(u, v, rab, cab);</span><br><span class=\"line\">        add(v, u, rba, cba);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (SPFA(S)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"YES\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"NO\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"POJ-1511-双向建图\"><a href=\"#POJ-1511-双向建图\" class=\"headerlink\" title=\"POJ - 1511 双向建图\"></a><a href=\"https://vjudge.net/problem/POJ-1511\" target=\"_blank\" rel=\"noopener\">POJ - 1511</a> 双向建图</h1><h2 id=\"题意-1\"><a href=\"#题意-1\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>给定一张单向通路图（同时只能单向行驶），然后$n-1$个人从$1$号点出发，到剩余$n-1$个宣传点，然后再回到$1$号点汇报结果，求所有人往返路径和的最小值，保证有解。</p>\n<h2 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>本题的唯一难点在于$u到v和v到u$的最短路可能不同。所以，需要一次正向存边,一次反向存边，相当于从源点到其他店和从其他到源点，跑两次最短路。</p>\n<p>值得一题的是，本想想偷懒，用$vector$来存图，但$TLE$到自闭。。必须使用前向星。愿意应该是本题的$N、M$数据都是超大，vector的清空，复杂度需要$O(n)$，而前向星清空的复杂度只需要$O(1)$。</p>\n<h2 id=\"AC代码-1\"><a href=\"#AC代码-1\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//#include &lt;bits/stdc++.h&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bitset&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;list&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//#include &lt;array&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iterator&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cassert&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pdi;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;ll, <span class=\"keyword\">int</span>&gt; pli;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> maxn = <span class=\"number\">1e6</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ll INFL = <span class=\"number\">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">lc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>  </span>&#123;<span class=\"keyword\">return</span> x &lt;&lt; <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">rc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>  </span>&#123;<span class=\"keyword\">return</span> x &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">ll dis[<span class=\"number\">2</span>][maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> v, w, next;</span><br><span class=\"line\">&#125;e[<span class=\"number\">2</span>][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt1, cnt2, head[<span class=\"number\">2</span>][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> vis[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(head, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(head));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dis, <span class=\"number\">0x3f</span>, <span class=\"keyword\">sizeof</span>(dis));</span><br><span class=\"line\">    cnt1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    cnt2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> id, <span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> w, <span class=\"keyword\">int</span> &amp;cnt)</span> </span>&#123;</span><br><span class=\"line\">    e[id][cnt].v = v;</span><br><span class=\"line\">    e[id][cnt].w = w;</span><br><span class=\"line\">    e[id][cnt].next = head[id][u];</span><br><span class=\"line\">    head[id][u] = cnt++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dijkstra</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">    priority_queue&lt;pair&lt;ll, <span class=\"keyword\">int</span>&gt; &gt;q;</span><br><span class=\"line\">    q.push(make_pair(<span class=\"number\">0</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\">    dis[id][<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = q.top().second;</span><br><span class=\"line\">        q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (vis[u]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        vis[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = head[id][u]; ~i; i = e[id][i].next) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v = e[id][i].v;</span><br><span class=\"line\">            ll w = e[id][i].w;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dis[id][v] &gt; dis[id][u] + w) &#123;</span><br><span class=\"line\">                dis[id][v] = dis[id][u] + w;</span><br><span class=\"line\">                q.push(make_pair(-dis[id][v], v));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> t;</span><br><span class=\"line\">    <span class=\"comment\">// cin &gt;&gt; t;</span></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;t);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\">        <span class=\"comment\">// cin &gt;&gt; n &gt;&gt; m;</span></span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d\"</span>, &amp;n, &amp;m);</span><br><span class=\"line\">        init(n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> u, v, w;</span><br><span class=\"line\">            <span class=\"comment\">// cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span></span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d %d\"</span>, &amp;u, &amp;v, &amp;w);</span><br><span class=\"line\">            add(<span class=\"number\">0</span>, u, v, w, cnt1);</span><br><span class=\"line\">            add(<span class=\"number\">1</span>, v, u, w, cnt2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        dijkstra(<span class=\"number\">0</span>);</span><br><span class=\"line\">        dijkstra(<span class=\"number\">1</span>);</span><br><span class=\"line\">        ll ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// cout &lt;&lt; dis[0][i] &lt;&lt; \"  \" &lt;&lt; dis[1][i] &lt;&lt; endl;</span></span><br><span class=\"line\">            ans += dis[<span class=\"number\">1</span>][i] + dis[<span class=\"number\">0</span>][i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// cout &lt;&lt; ans &lt;&lt; endl;</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>, ans);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"POJ-3087-暴力模拟\"><a href=\"#POJ-3087-暴力模拟\" class=\"headerlink\" title=\"POJ - 3087  暴力模拟\"></a><a href=\"https://vjudge.net/problem/15207/origin\" target=\"_blank\" rel=\"noopener\">POJ - 3087 </a> 暴力模拟</h1><h2 id=\"题意-2\"><a href=\"#题意-2\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>现有字符串s1、s2、s12，其中s1、s2的长度为len，s12的长度为2*len。<br>是否可以通过一些操作使s1和s2转换合并成s12。无论怎么变换都不会得到s12，那么输出 -1。<br>变换的操作规则如下：</p>\n<ul>\n<li>假设$s1=12345,s2=67890$</li>\n<li>变换后的序列$ s=6172839405$</li>\n<li>如果s和s12完全相同，那么输出变换次数。如果不完全相等，s的前半部分作为s1，后半部分作为s2，重复上述过程。</li>\n</ul>\n<h2 id=\"分析-2\"><a href=\"#分析-2\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>按照题意，暴力模拟字符即可。。这种水题居然会在搜索里。</p>\n<h2 id=\"AC代码-2\"><a href=\"#AC代码-2\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//#include &lt;bits/stdc++.h&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bitset&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;list&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//#include &lt;array&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iterator&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cassert&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pdi;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;ll, <span class=\"keyword\">int</span>&gt; pli;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> maxn = <span class=\"number\">100</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ll INFL = <span class=\"number\">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">lc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>  </span>&#123;<span class=\"keyword\">return</span> x &lt;&lt; <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">rc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>  </span>&#123;<span class=\"keyword\">return</span> x &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> t;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; t;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> nt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> s1, s2, s, ans;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; s1 &gt;&gt; s2 &gt;&gt; ans;</span><br><span class=\"line\">        s = s1 + s2;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (s != ans) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cnt != <span class=\"number\">0</span> &amp;&amp; s == s1 + s2) &#123;</span><br><span class=\"line\">                cnt = <span class=\"number\">-1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// cout &lt;&lt; s &lt;&lt; endl;</span></span><br><span class=\"line\">            <span class=\"built_in\">string</span> temp = s;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span> * n; i += <span class=\"number\">2</span>, j++) &#123;</span><br><span class=\"line\">                s[i] = temp[n + j];</span><br><span class=\"line\">                s[i + <span class=\"number\">1</span>] = temp[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cnt++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; ++nt &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; cnt &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"HDU-1556-差分裸题\"><a href=\"#HDU-1556-差分裸题\" class=\"headerlink\" title=\"HDU - 1556  差分裸题\"></a><a href=\"https://vjudge.net/problem/27239/origin\" target=\"_blank\" rel=\"noopener\">HDU - 1556 </a> 差分裸题</h1><h2 id=\"题意-3\"><a href=\"#题意-3\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>有n个气球，给出M条$[l, r]$染色信息表示这个区间内被染色1次。求最后每个气球的染色次数。</p>\n<h2 id=\"分析-3\"><a href=\"#分析-3\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>本题N、M、L、R的范围都是$1e6$。暴力跑一定超时。</p>\n<p>这时候可以采用差分数组。</p>\n<p>令$d[0] = 0,d[i] = d[i] - d[i - 1]$。而原数组可以同差分数组前缀和获得，即$a[n] = sum_i^{1 \\leq i \\leq n}$。$O(N)$查询</p>\n<p>而若是需要对区间$[l, r]$内的元素同时增加$x$，可以通过差分$d[l] += x, d[r + 1] -= x$完成。证明此处省略。$O(1)$更新。</p>\n<h2 id=\"AC代码-3\"><a href=\"#AC代码-3\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//#include &lt;bits/stdc++.h&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bitset&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;list&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//#include &lt;array&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iterator&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cassert&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pdi;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;ll, <span class=\"keyword\">int</span>&gt; pli;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> maxn = <span class=\"number\">100000</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ll INFL = <span class=\"number\">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">lc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>  </span>&#123;<span class=\"keyword\">return</span> x &lt;&lt; <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">rc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>  </span>&#123;<span class=\"keyword\">return</span> x &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> d[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">cin</span> &gt;&gt; n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"comment\">// for (int i = 1; i &lt;= n; i++) d[i] = 1;</span></span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(d, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(d));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> l, r;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; l &gt;&gt; r;</span><br><span class=\"line\">            d[l]++;</span><br><span class=\"line\">            d[r + <span class=\"number\">1</span>]--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            d[i] = d[i] + d[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; d[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i != n) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"送外卖-美团面试题-反向建图，两次搜索\"><a href=\"#送外卖-美团面试题-反向建图，两次搜索\" class=\"headerlink\" title=\"送外卖 美团面试题 反向建图，两次搜索\"></a><a href=\"https://ac.nowcoder.com/acm/problem/13224\" target=\"_blank\" rel=\"noopener\">送外卖</a> 美团面试题 反向建图，两次搜索</h1><h2 id=\"题意-4\"><a href=\"#题意-4\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>外卖员从0开始到n-1送外卖，都到一个点，就有$a[i]、b[i]$两种选择，用字母ab来表示选择的方式。要求输出字典序最小的情况，无法到达$n - 1$输出$”No solution!”$,如果字符串无限长，就输出$ “Infinity!”$</p>\n<h2 id=\"分析-4\"><a href=\"#分析-4\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>首先需要判定是否可以到达点$n - 1$，本题是一个有向图，所有需要判断终点和起点是否连通，并且确定哪些点是可达点。</p>\n<ul>\n<li><p>所以先反向建图，从终点开始经行一次$BFS(DFS)$，记录可达点，并且确定连通性。若是不连通则输出”No solution!”。</p>\n</li>\n<li><p>再从0点开始，更加可达点二次搜索，因为要字典序最小，所以若是a可达就优先选择a的方案。若是其中存在回路，则表示字符串无限长。</p>\n</li>\n</ul>\n<h2 id=\"AC代码-4\"><a href=\"#AC代码-4\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//#include &lt;bits/stdc++.h&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bitset&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;list&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//#include &lt;array&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cassert&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iterator&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO ios::sync_with_stdio(false), cin.tie(0), cout.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pdi;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;ll, <span class=\"keyword\">int</span>&gt; pli;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> maxn = <span class=\"number\">1e6</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ll INFL = <span class=\"number\">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">lc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123; <span class=\"keyword\">return</span> x &lt;&lt; <span class=\"number\">1</span>; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">rc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123; <span class=\"keyword\">return</span> x &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> v, next;</span><br><span class=\"line\">&#125; e[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> head[maxn], cnt, flag;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[maxn], b[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> vis[maxn];</span><br><span class=\"line\"><span class=\"built_in\">string</span> ans;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    e[cnt].v = v;</span><br><span class=\"line\">    e[cnt].next = head[u];</span><br><span class=\"line\">    head[u] = cnt++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(head, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(head));</span><br><span class=\"line\">    cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (vis[u]) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    vis[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = head[u]; ~i; i = e[i].next) &#123;</span><br><span class=\"line\">        dfs(e[i].v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs2</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> step)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (u &gt;= n || u &lt; <span class=\"number\">0</span> || !vis[u] || step &gt;= n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (u == n - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> v1 = u + a[u], v2 = u + b[u];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (vis[v1] &amp;&amp; v1 &lt; n &amp;&amp; v1 &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        ans += <span class=\"string\">'a'</span>;</span><br><span class=\"line\">        dfs2(v1, step + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (vis[v2] &amp;&amp; v2 &lt; n &amp;&amp; v2 &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        ans += <span class=\"string\">'b'</span>;</span><br><span class=\"line\">        dfs2(v2, step + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">    init();</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; b[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i + a[i] &gt;= <span class=\"number\">0</span> &amp;&amp; i + a[i] &lt; n) &#123;</span><br><span class=\"line\">            add(i + a[i], i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i + b[i] &gt;= <span class=\"number\">0</span> &amp;&amp; i + b[i] &lt; n) &#123;</span><br><span class=\"line\">            add(i + b[i], i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dfs(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!vis[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"No solution!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        ans = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">        dfs2(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!flag)</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Infinity!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"点石成金-状压枚举\"><a href=\"#点石成金-状压枚举\" class=\"headerlink\" title=\"点石成金 状压枚举\"></a><a href=\"https://ac.nowcoder.com/acm/contest/2272/G\" target=\"_blank\" rel=\"noopener\">点石成金</a> 状压枚举</h1><h2 id=\"题意-5\"><a href=\"#题意-5\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>有n块石头，每块石头有两种属性$x、y$，同时对于每块石头有两种不同的操作：</p>\n<ul>\n<li><p>x+a[i], y-b[i]</p>\n</li>\n<li><p>y+c[i], x-d[i]</p>\n<p>  数值不会变为负数，即任何时候，如果数值小于了0，它会立即变为0</p>\n</li>\n</ul>\n<p>求若按照1-n的顺序操作视同，如何是的最后x*y的值最大。</p>\n<blockquote>\n<p> 对于20%的数据，1≤n≤2<br>对于100%的数据，1≤n≤15，0≤ai,bi,ci,di≤1,000,000  </p>\n</blockquote>\n<h2 id=\"分析-5\"><a href=\"#分析-5\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>数据较小，可以使用搜索或则状态压缩枚举所有过程。</p>\n<h2 id=\"AC代码-5\"><a href=\"#AC代码-5\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><p>状压解法</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//#include &lt;bits/stdc++.h&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bitset&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;list&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iterator&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cassert&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pdi;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;ll, <span class=\"keyword\">int</span>&gt; pli;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> maxn = <span class=\"number\">15</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">lc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>  </span>&#123;<span class=\"keyword\">return</span> x &lt;&lt; <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">rc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>  </span>&#123;<span class=\"keyword\">return</span> x &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ll a[maxn], b[maxn], c[maxn], d[maxn];</span><br><span class=\"line\">ll dp[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; a[i] &gt;&gt; b[i] &gt;&gt; c[i] &gt;&gt; d[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    ll ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; (<span class=\"number\">1</span> &lt;&lt; n); i++) &#123;</span><br><span class=\"line\">        ll x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &amp; (<span class=\"number\">1</span> &lt;&lt; j)) &#123;</span><br><span class=\"line\">                x += a[j];</span><br><span class=\"line\">                y -= b[j];</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                x -= d[j];</span><br><span class=\"line\">                y += c[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            x = x &lt; <span class=\"number\">0</span> ? <span class=\"number\">0</span> : x;</span><br><span class=\"line\">            y = y &lt; <span class=\"number\">0</span> ? <span class=\"number\">0</span> : y;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans = max(ans, x * y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n<h1 id=\"初心如金-结论，瞎搞\"><a href=\"#初心如金-结论，瞎搞\" class=\"headerlink\" title=\"初心如金 结论，瞎搞\"></a><a href=\"https://ac.nowcoder.com/acm/problem/53677\" target=\"_blank\" rel=\"noopener\">初心如金</a> 结论，瞎搞</h1><h2 id=\"题意-6\"><a href=\"#题意-6\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>详细见链接。</p>\n<h2 id=\"分析-6\"><a href=\"#分析-6\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>可以更加当前输入数字的奇偶性判断，因为输入的都是奇数，所以若是出现偶数，则表示二进制末尾的几个是$1 xor 1$，否则便是$1 xor 0$,因此可以直接根据后面询问的奇偶性判断上一次的答案。瞎搞的结论题。</p>\n<h2 id=\"AC代码-6\"><a href=\"#AC代码-6\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//#include &lt;bits/stdc++.h&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bitset&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;list&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iterator&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cassert&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pdi;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;ll, <span class=\"keyword\">int</span>&gt; pli;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> maxn = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">lc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>  </span>&#123;<span class=\"keyword\">return</span> x &lt;&lt; <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">rc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>  </span>&#123;<span class=\"keyword\">return</span> x &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">(T &amp;x)</span> </span>&#123;</span><br><span class=\"line\">    x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ch = getchar(), f = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ch &gt; <span class=\"string\">'9'</span> || ch &lt; <span class=\"string\">'0'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == EOF) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == <span class=\"string\">'-'</span>) f = -f;</span><br><span class=\"line\">        ch = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ch &gt;= <span class=\"string\">'0'</span> &amp;&amp; ch &lt;= <span class=\"string\">'9'</span>)</span><br><span class=\"line\">        x = (x &lt;&lt; <span class=\"number\">1</span>) + (x &lt;&lt; <span class=\"number\">3</span>) + (ch ^ <span class=\"number\">48</span>), ch = getchar();</span><br><span class=\"line\">    x *= f;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">out</span><span class=\"params\">(T x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>) <span class=\"built_in\">putchar</span>(<span class=\"string\">'-'</span>),x = -x;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>) out(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">'0'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">isprime</span><span class=\"params\">(ll a)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (ll i = <span class=\"number\">2</span>; i * i &lt;= a; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a % i == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    read(n);</span><br><span class=\"line\">    ll a;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    read(a);</span><br><span class=\"line\">    <span class=\"comment\">// x = isprime(a);</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        read(a);</span><br><span class=\"line\">        out(!(a &amp; <span class=\"number\">1</span>));</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"最短Hamilton路径-状压-Floyd最短路\"><a href=\"#最短Hamilton路径-状压-Floyd最短路\" class=\"headerlink\" title=\"最短Hamilton路径 状压 Floyd最短路\"></a><a href=\"https://ac.nowcoder.com/acm/problem/50909\" target=\"_blank\" rel=\"noopener\">最短Hamilton路径</a> 状压 Floyd最短路</h1><h2 id=\"题意-7\"><a href=\"#题意-7\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>给定一张 n$(n \\leq 20)$ 个点的带权无向图，点从$0 \\sim n-1$标号，求起点 0 到终点 n-1 的最短Hamilton路径。 Hamilton路径的定义是从 0 到 n-1 不重不漏地经过每个点恰好一次。  </p>\n<blockquote>\n<p>对于任意的x,y,z，数据保证 a[x,x]=0，a[x,y]=a[y,x] 并且a[x,y]+a[y,z]≥a[x,z]a[x,y]+a[y,z] \\geq a[x,z]a[x,y]+a[y,z]≥a[x,z]。   </p>\n</blockquote>\n<h2 id=\"分析-7\"><a href=\"#分析-7\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>首先我们要思考如果让这个NP完全题目复杂度降低，那么可以优先考虑到使用位运算，状态压缩等解决思路。<br>然后接着思考，我们可以发现，我们所需要的不是整个方案，而只是方案最优解，所以我们只需要记录当前这个方案的最优解即可，那么我们考虑的状态，不久只有，在当前方案i中，目前抵达的点是j。<br>现在既然装填已经确定好了当前点j，那么这个j点是由哪一个状态移动而来的呢？我们可以选择k，也就是说我们的状态转移方程可以为<br>$f[i][j]=min(f[i][j],f[i(1&lt;&lt;j)][k]+weight[k][j])$</p>\n<p>i^(1&lt;&lt;j)的意思是，i 异或 1右移j位，具体来说就是i这个方案集合 xor 10……0,(其中1的位置在第j位)。其作用是：</p>\n<ul>\n<li>第一点它是在判断第j位的情况</li>\n<li>第二点位运算速度快</li>\n</ul>\n<h2 id=\"AC代码-7\"><a href=\"#AC代码-7\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO std::ios::sync_with_stdio(false),std::cin.tie(nullptr),std::cout.tie(nullptr)</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> maxn = <span class=\"number\">21</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dp[<span class=\"number\">1</span> &lt;&lt; maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> d[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> INF = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dp, INF, <span class=\"keyword\">sizeof</span>(dp));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; d[i][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dp[<span class=\"number\">1</span>][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; (<span class=\"number\">1</span> &lt;&lt; n); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt;&gt; j &amp; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; n; k++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> ((i ^ <span class=\"number\">1</span> &lt;&lt; j) &gt;&gt; k &amp; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                        dp[i][j] = min(dp[i][j], dp[i ^ <span class=\"number\">1</span> &lt;&lt; j][k] + d[k][j]);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; dp[(<span class=\"number\">1</span> &lt;&lt; n) - <span class=\"number\">1</span>][n - <span class=\"number\">1</span>] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","link":"","categories":[{"name":"ACM","slug":"ACM","permalink":"http://yoursite.com/categories/ACM/"},{"name":"题解","slug":"ACM/题解","permalink":"http://yoursite.com/categories/ACM/%E9%A2%98%E8%A7%A3/"},{"name":"寒假","slug":"ACM/题解/寒假","permalink":"http://yoursite.com/categories/ACM/%E9%A2%98%E8%A7%A3/%E5%AF%92%E5%81%87/"}],"tags":[{"name":"-\"最短路\" -\"搜索\" -\"水题\" -\"状压\" -\"差分\" -\"模拟\" -\"字符串\"","slug":"最短路-搜索-水题-状压-差分-模拟-字符串","permalink":"http://yoursite.com/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF-%E6%90%9C%E7%B4%A2-%E6%B0%B4%E9%A2%98-%E7%8A%B6%E5%8E%8B-%E5%B7%AE%E5%88%86-%E6%A8%A1%E6%8B%9F-%E5%AD%97%E7%AC%A6%E4%B8%B2/"}]},{"title":"寒假练习（二）最短路 and 搜索","date":"2020-01-13T18:22:35.000Z","path":"2020/01/14/200113/","text":"POJ - 1797 最短路变形题意给定一张n点m条边的无向图，求出1-n路径中边权最小值最大的边。 分析这道题，刚开始的时候，没有什么思路。最简单暴力的方法就是$O(n^n)$的搜索，暴力比较。但是这题在最短路的专题里，那必定和最短路有关。 在最短路算法中，通过复杂度，可以排除$Flody$，剩下的$SPFA/Dijkstra$。而最短边权最大，其实就是选出边权最大的一条路，然后更新到终点v的最小值即可。原本的松弛操作$dis[v] = min(dis[v], dis[u] + w)$变成了$dis[v] = max(dis[v], min(w, dis[u]))$。 另外，因为选出最大边权，最小。所以可以贪心的用最大生成树，来实现。 证明：若1-&gt;n中，经过x点，最大生成树贪心连边，保证1-&gt;x连通的最大，则不存在比$e(x,v)$更大的边。从而构建出一颗最大路径树取其中最小值即可。 AC代码Dijkstra123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105//#include &lt;bits/stdc++.h&gt;#include &lt;iostream&gt;#include &lt;iomanip&gt;#include &lt;bitset&gt;#include &lt;string&gt;#include &lt;set&gt;#include &lt;stack&gt;#include &lt;sstream&gt;#include &lt;list&gt;//#include &lt;array&gt;#include &lt;vector&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;memory&gt;#include &lt;iterator&gt;#include &lt;climits&gt;#include &lt;cassert&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;using namespace std;#define FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)#define all(x) (x).begin(), (x).end()typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;typedef pair&lt;int, int&gt; pdi;typedef pair&lt;ll, int&gt; pli;int const maxn = 1e5 + 10;const int INF = 0x3f3f3f3f;const ll INFL = 0x3f3f3f3f3f3f3f3f;inline int lc(int x) &#123;return x &lt;&lt; 1;&#125;inline int rc(int x) &#123;return x &lt;&lt; 1 | 1;&#125;int n, m;struct node &#123; int v, w, next;&#125;e[maxn&lt;&lt;1];int head[maxn], cnt;int vis[maxn], dis[maxn];void init() &#123; memset(head, -1, sizeof(head)); cnt = 0;&#125;void add(int u, int v, int w) &#123; e[cnt].v = v; e[cnt].w = w; e[cnt].next = head[u]; head[u] = cnt++;&#125;int dijkstra(int st, int ed) &#123; for (int i = 1; i &lt;= n; i++) &#123; dis[i] = -INF; &#125; dis[st] = 0; memset(vis, 0, sizeof(vis)); priority_queue&lt;pair&lt;int, int&gt; &gt; q; q.push(make_pair(0, st)); while (!q.empty()) &#123; int u = q.top().second; q.pop(); if (vis[u]) continue; vis[u] = 1; for (int i = head[u]; ~i; i = e[i].next) &#123; int v = e[i].v; int w = e[i].w; if (u != st &amp;&amp; dis[u] != -INF) &#123; w = min(dis[u], w);//选择最小值 &#125; if (dis[v] &lt; w) &#123; dis[v] = w; q.push(&#123;dis[v], v&#125;);//选出最大边 &#125; &#125; &#125; return dis[ed];&#125;int main(void) &#123; FAST_IO; int t; cin &gt;&gt; t; int nt = 0; while (t--) &#123; init(); cin &gt;&gt; n &gt;&gt; m; for (int i = 0; i &lt; m; i++) &#123; int u, v, w; cin &gt;&gt; u &gt;&gt; v &gt;&gt; w; add(u, v, w); add(v, u, w); &#125; cout &lt;&lt; \"Scenario #\" &lt;&lt; ++nt &lt;&lt; \":\" &lt;&lt; endl; cout &lt;&lt; dijkstra(1, n) &lt;&lt;endl &lt;&lt; endl; &#125; return 0;&#125; 最大生成树123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101//#include &lt;bits/stdc++.h&gt;#include &lt;iostream&gt;#include &lt;iomanip&gt;#include &lt;bitset&gt;#include &lt;string&gt;#include &lt;set&gt;#include &lt;stack&gt;#include &lt;sstream&gt;#include &lt;list&gt;//#include &lt;array&gt;#include &lt;vector&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;memory&gt;#include &lt;iterator&gt;#include &lt;climits&gt;#include &lt;cassert&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;using namespace std;#define FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)#define all(x) (x).begin(), (x).end()typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;typedef pair&lt;int, int&gt; pdi;typedef pair&lt;ll, int&gt; pli;int const maxn = 1e5 + 10;const int INF = 0x3f3f3f3f;const ll INFL = 0x3f3f3f3f3f3f3f3f;inline int lc(int x) &#123;return x &lt;&lt; 1;&#125;inline int rc(int x) &#123;return x &lt;&lt; 1 | 1;&#125;struct node &#123; int u, v, w; node(const int &amp;u = 0, const int &amp;v = 0, const int &amp;w = 0) : u(u), v(v), w(w) &#123; &#125; bool operator&lt;(const node &amp;x) const &#123; return w &gt; x.w; &#125;&#125;e[maxn &lt;&lt; 1];int fa[maxn];int n, m;void init(int n) &#123; // cnt = 0; for (int i = 0; i &lt;= n; i++) &#123; fa[i] = i; &#125;&#125;int find(int x) &#123; return x == fa[x] ? x : fa[x] = find(fa[x]);&#125;bool unio(int x, int y) &#123; int fx = find(x), fy = find(y); if (fx == fy) return false; fa[fx] = fy; return true;&#125;int MST() &#123; sort(e + 1, e + 1 + m); int cnt = 0; int ans = INF; for (int i = 1; i &lt;= m; i++) &#123; int u = e[i].u, v = e[i].v, w = e[i].w; if (unio(u, v)) &#123; ans = min(w, ans); cnt++; if (cnt == n - 1) break; if (find(1) == find(n)) break; &#125; &#125; return ans;&#125;int main(void) &#123; FAST_IO; int t, nt = 0; cin &gt;&gt; t; while (t--) &#123; cin &gt;&gt; n &gt;&gt; m; init(n); for (int i = 1; i &lt;= m; i++) &#123; int u, v, w; cin &gt;&gt; e[i].u &gt;&gt; e[i].v &gt;&gt; e[i].w; &#125; int ans = MST(); cout &lt;&lt; \"Scenario #\" &lt;&lt; ++nt &lt;&lt; \":\" &lt;&lt; endl; cout &lt;&lt; ans &lt;&lt; endl &lt;&lt; endl; &#125; return 0;&#125; POJ-1426 水题题意给定一个正整数n，求n的非0倍数，且只包含0和1的数字。 分析两种状态，$x = x * 10 ,x = x * 10 + 1$，暴力$DFS$。 AC代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758//#include &lt;bits/stdc++.h&gt;#include &lt;iostream&gt;#include &lt;iomanip&gt;#include &lt;bitset&gt;#include &lt;string&gt;#include &lt;set&gt;#include &lt;stack&gt;#include &lt;sstream&gt;#include &lt;list&gt;//#include &lt;array&gt;#include &lt;vector&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;memory&gt;#include &lt;iterator&gt;#include &lt;climits&gt;#include &lt;cassert&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;using namespace std;#define FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)#define all(x) (x).begin(), (x).end()typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;typedef pair&lt;int, int&gt; pdi;typedef pair&lt;ll, int&gt; pli;int const maxn = 1e5 + 10;const int INF = 0x3f3f3f3f;const ll INFL = 0x3f3f3f3f3f3f3f3f;inline int lc(int x) &#123;return x &lt;&lt; 1;&#125;inline int rc(int x) &#123;return x &lt;&lt; 1 | 1;&#125;int n;bool dfs(ull x, int step) &#123; if (step &gt; 19) return false; if (x % n == 0) &#123; cout &lt;&lt; x &lt;&lt; endl; return true; &#125; if (dfs(x * 10, step + 1)) return true; if (dfs(x * 10 + 1, step + 1)) return true; &#125;int main(void) &#123; FAST_IO; while (cin &gt;&gt; n) &#123; if (n == 0) break; dfs(1, 1); &#125; return 0;&#125; CF-1037D 验证BFS序，好题！题意$BFS$算法定义如下： 设想有一个顶点编号从 $1$ 到 $n$ 的无向图。初始化 $q$ 为一个只包含顶点 $1$ 的新队列，并将顶点 $1$ 标记为已使用。 从队列 $q$ 的头部提取顶点 $v$ 。 打印顶点 $v$ 的下标。 以任意顺序遍历所有与 $v$ 相邻的且未被使用的顶点 $u$ 。将顶点 $u$ 标记为已使用，并将其插入队列 $q$ 的尾部。 如果队列不是空的，则从步骤 2 继续。 否则结束。 给定一棵结点编号从1到n的无根树，以及一个BFS序列，问该BFS序列是否为合法的树的BFS序列。保证BFS算法必从结点1开始，但BFS序列的第一个结点未必是1。 分析一开始写了朴素的$BFS$wa on test11，然后再次读题，是随机取点，就该成记录层次验证。但是没想到wa on test4了。 思考后发现理由如下： 如图： 1 2 1 4 2 3 2 5 4 6 BFS序列：1 4 2 3 5 6，其对应层次序列没问题，但是4先入队，所以节点6应该在3 5之前。其先后顺序无法通过深度记录下来。 对于每个节点的先后顺序，可以先记录每个顶点在给定序列中的位置。 然后把邻接表内可达点的顺序，按照位置排序。 进行BFS，比较最终的序列是否和给定序列一致。 复杂度分析：每次进行排序的复杂度是$O(nlogn)$，跑一次$BFS$为$O(n)$，所以预计复杂度在$O(nlogn^2)$左右。 AC代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293//#include &lt;bits/stdc++.h&gt;#include &lt;iostream&gt;#include &lt;iomanip&gt;#include &lt;bitset&gt;#include &lt;string&gt;#include &lt;set&gt;#include &lt;stack&gt;#include &lt;sstream&gt;#include &lt;list&gt;//#include &lt;array&gt;#include &lt;vector&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;memory&gt;#include &lt;iterator&gt;#include &lt;climits&gt;#include &lt;cassert&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;using namespace std;#define FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)#define all(x) (x).begin(), (x).end()typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;typedef pair&lt;int, int&gt; pdi;typedef pair&lt;ll, int&gt; pli;int const maxn = 200000 + 10;const int INF = 0x3f3f3f3f;const ll INFL = 0x3f3f3f3f3f3f3f3f;inline int lc(int x) &#123;return x &lt;&lt; 1;&#125;inline int rc(int x) &#123;return x &lt;&lt; 1 | 1;&#125;int a[maxn];int ans[maxn];vector&lt;int&gt; e[maxn];int vis[maxn];int pos[maxn];void bfs(int root) &#123; queue&lt;int&gt; q; q.push(root); int cnt = 1; while (!q.empty()) &#123; int u = q.front(); ans[cnt++] = u; q.pop(); if (vis[u]) continue; vis[u] = 1; for (auto &amp;v : e[u]) &#123; if (!vis[v]) q.push(v); &#125; &#125;&#125;int main(void) &#123; FAST_IO; int n; cin &gt;&gt; n; for (int i = 0; i &lt; n - 1; i++) &#123; int u, v; cin &gt;&gt; u &gt;&gt; v; e[u].push_back(v); e[v].push_back(u); &#125; for (int i = 1; i &lt;= n; i++) &#123; cin &gt;&gt; a[i]; pos[a[i]] = i; &#125; for (int i = 0; i &lt;= n; i++) &#123; sort(e[i].begin(), e[i].end(), [](int const &amp;x, int const &amp;y)&#123; return pos[x] &lt; pos[y]; &#125;); &#125; bfs(1); int flag = 0; for (int i = 1; i &lt;= n; i++) &#123; if (a[i] != ans[i]) &#123; flag = 1; break; &#125; &#125; // cout &lt;&lt; endl; if (flag) cout &lt;&lt; \"No\" &lt;&lt;endl; else cout &lt;&lt; \"Yes\" &lt;&lt; endl; return 0;&#125; POJ - 3279 二进制状态压缩+暴力 ，好题题意有一个01矩阵，每次改变一格同时也会反转它上下左右的格子。问对于每个格子，最少操作多少次，可以矩阵全为0。若是不可能，输出$IMPOSSIBLE$。 分析本题在思维上算是贪心。每次改定上下左右和自身。若是改动偶数次，就会还原成原始状态，所以最少的方案就是每个格子最多改动一次。 再考虑格子间的关系，当我们翻转一个格子的时候，会影响上下左右的格子，所以我们以上一行为基础进行翻转，当上一行为1时，就改变当前格子，这样就不会影响上一行的其他格子，当翻转完成后，只需要看最后一行是否全部是0即可，若是代表次方案可行。 我们枚举第一行的状态，$2^m$种情况，根据第一行状态压缩枚举，来进行各种情况的翻转。 若最后一行全是0，且翻转次数小于以前的方案就可以更新答案。 AC代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113//#include &lt;bits/stdc++.h&gt;#include &lt;iostream&gt;#include &lt;iomanip&gt;#include &lt;bitset&gt;#include &lt;string&gt;#include &lt;set&gt;#include &lt;stack&gt;#include &lt;sstream&gt;#include &lt;list&gt;//#include &lt;array&gt;#include &lt;vector&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;memory&gt;#include &lt;iterator&gt;#include &lt;climits&gt;#include &lt;cassert&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;using namespace std;#define FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)#define all(x) (x).begin(), (x).end()typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;typedef pair&lt;int, int&gt; pdi;typedef pair&lt;ll, int&gt; pli;int const maxn = 15 + 10;const int INF = 0x3f3f3f3f;const ll INFL = 0x3f3f3f3f3f3f3f3f;inline int lc(int x) &#123;return x &lt;&lt; 1;&#125;inline int rc(int x) &#123;return x &lt;&lt; 1 | 1;&#125;int m, n;int a[maxn][maxn], g[maxn][maxn];int const dir[4][2] = &#123;1, 0, -1, 0, 0, 1, 0, -1&#125;;int mp[maxn][maxn];int cnt;bool checkpos(int x, int y) &#123; if (x &lt; 0 || x &gt;= n || y &lt; 0 || y &gt;= m) return false; return true;&#125;void change(int x, int y) &#123; cnt++; mp[x][y] = 1; g[x][y] ^= 1; for (int i = 0; i &lt; 4; i++) &#123; int tx = x + dir[i][0]; int ty = y + dir[i][1]; if (checkpos(tx, ty)) &#123; g[tx][ty] ^= 1; &#125; &#125;&#125;bool check(int v) &#123; memcpy(g, a, sizeof(g)); memset(mp, 0, sizeof(mp)); cnt = 0; for (int i = 0; i &lt; m; i++) &#123; if (v &amp; (1 &lt;&lt; (m - 1 - i))) change(0, i); &#125; for (int i = 1; i &lt; n; i++) &#123; for (int j = 0; j &lt; m; j++) &#123; if (g[i - 1][j]) &#123; change(i, j); &#125; &#125; &#125; for (int i = 0; i &lt; m; i++) &#123; if (g[n - 1][i]) return false; &#125; return true;&#125;int main(void) &#123; // FAST_IO; cin &gt;&gt; n &gt;&gt; m; int p = -1; for (int i = 0; i &lt; n; i++) &#123; for (int j = 0; j &lt; m; j++) &#123; cin &gt;&gt; a[i][j]; &#125; &#125; int ans = INF; for (int i = 0; i &lt; (1 &lt;&lt; m); i++) &#123; if (check(i) &amp;&amp; cnt &lt; ans) &#123; ans = cnt; p = i; &#125; &#125; if (ans != INF) &#123; check(p); for (int i = 0; i &lt; n; i++) &#123; for (int j = 0; j &lt; m; j++) &#123; cout &lt;&lt; mp[i][j]; if (j &lt; m - 1) cout &lt;&lt;\" \"; &#125; cout &lt;&lt; endl; &#125; &#125; else &#123; cout &lt;&lt; \"IMPOSSIBLE\" &lt;&lt; endl; &#125; return 0;&#125;","content":"<h1 id=\"POJ-1797-最短路变形\"><a href=\"#POJ-1797-最短路变形\" class=\"headerlink\" title=\"POJ - 1797 最短路变形\"></a><a href=\"https://vjudge.net/problem/POJ-1797\" target=\"_blank\" rel=\"noopener\">POJ - 1797</a> 最短路变形</h1><h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>给定一张n点m条边的无向图，求出1-n路径中边权最小值最大的边。</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题，刚开始的时候，没有什么思路。最简单暴力的方法就是$O(n^n)$的搜索，暴力比较。但是这题在最短路的专题里，那必定和最短路有关。</p>\n<p>在最短路算法中，通过复杂度，可以排除$Flody$，剩下的$SPFA/Dijkstra$。而最短边权最大，其实就是选出边权最大的一条路，然后更新到终点v的最小值即可。原本的松弛操作$dis[v] = min(dis[v], dis[u] + w)$变成了$dis[v] = max(dis[v], min(w, dis[u]))$。</p>\n<a id=\"more\"></a>\n\n<p>另外，因为选出最大边权，最小。所以可以贪心的用最大生成树，来实现。</p>\n<p>证明：若1-&gt;n中，经过x点，最大生成树贪心连边，保证1-&gt;x连通的最大，则不存在比$e(x,v)$更大的边。从而构建出一颗最大路径树取其中最小值即可。</p>\n<h2 id=\"AC代码\"><a href=\"#AC代码\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><h3 id=\"Dijkstra\"><a href=\"#Dijkstra\" class=\"headerlink\" title=\"Dijkstra\"></a>Dijkstra</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//#include &lt;bits/stdc++.h&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bitset&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;list&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//#include &lt;array&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iterator&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cassert&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pdi;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;ll, <span class=\"keyword\">int</span>&gt; pli;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> maxn = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ll INFL = <span class=\"number\">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">lc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>  </span>&#123;<span class=\"keyword\">return</span> x &lt;&lt; <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">rc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>  </span>&#123;<span class=\"keyword\">return</span> x &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> v, w, next;</span><br><span class=\"line\">&#125;e[maxn&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> head[maxn], cnt;</span><br><span class=\"line\"><span class=\"keyword\">int</span> vis[maxn], dis[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(head, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(head));</span><br><span class=\"line\">    cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> w)</span> </span>&#123;</span><br><span class=\"line\">    e[cnt].v = v;</span><br><span class=\"line\">    e[cnt].w = w;</span><br><span class=\"line\">    e[cnt].next = head[u];</span><br><span class=\"line\">    head[u] = cnt++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dijkstra</span><span class=\"params\">(<span class=\"keyword\">int</span> st, <span class=\"keyword\">int</span> ed)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        dis[i] = -INF;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dis[st] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">    priority_queue&lt;pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; &gt; q;</span><br><span class=\"line\">    q.push(make_pair(<span class=\"number\">0</span>, st));</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = q.top().second;</span><br><span class=\"line\">        q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (vis[u]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        vis[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = head[u]; ~i; i = e[i].next) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v = e[i].v;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> w = e[i].w;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (u != st &amp;&amp; dis[u] != -INF) &#123;</span><br><span class=\"line\">                w = min(dis[u], w);<span class=\"comment\">//选择最小值</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dis[v] &lt; w) &#123;</span><br><span class=\"line\">                dis[v] = w;</span><br><span class=\"line\">                q.push(&#123;dis[v], v&#125;);<span class=\"comment\">//选出最大边</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dis[ed];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; t;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> nt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t--) &#123;</span><br><span class=\"line\">        init();</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> u, v, w;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class=\"line\">            add(u, v, w);</span><br><span class=\"line\">            add(v, u, w);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Scenario #\"</span> &lt;&lt; ++nt &lt;&lt; <span class=\"string\">\":\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; dijkstra(<span class=\"number\">1</span>, n) &lt;&lt;<span class=\"built_in\">endl</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"最大生成树\"><a href=\"#最大生成树\" class=\"headerlink\" title=\"最大生成树\"></a>最大生成树</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//#include &lt;bits/stdc++.h&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bitset&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;list&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//#include &lt;array&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iterator&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cassert&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pdi;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;ll, <span class=\"keyword\">int</span>&gt; pli;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> maxn = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ll INFL = <span class=\"number\">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">lc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>  </span>&#123;<span class=\"keyword\">return</span> x &lt;&lt; <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">rc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>  </span>&#123;<span class=\"keyword\">return</span> x &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> u, v, w;</span><br><span class=\"line\">    node(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp;u = <span class=\"number\">0</span>, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp;v = <span class=\"number\">0</span>, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp;w = <span class=\"number\">0</span>) : </span><br><span class=\"line\">        u(u), v(v), w(w) &#123; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> node &amp;x) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> w &gt; x.w;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;e[maxn &lt;&lt; <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> fa[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// cnt = 0;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++)  &#123;</span><br><span class=\"line\">        fa[i] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x == fa[x] ? x : fa[x] = find(fa[x]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">unio</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> fx = find(x), fy = find(y);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fx == fy) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    fa[fx] = fy;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">MST</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    sort(e + <span class=\"number\">1</span>, e + <span class=\"number\">1</span> + m);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = INF;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = e[i].u, v = e[i].v, w = e[i].w;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (unio(u, v)) &#123;</span><br><span class=\"line\">            ans = min(w, ans);</span><br><span class=\"line\">            cnt++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cnt == n - <span class=\"number\">1</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (find(<span class=\"number\">1</span>) == find(n)) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> t, nt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">        init(n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> u, v, w;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; e[i].u &gt;&gt; e[i].v &gt;&gt; e[i].w;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans = MST();</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Scenario #\"</span> &lt;&lt; ++nt &lt;&lt; <span class=\"string\">\":\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"POJ-1426-水题\"><a href=\"#POJ-1426-水题\" class=\"headerlink\" title=\"POJ-1426 水题\"></a><a href=\"https://vjudge.net/problem/POJ-1426\" target=\"_blank\" rel=\"noopener\">POJ-1426</a> 水题</h1><h2 id=\"题意-1\"><a href=\"#题意-1\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>给定一个正整数n，求n的非0倍数，且只包含0和1的数字。</p>\n<h2 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>两种状态，$x = x * 10 ,x = x * 10 + 1$，暴力$DFS$。</p>\n<h2 id=\"AC代码-1\"><a href=\"#AC代码-1\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//#include &lt;bits/stdc++.h&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bitset&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;list&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//#include &lt;array&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iterator&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cassert&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pdi;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;ll, <span class=\"keyword\">int</span>&gt; pli;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> maxn = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ll INFL = <span class=\"number\">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">lc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>  </span>&#123;<span class=\"keyword\">return</span> x &lt;&lt; <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">rc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>  </span>&#123;<span class=\"keyword\">return</span> x &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">dfs</span><span class=\"params\">(ull x, <span class=\"keyword\">int</span> step)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (step &gt; <span class=\"number\">19</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x % n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; x &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dfs(x * <span class=\"number\">10</span>, step + <span class=\"number\">1</span>)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dfs(x * <span class=\"number\">10</span> + <span class=\"number\">1</span>, step + <span class=\"number\">1</span>)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">cin</span> &gt;&gt; n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        dfs(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"CF-1037D-验证BFS序，好题！\"><a href=\"#CF-1037D-验证BFS序，好题！\" class=\"headerlink\" title=\"CF-1037D 验证BFS序，好题！\"></a>CF-1037D 验证BFS序，好题！</h1><h2 id=\"题意-2\"><a href=\"#题意-2\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>$BFS$算法定义如下：</p>\n<ol>\n<li>设想有一个顶点编号从 $1$ 到 $n$ 的无向图。初始化 $q$ 为一个只包含顶点 $1$ 的新队列，并将顶点 $1$ 标记为已使用。</li>\n<li>从队列 $q$ 的头部提取顶点 $v$ 。</li>\n<li>打印顶点 $v$ 的下标。</li>\n<li>以任意顺序遍历所有与 $v$ 相邻的且未被使用的顶点 $u$ 。将顶点 $u$ 标记为已使用，并将其插入队列 $q$ 的尾部。</li>\n<li>如果队列不是空的，则从步骤 <code>2</code> 继续。</li>\n<li>否则结束。</li>\n</ol>\n<p>给定一棵结点编号从<code>1</code>到<code>n</code>的无根树，以及一个BFS序列，问该BFS序列是否为合法的树的BFS序列。保证BFS算法必从结点<code>1</code>开始，但BFS序列的第一个结点未必是<code>1</code>。</p>\n<h2 id=\"分析-2\"><a href=\"#分析-2\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>一开始写了朴素的$BFS$wa on test11，然后再次读题，是随机取点，就该成记录层次验证。但是没想到wa on test4了。</p>\n<p>思考后发现理由如下：</p>\n<p>如图：</p>\n<p>1 2</p>\n<p>1 4</p>\n<p>2 3</p>\n<p>2 5</p>\n<p>4 6</p>\n<p>BFS序列：1 4 2 3 5 6，其对应层次序列没问题，但是4先入队，所以节点6应该在3 5之前。其先后顺序无法通过深度记录下来。</p>\n<ul>\n<li>对于每个节点的先后顺序，可以先记录每个顶点在给定序列中的位置。</li>\n<li>然后把邻接表内可达点的顺序，按照位置排序。</li>\n<li>进行BFS，比较最终的序列是否和给定序列一致。</li>\n</ul>\n<p>复杂度分析：每次进行排序的复杂度是$O(nlogn)$，跑一次$BFS$为$O(n)$，所以预计复杂度在$O(nlogn^2)$左右。</p>\n<h2 id=\"AC代码-2\"><a href=\"#AC代码-2\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//#include &lt;bits/stdc++.h&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bitset&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;list&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//#include &lt;array&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iterator&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cassert&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pdi;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;ll, <span class=\"keyword\">int</span>&gt; pli;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> maxn = <span class=\"number\">200000</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ll INFL = <span class=\"number\">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">lc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>  </span>&#123;<span class=\"keyword\">return</span> x &lt;&lt; <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">rc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>  </span>&#123;<span class=\"keyword\">return</span> x &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans[maxn];</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; e[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> vis[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> pos[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"keyword\">int</span> root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; q;</span><br><span class=\"line\">    q.push(root);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = q.front();</span><br><span class=\"line\">        ans[cnt++] = u;</span><br><span class=\"line\">        q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (vis[u]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        vis[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;v : e[u]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!vis[v]) q.push(v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u, v;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class=\"line\">        e[u].push_back(v);</span><br><span class=\"line\">        e[v].push_back(u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; a[i];</span><br><span class=\"line\">        pos[a[i]] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        sort(e[i].begin(), e[i].end(), [](<span class=\"keyword\">int</span> <span class=\"keyword\">const</span> &amp;x, <span class=\"keyword\">int</span> <span class=\"keyword\">const</span> &amp;y)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> pos[x] &lt; pos[y];</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bfs(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a[i] != ans[i]) &#123;</span><br><span class=\"line\">            flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// cout &lt;&lt; endl;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (flag) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"No\"</span> &lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Yes\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"POJ-3279-二进制状态压缩-暴力-，好题\"><a href=\"#POJ-3279-二进制状态压缩-暴力-，好题\" class=\"headerlink\" title=\"POJ - 3279  二进制状态压缩+暴力 ，好题\"></a><a href=\"https://vjudge.net/problem/17522/origin\" target=\"_blank\" rel=\"noopener\">POJ - 3279 </a> 二进制状态压缩+暴力 ，好题</h1><h2 id=\"题意-3\"><a href=\"#题意-3\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>有一个01矩阵，每次改变一格同时也会反转它上下左右的格子。问对于每个格子，最少操作多少次，可以矩阵全为0。若是不可能，输出$IMPOSSIBLE$。</p>\n<h2 id=\"分析-3\"><a href=\"#分析-3\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>本题在思维上算是贪心。每次改定上下左右和自身。若是改动偶数次，就会还原成原始状态，所以最少的方案就是每个格子最多改动一次。</p>\n<ul>\n<li><p>再考虑格子间的关系，当我们翻转一个格子的时候，会影响上下左右的格子，所以我们以上一行为基础进行翻转，当上一行为1时，就改变当前格子，这样就不会影响上一行的其他格子，当翻转完成后，只需要看最后一行是否全部是0即可，若是代表次方案可行。</p>\n</li>\n<li><p>我们<strong>枚举第一行的状态</strong>，$2^m$种情况，根据第一行状态压缩枚举，来进行各种情况的翻转。</p>\n</li>\n<li><p>若最后一行全是0，且翻转次数小于以前的方案就可以更新答案。</p>\n</li>\n</ul>\n<h2 id=\"AC代码-3\"><a href=\"#AC代码-3\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//#include &lt;bits/stdc++.h&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bitset&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;list&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//#include &lt;array&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iterator&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cassert&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pdi;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;ll, <span class=\"keyword\">int</span>&gt; pli;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> maxn = <span class=\"number\">15</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ll INFL = <span class=\"number\">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">lc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>  </span>&#123;<span class=\"keyword\">return</span> x &lt;&lt; <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">rc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>  </span>&#123;<span class=\"keyword\">return</span> x &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> m, n;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[maxn][maxn], g[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> dir[<span class=\"number\">4</span>][<span class=\"number\">2</span>] = &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> mp[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">checkpos</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span> || x &gt;= n || y &lt; <span class=\"number\">0</span> || y &gt;= m) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">change</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">    cnt++;</span><br><span class=\"line\">    mp[x][y] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    g[x][y] ^= <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tx = x + dir[i][<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ty = y + dir[i][<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (checkpos(tx, ty)) &#123;</span><br><span class=\"line\">            g[tx][ty] ^= <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(g, a, <span class=\"keyword\">sizeof</span>(g));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(mp, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(mp));</span><br><span class=\"line\">    cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v &amp; (<span class=\"number\">1</span> &lt;&lt; (m - <span class=\"number\">1</span> - i))) change(<span class=\"number\">0</span>, i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (g[i - <span class=\"number\">1</span>][j]) &#123;</span><br><span class=\"line\">                change(i, j);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (g[n - <span class=\"number\">1</span>][i]) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// FAST_IO;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m; j++) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; a[i][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = INF;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; (<span class=\"number\">1</span> &lt;&lt; m); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (check(i) &amp;&amp; cnt &lt; ans) &#123;</span><br><span class=\"line\">            ans = cnt;</span><br><span class=\"line\">            p = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ans != INF) &#123;</span><br><span class=\"line\">        check(p);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m; j++) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; mp[i][j];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (j &lt; m - <span class=\"number\">1</span>) <span class=\"built_in\">cout</span> &lt;&lt;<span class=\"string\">\" \"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"IMPOSSIBLE\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","link":"","categories":[{"name":"ACM","slug":"ACM","permalink":"http://yoursite.com/categories/ACM/"},{"name":"题解","slug":"ACM/题解","permalink":"http://yoursite.com/categories/ACM/%E9%A2%98%E8%A7%A3/"},{"name":"寒假","slug":"ACM/题解/寒假","permalink":"http://yoursite.com/categories/ACM/%E9%A2%98%E8%A7%A3/%E5%AF%92%E5%81%87/"}],"tags":[{"name":"最短路","slug":"最短路","permalink":"http://yoursite.com/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"},{"name":"搜索","slug":"搜索","permalink":"http://yoursite.com/tags/%E6%90%9C%E7%B4%A2/"},{"name":"状压","slug":"状压","permalink":"http://yoursite.com/tags/%E7%8A%B6%E5%8E%8B/"}]},{"title":"寒假练习（一）最短路和二分","date":"2020-01-11T13:27:52.000Z","path":"2020/01/11/200111/","text":"​ 寒假开始，最近一段时间开始了寒假训练。这段时间如果没有别的事情，争取每天多刷题。每天都抽点空写写题解，写写刷题收获。 POJ - 2387 Dijkstra题意​ 一个无向图，起点为1，终点为N的最短路，保证有解。 ​ 一个最短路的裸题。。。直接上熟悉的Dijkstra代码，堆优化复杂度$O(NlogN)$。 AC代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293//#include &lt;bits/stdc++.h&gt;#include &lt;iostream&gt;#include &lt;iomanip&gt;#include &lt;bitset&gt;#include &lt;string&gt;#include &lt;set&gt;#include &lt;stack&gt;#include &lt;sstream&gt;#include &lt;list&gt;//#include &lt;array&gt;#include &lt;vector&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;memory&gt;#include &lt;iterator&gt;#include &lt;climits&gt;#include &lt;cassert&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;using namespace std;#define FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)#define all(x) (x).begin(), (x).end()typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;typedef pair&lt;int, int&gt; pdi;typedef pair&lt;ll, int&gt; pli;int const maxn = 2000 + 10;const int INF = 0x3f3f3f3f;const ll INFL = 0x3f3f3f3f3f3f3f3f;inline int lc(int x) &#123;return x &lt;&lt; 1;&#125;inline int rc(int x) &#123;return x &lt;&lt; 1 | 1;&#125;int dis[maxn];struct node &#123; int v, w, next;&#125;e[maxn &lt;&lt; 1];int head[maxn], cnt, vis[maxn];void init() &#123; cnt = 0; memset(head, -1, sizeof(head)); memset(vis, 0, sizeof(vis));&#125;void add(int u, int v, int w) &#123; e[cnt].v = v; e[cnt].w = w; e[cnt].next = head[u]; head[u] = cnt++;&#125;int dijkstra(int s, int ed) &#123; memset(dis, 0x3f, sizeof(dis)); priority_queue&lt;pair&lt;int, int&gt; &gt; q; dis[s] = 0; q.push(&#123;0, s&#125;); while (!q.empty()) &#123; int u = q.top().second; q.pop(); if (vis[u]) continue; vis[u] = 1; for (int i = head[u]; ~i; i = e[i].next) &#123; int v = e[i].v, w = e[i].w; if (dis[v] &gt; dis[u] + w) &#123; dis[v] = dis[u] + w; q.push(&#123;-dis[v], v&#125;); &#125; &#125; &#125; return dis[ed];&#125;int main(void) &#123; FAST_IO; init(); int t, n; cin &gt;&gt; t &gt;&gt; n; for (int i = 0; i &lt; t; i++) &#123; int u, v, w; cin &gt;&gt; u &gt;&gt; v &gt;&gt; w; add(u, v, w); add(v, u, w); &#125; cout &lt;&lt; dijkstra(1, n) &lt;&lt; endl; return 0;&#125; POJ - 3660 Floyd题意​ 有n个牛打架，已经知道了m条打架结果，求出可以得到具体名称牛的个数。 分析​ 当看到确定排名的时候，第一个想到的就是拓扑排序。虽然感觉并查集找连通个数，然后拓扑排序也可以AC。但这题在最短路专题里，就去想了想最短路的方法。 ​ 若是已知 a与b有关系，b与c有关系，则可以推出a与c有关系。例如 a//b b//c 则 a//c 。这就是一种传递的关系，离散数学上的传递闭包。 ​ 根据Floyd公式$dp[i][j] = dp[i][k] + dp[k][j]$，则设$a[i][j] = 1$表示$i 到 j有关系$，则可以推出闭包公式 1234567void Floyd()&#123; for(int k=0; k&lt;=n; ++k) for(int i=0; i&lt;=n; ++i) for(int j=0; j&lt;=n; ++j) a[i][j] = a[i][j] || (a[i][k] &amp;&amp; a[k][j]);&#125; ​ 而当对象$a$确定关系的个数总和，及$cnt(a &gt; j) + cnt(a &lt; j)=n-1$,则表示$a$的结果可以确定。 AC代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172//#include &lt;bits/stdc++.h&gt;#include &lt;iostream&gt;#include &lt;iomanip&gt;#include &lt;bitset&gt;#include &lt;string&gt;#include &lt;set&gt;#include &lt;stack&gt;#include &lt;sstream&gt;#include &lt;list&gt;//#include &lt;array&gt;#include &lt;vector&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;memory&gt;#include &lt;iterator&gt;#include &lt;climits&gt;#include &lt;cassert&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;using namespace std;#define FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)#define all(x) (x).begin(), (x).end()typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;typedef pair&lt;int, int&gt; pdi;typedef pair&lt;ll, int&gt; pli;int const maxn = 100 + 10;const int INF = 0x3f3f3f3f;const ll INFL = 0x3f3f3f3f3f3f3f3f;inline int lc(int x) &#123;return x &lt;&lt; 1;&#125;inline int rc(int x) &#123;return x &lt;&lt; 1 | 1;&#125;int a[maxn][maxn];int main(void) &#123; FAST_IO; int n, m; cin &gt;&gt; n &gt;&gt; m; for (int i = 1; i &lt;= m; i++) &#123; int u, v; cin &gt;&gt; u &gt;&gt; v; a[u][v] = 1; &#125; // 求传递闭包 for (int k = 1; k &lt;= n; k++) &#123; for (int i = 1; i &lt;= n; i++) &#123; for (int j = 1; j &lt;= n; j++) &#123; if (a[i][k] &amp;&amp; a[k][j]) &#123; a[i][j] = 1; &#125; &#125; &#125; &#125; int ans = 0; for (int i = 1; i &lt;= n; i++) &#123; int temp = 0; for (int j = 1; j &lt;= n; j++) &#123; if (a[i][j] || a[j][i]) temp++; &#125; // 若确定关系个数为n-1个，则排名确定 if (temp == n - 1) ans++; &#125; cout &lt;&lt; ans &lt;&lt; endl; return 0;&#125; HDU - 2612 两次BFS题意​ Y和M要去同一家KFC见面。要去求出Y和M到KFC最少的总时间。 分析​ 一个二维平面最短路问题。其实就是个有点麻(s)烦(b)的$BFS$。方法有很多，可以跑两次BFS，找出Y和M都可以到达的KFC中总用时最短的。 ​ 我的解法类似，但不想写2个函数，就用一个标记表示是Y还是M的路径。使用一个队列完成两次BFS。 AC代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117//#include &lt;bits/stdc++.h&gt;#include &lt;iostream&gt;#include &lt;iomanip&gt;#include &lt;bitset&gt;#include &lt;string&gt;#include &lt;set&gt;#include &lt;stack&gt;#include &lt;sstream&gt;#include &lt;list&gt;//#include &lt;array&gt;#include &lt;vector&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;memory&gt;#include &lt;iterator&gt;#include &lt;climits&gt;#include &lt;cassert&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;using namespace std;#define FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)#define all(x) (x).begin(), (x).end()typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;typedef pair&lt;int, int&gt; pdi;typedef pair&lt;ll, int&gt; pli;int const maxn = 200 + 10;const int INF = 0x3f3f3f3f;const ll INFL = 0x3f3f3f3f3f3f3f3f;inline int lc(int x) &#123;return x &lt;&lt; 1;&#125;inline int rc(int x) &#123;return x &lt;&lt; 1 | 1;&#125;int n, m;int vis1[maxn][maxn];int vis2[maxn][maxn];int mp2[maxn][maxn];char mp[maxn][maxn];int dis1[maxn][maxn], dis2[maxn][maxn];struct node &#123; int x, y, step, v; node(int x = 0, int y = 0, int step = 0, int v = 0) : x(x), y(y), step(step), v(v) &#123; &#125;&#125;;int const dir[4][2] = &#123;1, 0, 0, 1, -1, 0, 0, -1&#125;;int x1, x2, y1, y2;void bfs() &#123; queue&lt;node&gt; q; q.push(node(x1, y1, 0, 1)); q.push(node(x2, y2, 0, 2)); while (!q.empty()) &#123; node tq = q.front(); q.pop(); for (int i = 0; i &lt; 4; i++) &#123; int tx = tq.x + dir[i][0]; int ty = tq.y + dir[i][1]; if (tx &gt;= 0 &amp;&amp; tx &lt; n &amp;&amp; ty &gt;= 0 &amp;&amp; ty &lt; m &amp;&amp; mp[tx][ty] != '#') &#123; if (tq.v == 1) &#123; if (vis1[tx][ty]) continue; q.push(node(tx, ty, tq.step + 1, 1)); vis1[tx][ty] = 1; dis1[tx][ty] = tq.step + 1; &#125; else &#123; if (vis2[tx][ty]) continue; q.push(node(tx, ty, tq.step + 1, 2)); vis2[tx][ty] = 1; dis2[tx][ty] = tq.step + 1; &#125; &#125; &#125; &#125;&#125;int main(void) &#123; FAST_IO; while (cin &gt;&gt; n &gt;&gt; m) &#123; memset(dis1, 0x3f, sizeof(dis1)); memset(dis2, 0x3f, sizeof(dis2)); memset(vis1, 0, sizeof(vis1)); memset(vis2, 0, sizeof(vis2)); for (int i = 0; i &lt; n; i++) &#123; cin &gt;&gt; mp[i]; for (int j = 0; j &lt; m; j++) &#123; if (mp[i][j] == 'Y') &#123; x1 = i, y1 = j; &#125; if (mp[i][j] == 'M') &#123; x2 = i, y2 = j; &#125; &#125; &#125; vis1[x1][y1] = vis1[x2][y2] = 1; vis2[x1][y1] = vis2[x2][y2] = 1; dis1[x1][y1] = 0; dis2[x2][y2] = 0; bfs(); int ans = INF; for (int i = 0; i &lt; n; i++) &#123; for (int j = 0; j &lt; m; j++) &#123; if (mp[i][j] == '@' &amp;&amp; dis1[i][j] != INF &amp;&amp; dis2[i][j] != INF &amp;&amp; dis1[i][j] + dis2[i][j] &lt;= ans) &#123; ans = dis1[i][j] + dis2[i][j]; &#125; &#125; &#125; cout &lt;&lt; ans * 11 &lt;&lt; endl; &#125; return 0;&#125; HDU - 1875 MST题意​ 有N个岛屿，现在需要施工，要求让N个岛屿全都连通，并且2个小岛之间的距离不能小于10米，也不能大于1000米，并且花费最小。若是无法实现，则输出”oh!”。 分析​ 还是最小生成树的裸题，是需要判断岛$i-&gt;j$的距离大于等于10小于等于1000就行了。 AC代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122//#include &lt;bits/stdc++.h&gt;#include &lt;iostream&gt;#include &lt;iomanip&gt;#include &lt;bitset&gt;#include &lt;string&gt;#include &lt;set&gt;#include &lt;stack&gt;#include &lt;sstream&gt;#include &lt;list&gt;//#include &lt;array&gt;#include &lt;vector&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;memory&gt;#include &lt;iterator&gt;#include &lt;climits&gt;#include &lt;cassert&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;using namespace std;#define FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)#define all(x) (x).begin(), (x).end()typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;typedef pair&lt;int, int&gt; pdi;typedef pair&lt;ll, int&gt; pli;int const maxn = 100 * 100 + 10;const int INF = 0x3f3f3f3f;const ll INFL = 0x3f3f3f3f3f3f3f3f;inline int lc(int x) &#123;return x &lt;&lt; 1;&#125;inline int rc(int x) &#123;return x &lt;&lt; 1 | 1;&#125;struct point &#123; int x, y; point(const int &amp;x = 0, const int &amp;y = 0) : x(x), y(y) &#123; &#125;&#125;p[maxn];double dis(point &amp;x, point &amp;y) &#123; return sqrt((x.x - y.x) * (x.x - y.x) + (x.y - y.y) * (x.y - y.y));&#125;struct node &#123; int u, v; double w; bool operator&lt;(const node &amp;x) const &#123; return w &lt; x.w; &#125;&#125;e[maxn];int fa[maxn];int cnt, setnum;bool check(const double &amp;w1) &#123; if (w1 &lt; 10 || w1 &gt; 1000) return false; return true;&#125;int find(int x) &#123; return x == fa[x] ? x : fa[x] = find(fa[x]);&#125;bool unio(int x, int y) &#123; int fx = find(x), fy = find(y); if (fx != fy) &#123; fa[fx] = fy; return false; &#125; return true;&#125;void init(int n) &#123; cnt = 0; setnum = n; for (int i = 0; i &lt;= n; i++) &#123; fa[i] = i; &#125;&#125;double kruskal() &#123; sort(e, e + cnt); double ans = 0; for (int i = 0; i &lt; cnt; i++) &#123; if (!unio(e[i].u, e[i].v)) &#123; setnum--; ans += e[i].w; &#125; &#125; return ans;&#125;int main(void) &#123; FAST_IO; int t; cin &gt;&gt; t; while(t--) &#123; int n; cin &gt;&gt; n; init(n); for (int i = 0; i &lt; n; i++) &#123; cin &gt;&gt; p[i].x &gt;&gt; p[i].y; &#125; for (int i = 0; i &lt; n; i++) &#123; for (int j = i + 1; j &lt; n; j++) &#123; double w = dis(p[i], p[j]); if (check(w)) &#123; e[cnt++] = &#123;i, j, w&#125;; &#125; &#125; &#125; double ans = kruskal(); if (setnum != 1) cout &lt;&lt; \"oh!\" &lt;&lt; endl; else cout &lt;&lt; fixed &lt;&lt; setprecision(1) &lt;&lt; ans * 100 &lt;&lt; endl; &#125; return 0;&#125; POJ - 2018 二分题意​ 给定一个正整数数列，求一个平均数最大的，长度不小于L的子段。 分析​ 蓝书上经典二分答案判定。 ​ 若二分的值域为长度&gt;=L子段的平均值，则可以把数组中的每个数字减去这个值，就转换成了“是否存在一个长度不小L的子段和&gt;=0”的问题。 ​ 而对于这个问题的判断，可以在$O(N)$的时间复杂度内实现。使用前缀和的性质，子段和可以转换成前缀和减法。即： $max_{i - j \\leq L} { A_{j + 1} + A_{j + 2} + … + A_{i} } = max_{i - j \\leq L} { sum_i - min_{0 \\leq j \\leq i - L }(sum_j) }$ ​ 随着i的增长，j的取值范围$[0,i - L]$都没增大，所以只需要每次枚举j，记录最小的$sum[i - L]$就行了。 ​ 总复杂度：check函数$O(N)$，二分$O(logN)$，总共为$O(NlogN)$ AC代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071//#include &lt;bits/stdc++.h&gt;#include &lt;iostream&gt;#include &lt;iomanip&gt;#include &lt;bitset&gt;#include &lt;string&gt;#include &lt;set&gt;#include &lt;stack&gt;#include &lt;sstream&gt;#include &lt;list&gt;// #include &lt;array&gt;#include &lt;vector&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;memory&gt;#include &lt;iterator&gt;#include &lt;climits&gt;#include &lt;cassert&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;using namespace std;#define FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)#define all(x) (x).begin(), (x).end()typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;typedef pair&lt;int, int&gt; pdi;typedef pair&lt;ll, int&gt; pli;int const maxn = 1e5 + 10;inline int lc(int x) &#123;return x &lt;&lt; 1;&#125;inline int rc(int x) &#123;return x &lt;&lt; 1 | 1;&#125;double a[maxn], b[maxn], sum[maxn];int main(void) &#123; // FAST_IO; int n, L; // cin &gt;&gt; n &gt;&gt; L; scanf(\"%d %d\", &amp;n, &amp;L); for (int i = 1; i &lt;= n; i++) &#123; // cin &gt;&gt; a[i]; scanf(\"%lf\", &amp;a[i]); &#125; double eps = 1e-5; double l = -1e6, r = 1e6; while (r - l &gt; eps) &#123; double mid = (l + r) / 2; for (int i = 1; i &lt;= n; i++) &#123; b[i] = a[i] - mid; &#125; for (int i = 1; i &lt;= n; i++) &#123; sum[i] = (sum[i - 1] + b[i]); &#125; double ans = -1e10; double min_val = 1e10; for (int i = L; i &lt;= n; i++) &#123; min_val = min(min_val, sum[i - L]); ans = max(ans, sum[i] - min_val); &#125; if (ans &gt;= 0) l = mid; else r = mid; &#125; // cout &lt;&lt; (int)(r * 1000) &lt;&lt; endl; printf(\"%d\\n\", (int)(r * 1000)); return 0;&#125; 总结​ 今天寒假开始第一天，写了一些题。但大多还是都是水题、裸题。。。就当状态康复吧。 ​ 今天这些题中，比较的经典的：floyd求传递闭包、二分答案求子段和，这两题还是挺具有代表性，比较增长视野的。","content":"<p>​       寒假开始，最近一段时间开始了寒假训练。这段时间如果没有别的事情，争取每天多刷题。每天都抽点空写写题解，写写刷题收获。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"POJ-2387-Dijkstra\"><a href=\"#POJ-2387-Dijkstra\" class=\"headerlink\" title=\"POJ - 2387 Dijkstra\"></a><a href=\"https://vjudge.net/problem/POJ-2387\" target=\"_blank\" rel=\"noopener\">POJ - 2387</a> Dijkstra</h1><h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>​        一个无向图，起点为1，终点为N的最短路，保证有解。</p>\n<p>​        一个最短路的裸题。。。直接上熟悉的Dijkstra代码，堆优化复杂度$O(NlogN)$。</p>\n<h2 id=\"AC代码\"><a href=\"#AC代码\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//#include &lt;bits/stdc++.h&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bitset&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;list&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//#include &lt;array&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iterator&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cassert&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pdi;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;ll, <span class=\"keyword\">int</span>&gt; pli;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> maxn = <span class=\"number\">2000</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ll INFL = <span class=\"number\">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">lc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>  </span>&#123;<span class=\"keyword\">return</span> x &lt;&lt; <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">rc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>  </span>&#123;<span class=\"keyword\">return</span> x &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> dis[maxn];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> v, w, next;</span><br><span class=\"line\">&#125;e[maxn &lt;&lt; <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> head[maxn], cnt, vis[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(head, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(head));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> w)</span> </span>&#123;</span><br><span class=\"line\">    e[cnt].v = v;</span><br><span class=\"line\">    e[cnt].w = w;</span><br><span class=\"line\">    e[cnt].next = head[u];</span><br><span class=\"line\">    head[u] = cnt++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dijkstra</span><span class=\"params\">(<span class=\"keyword\">int</span> s, <span class=\"keyword\">int</span> ed)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dis, <span class=\"number\">0x3f</span>, <span class=\"keyword\">sizeof</span>(dis));    </span><br><span class=\"line\">    priority_queue&lt;pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; &gt; q;</span><br><span class=\"line\">    dis[s] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    q.push(&#123;<span class=\"number\">0</span>, s&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = q.top().second;</span><br><span class=\"line\">        q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (vis[u]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        vis[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = head[u]; ~i; i = e[i].next) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v = e[i].v, w = e[i].w;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dis[v] &gt; dis[u] + w) &#123;</span><br><span class=\"line\">                dis[v] = dis[u] + w;</span><br><span class=\"line\">                q.push(&#123;-dis[v], v&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dis[ed];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">    init();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t, n;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; t &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; t; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u, v, w;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class=\"line\">        add(u, v, w);</span><br><span class=\"line\">        add(v, u, w);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; dijkstra(<span class=\"number\">1</span>, n) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"POJ-3660-Floyd\"><a href=\"#POJ-3660-Floyd\" class=\"headerlink\" title=\"POJ - 3660 Floyd\"></a><a href=\"https://vjudge.net/problem/POJ-3660\" target=\"_blank\" rel=\"noopener\">POJ - 3660</a> Floyd</h1><h2 id=\"题意-1\"><a href=\"#题意-1\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>​        有n个牛打架，已经知道了m条打架结果，求出可以得到具体名称牛的个数。</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>​        当看到确定排名的时候，第一个想到的就是拓扑排序。虽然感觉并查集找连通个数，然后拓扑排序也可以AC。但这题在最短路专题里，就去想了想最短路的方法。</p>\n<p>​        若是已知 a与b有关系，b与c有关系，则可以推出a与c有关系。例如 <strong><em>a//b   b//c  则 a//c</em></strong> 。这就是一种传递的关系，离散数学上的传递闭包。</p>\n<p>​        根据Floyd公式$dp[i][j] = dp[i][k] + dp[k][j]$，则设$a[i][j] = 1$表示$i 到 j有关系$，则可以推出闭包公式</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Floyd</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">0</span>; k&lt;=n; ++k)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;=n; ++i)</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>; j&lt;=n; ++j)</span><br><span class=\"line\">                a[i][j] = a[i][j] || (a[i][k] &amp;&amp; a[k][j]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​       而当对象$a$确定关系的个数总和，及$cnt(a &gt; j) + cnt(a &lt; j)=n-1$,则表示$a$的结果可以确定。</p>\n<h2 id=\"AC代码-1\"><a href=\"#AC代码-1\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//#include &lt;bits/stdc++.h&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bitset&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;list&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//#include &lt;array&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iterator&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cassert&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pdi;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;ll, <span class=\"keyword\">int</span>&gt; pli;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> maxn = <span class=\"number\">100</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ll INFL = <span class=\"number\">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">lc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>  </span>&#123;<span class=\"keyword\">return</span> x &lt;&lt; <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">rc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>  </span>&#123;<span class=\"keyword\">return</span> x &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[maxn][maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u, v;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class=\"line\">        a[u][v] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 求传递闭包</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &lt;= n; k++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (a[i][k] &amp;&amp; a[k][j]) &#123;</span><br><span class=\"line\">                    a[i][j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a[i][j] || a[j][i]) temp++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 若确定关系个数为n-1个，则排名确定</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp == n - <span class=\"number\">1</span>) ans++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"HDU-2612-两次BFS\"><a href=\"#HDU-2612-两次BFS\" class=\"headerlink\" title=\"HDU - 2612 两次BFS\"></a><a href=\"https://vjudge.net/problem/HDU-2612\" target=\"_blank\" rel=\"noopener\">HDU - 2612</a> 两次BFS</h1><h2 id=\"题意-2\"><a href=\"#题意-2\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>​         Y和M要去同一家KFC见面。要去求出Y和M到KFC最少的总时间。</p>\n<h2 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>​         一个二维平面最短路问题。其实就是个有点麻(s)烦(b)的$BFS$。方法有很多，可以跑两次BFS，找出Y和M都可以到达的KFC中总用时最短的。</p>\n<p>​       我的解法类似，但不想写2个函数，就用一个标记表示是Y还是M的路径。使用一个队列完成两次BFS。</p>\n<h2 id=\"AC代码-2\"><a href=\"#AC代码-2\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//#include &lt;bits/stdc++.h&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bitset&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;list&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//#include &lt;array&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iterator&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cassert&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pdi;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;ll, <span class=\"keyword\">int</span>&gt; pli;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> maxn = <span class=\"number\">200</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ll INFL = <span class=\"number\">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">lc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>  </span>&#123;<span class=\"keyword\">return</span> x &lt;&lt; <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">rc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>  </span>&#123;<span class=\"keyword\">return</span> x &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\"><span class=\"keyword\">int</span> vis1[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> vis2[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> mp2[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">char</span> mp[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dis1[maxn][maxn], dis2[maxn][maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x, y, step, v;</span><br><span class=\"line\">    node(<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>, <span class=\"keyword\">int</span> y = <span class=\"number\">0</span>, <span class=\"keyword\">int</span> step = <span class=\"number\">0</span>, <span class=\"keyword\">int</span> v = <span class=\"number\">0</span>) : x(x), y(y), step(step), v(v) &#123; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> dir[<span class=\"number\">4</span>][<span class=\"number\">2</span>] = &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> x1, x2, y1, y2;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;node&gt; q;</span><br><span class=\"line\">    q.push(node(x1, y1, <span class=\"number\">0</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\">    q.push(node(x2, y2, <span class=\"number\">0</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty()) &#123;</span><br><span class=\"line\">        node tq = q.front();</span><br><span class=\"line\">        q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tx = tq.x + dir[i][<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> ty = tq.y + dir[i][<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tx &gt;= <span class=\"number\">0</span> &amp;&amp; tx &lt; n &amp;&amp; ty &gt;= <span class=\"number\">0</span> &amp;&amp; ty &lt; m &amp;&amp; mp[tx][ty] != <span class=\"string\">'#'</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tq.v == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (vis1[tx][ty]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    q.push(node(tx, ty, tq.step + <span class=\"number\">1</span>, <span class=\"number\">1</span>));      </span><br><span class=\"line\">                    vis1[tx][ty] = <span class=\"number\">1</span>;  </span><br><span class=\"line\">                    dis1[tx][ty] = tq.step + <span class=\"number\">1</span>;        </span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (vis2[tx][ty]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    q.push(node(tx, ty, tq.step + <span class=\"number\">1</span>, <span class=\"number\">2</span>));      </span><br><span class=\"line\">                    vis2[tx][ty] = <span class=\"number\">1</span>; </span><br><span class=\"line\">                    dis2[tx][ty] = tq.step + <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(dis1, <span class=\"number\">0x3f</span>, <span class=\"keyword\">sizeof</span>(dis1));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(dis2, <span class=\"number\">0x3f</span>, <span class=\"keyword\">sizeof</span>(dis2));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(vis1, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis1));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(vis2, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis2));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; mp[i];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (mp[i][j] == <span class=\"string\">'Y'</span>) &#123;</span><br><span class=\"line\">                    x1 = i, y1 = j;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (mp[i][j] == <span class=\"string\">'M'</span>) &#123;</span><br><span class=\"line\">                    x2 = i, y2 = j;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        vis1[x1][y1] = vis1[x2][y2] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        vis2[x1][y1] = vis2[x2][y2] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        dis1[x1][y1] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        dis2[x2][y2] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        bfs();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans = INF;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (mp[i][j] == <span class=\"string\">'@'</span> &amp;&amp; dis1[i][j] != INF &amp;&amp; dis2[i][j] != INF &amp;&amp; dis1[i][j] + dis2[i][j] &lt;= ans) &#123;</span><br><span class=\"line\">                    ans = dis1[i][j] + dis2[i][j];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; ans * <span class=\"number\">11</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"HDU-1875-MST\"><a href=\"#HDU-1875-MST\" class=\"headerlink\" title=\"HDU - 1875 MST\"></a><a href=\"https://vjudge.net/problem/HDU-1875\" target=\"_blank\" rel=\"noopener\">HDU - 1875</a> MST</h1><h2 id=\"题意-3\"><a href=\"#题意-3\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>​         有N个岛屿，现在需要施工，要求让N个岛屿全都连通，并且2个小岛之间的距离不能小于10米，也不能大于1000米，并且花费最小。若是无法实现，则输出”oh!”。</p>\n<h2 id=\"分析-2\"><a href=\"#分析-2\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>​         还是最小生成树的裸题，是需要判断岛$i-&gt;j$的距离大于等于10小于等于1000就行了。</p>\n<h2 id=\"AC代码-3\"><a href=\"#AC代码-3\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//#include &lt;bits/stdc++.h&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bitset&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;list&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//#include &lt;array&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iterator&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cassert&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pdi;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;ll, <span class=\"keyword\">int</span>&gt; pli;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> maxn = <span class=\"number\">100</span> * <span class=\"number\">100</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ll INFL = <span class=\"number\">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">lc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>  </span>&#123;<span class=\"keyword\">return</span> x &lt;&lt; <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">rc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>  </span>&#123;<span class=\"keyword\">return</span> x &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">point</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x, y;</span><br><span class=\"line\">    point(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp;x = <span class=\"number\">0</span>, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp;y = <span class=\"number\">0</span>) : x(x), y(y) &#123; &#125;</span><br><span class=\"line\">&#125;p[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">dis</span><span class=\"params\">(point &amp;x, point &amp;y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sqrt</span>((x.x - y.x) * (x.x - y.x) + (x.y - y.y) * (x.y - y.y));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> u, v;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> w;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> node &amp;x) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> w &lt; x.w;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;e[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> fa[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt, setnum;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">double</span> &amp;w1)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (w1 &lt; <span class=\"number\">10</span> || w1 &gt; <span class=\"number\">1000</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x == fa[x] ? x : fa[x] = find(fa[x]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">unio</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> fx = find(x), fy = find(y);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fx != fy) &#123;</span><br><span class=\"line\">        fa[fx] = fy;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    setnum = n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        fa[i] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">kruskal</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    sort(e, e + cnt);</span><br><span class=\"line\">    <span class=\"keyword\">double</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; cnt; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!unio(e[i].u, e[i].v)) &#123;</span><br><span class=\"line\">            setnum--;</span><br><span class=\"line\">            ans += e[i].w;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> t;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">        init(n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; p[i].x &gt;&gt; p[i].y;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">double</span> w = dis(p[i], p[j]);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (check(w)) &#123;</span><br><span class=\"line\">                    e[cnt++] = &#123;i, j, w&#125;;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> ans = kruskal();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (setnum != <span class=\"number\">1</span>) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"oh!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class=\"number\">1</span>) &lt;&lt; ans * <span class=\"number\">100</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"POJ-2018-二分\"><a href=\"#POJ-2018-二分\" class=\"headerlink\" title=\"POJ - 2018  二分\"></a><a href=\"https://vjudge.net/problem/POJ-2018\" target=\"_blank\" rel=\"noopener\">POJ - 2018 </a> 二分</h1><h2 id=\"题意-4\"><a href=\"#题意-4\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>​         给定一个正整数数列，求一个平均数最大的，长度不小于L的子段。</p>\n<h2 id=\"分析-3\"><a href=\"#分析-3\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>​        蓝书上经典二分答案判定。</p>\n<p>​        若二分的值域为长度&gt;=L子段的平均值，则可以把数组中的每个数字减去这个值，就转换成了<strong>“是否存在一个长度不小L的子段和&gt;=0”</strong>的问题。</p>\n<p>​        而对于这个问题的判断，可以在$O(N)$的时间复杂度内实现。使用前缀和的性质，子段和可以转换成前缀和减法。即：</p>\n<p>$max_{i - j \\leq L} { A_{j + 1} + A_{j + 2} + … + A_{i}  } = max_{i - j \\leq L} { sum_i - min_{0 \\leq j \\leq i - L }(sum_j) }$</p>\n<p>​      随着i的增长，j的取值范围$[0,i - L]$都没增大，所以只需要每次枚举j，记录最小的$sum[i - L]$就行了。</p>\n<p>​     总复杂度：check函数$O(N)$，二分$O(logN)$，总共为$O(NlogN)$</p>\n<h2 id=\"AC代码-4\"><a href=\"#AC代码-4\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//#include &lt;bits/stdc++.h&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bitset&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;list&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// #include &lt;array&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iterator&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cassert&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pdi;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;ll, <span class=\"keyword\">int</span>&gt; pli;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> maxn = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">lc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>  </span>&#123;<span class=\"keyword\">return</span> x &lt;&lt; <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">rc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>  </span>&#123;<span class=\"keyword\">return</span> x &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">double</span> a[maxn], b[maxn], sum[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// FAST_IO;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, L;</span><br><span class=\"line\">    <span class=\"comment\">// cin &gt;&gt; n &gt;&gt; L;</span></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d\"</span>, &amp;n, &amp;L);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// cin &gt;&gt; a[i];</span></span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lf\"</span>, &amp;a[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> eps = <span class=\"number\">1e-5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> l = <span class=\"number\">-1e6</span>, r = <span class=\"number\">1e6</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (r - l &gt; eps) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> mid = (l + r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            b[i] = a[i] - mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            sum[i] = (sum[i - <span class=\"number\">1</span>] + b[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> ans = <span class=\"number\">-1e10</span>;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> min_val = <span class=\"number\">1e10</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = L; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            min_val = min(min_val, sum[i - L]);</span><br><span class=\"line\">            ans = max(ans, sum[i] - min_val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ans &gt;= <span class=\"number\">0</span>) l = mid;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> r = mid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// cout &lt;&lt; (int)(r * 1000) &lt;&lt; endl;</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, (<span class=\"keyword\">int</span>)(r * <span class=\"number\">1000</span>));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>​        今天寒假开始第一天，写了一些题。但大多还是都是水题、裸题。。。就当状态康复吧。</p>\n<p>​        今天这些题中，比较的经典的：floyd求传递闭包、二分答案求子段和，这两题还是挺具有代表性，比较增长视野的。</p>\n","link":"","categories":[{"name":"ACM","slug":"ACM","permalink":"http://yoursite.com/categories/ACM/"},{"name":"题解","slug":"ACM/题解","permalink":"http://yoursite.com/categories/ACM/%E9%A2%98%E8%A7%A3/"},{"name":"寒假","slug":"ACM/题解/寒假","permalink":"http://yoursite.com/categories/ACM/%E9%A2%98%E8%A7%A3/%E5%AF%92%E5%81%87/"}],"tags":[{"name":"最短路","slug":"最短路","permalink":"http://yoursite.com/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"},{"name":"二分","slug":"二分","permalink":"http://yoursite.com/tags/%E4%BA%8C%E5%88%86/"}]},{"title":"HihoCoder-1828 The 2018 ACM-ICPC Asia Beijing First Round  Saving Tang Monk II","date":"2019-08-31T12:33:34.000Z","path":"2019/08/31/Saving-Tang-Monk-II/","text":"题目链接 题目描述《Journey to the West》(also 《Monkey》) is one of the Four Great Classical Novels of Chinese literature. It was written by Wu Cheng’en during the Ming Dynasty. In this novel, Monkey King Sun Wukong, pig Zhu Bajie and Sha Wujing, escorted Tang Monk to India to get sacred Buddhism texts. During the journey, Tang Monk was often captured by demons. Most of demons wanted to eat Tang Monk to achieve immortality, but some female demons just wanted to marry him because he was handsome. So, fighting demons and saving Monk Tang is the major job for Sun Wukong to do. Once, Tang Monk was captured by the demon White Bones. White Bones lived in a palace and she cuffed Tang Monk in a room. Sun Wukong managed to get into the palace, and he wanted to reach Tang Monk and rescue him. The palace can be described as a matrix of characters. Different characters stand for different rooms as below: $’S’$ : The original position of Sun Wukong $’T’$ : The location of Tang Monk $’.’$ : An empty room ‘#’ : A deadly gas room. $’B’$ : A room with unlimited number of oxygen bottles. Every time Sun Wukong entered a ‘B’ room from other rooms, he would get an oxygen bottle. But staying there would not get Sun Wukong more oxygen bottles. Sun Wukong could carry at most 5 oxygen bottles at the same time. $’P’$ : A room with unlimited number of speed-up pills. Every time Sun Wukong entered a ‘P’ room from other rooms, he would get a speed-up pill. But staying there would not get Sun Wukong more speed-up pills. Sun Wukong could bring unlimited number of speed-up pills with him. Sun Wukong could move in the palace. For each move, Sun Wukong might go to the adjacent rooms in 4 directions(north, west,south and east). But Sun Wukong couldn’t get into a ‘#’ room(deadly gas room) without an oxygen bottle. Entering a ‘#’ room each time would cost Sun Wukong one oxygen bottle. Each move took Sun Wukong one minute. But if Sun Wukong ate a speed-up pill, he could make next move without spending any time. In other words, each speed-up pill could save Sun Wukong one minute. And if Sun Wukong went into a ‘#’ room, he had to stay there for one extra minute to recover his health. Since Sun Wukong was an impatient monkey, he wanted to save Tang Monk as soon as possible. Please figure out the minimum time Sun Wukong needed to reach Tang Monk. 题意根据题求最短步数，宽搜变形，优先级搜索 S: 起点 T: 重点 ‘.’: The empty room ‘#’: 有毒的房间，需要氧气瓶，并且需要多一点时间 P: 获得一个加速器，可以免去一个时间 B: 一个氧气瓶，最多可以获得5个 分析本题需要剪枝，通过每一氧气瓶的数量记录状态，$vis[x][y][b_n]$。 AC代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118//#include &lt;bits/stdc++.h&gt;#include &lt;iostream&gt;#include &lt;iomanip&gt;#include &lt;bitset&gt;#include &lt;string&gt;#include &lt;set&gt;#include &lt;stack&gt;#include &lt;sstream&gt;#include &lt;list&gt;#include &lt;array&gt;#include &lt;vector&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;memory&gt;#include &lt;iterator&gt;#include &lt;climits&gt;#include &lt;cassert&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;using namespace std;#define FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)#define all(x) (x).begin(), (x).end()typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;typedef pair&lt;int, int&gt; pdi;typedef pair&lt;ll, int&gt; pli;int const maxn = 100 + 10;inline int lc(int x) &#123;return x &lt;&lt; 1;&#125;inline int rc(int x) &#123;return x &lt;&lt; 1 | 1;&#125;int n, m;char mp[maxn][maxn];int vis[maxn][maxn][10];const int dir[4][2] = &#123;1,0,0,1,-1,0,0,-1&#125;;struct node &#123; int x, y, step, b; node(const int &amp;x = 0, const int &amp;y = 0, const int &amp;step = 0, const int &amp;b = 0) : x(x), y(y), step(step), b(b) &#123; &#125; bool operator&lt;(const node &amp;obj) const &#123; if (step == obj.step) &#123; return b &lt; obj.b; &#125; return step &gt; obj.step; &#125;&#125;;bool check(int x, int y) &#123; if (x &lt;= 0 || x &gt; n || y &lt;= 0 || y &gt; m) &#123; return false; &#125; return true;&#125;int bfs(int x, int y) &#123; priority_queue&lt;node&gt; q; q.push(node(x, y)); vis[x][y][0] = 1; while (!q.empty()) &#123; node p = q.top(); q.pop(); if (mp[p.x][p.y] == 'T') return p.step; for (int i = 0; i &lt; 4; i++) &#123; int tx = p.x + dir[i][0]; int ty = p.y + dir[i][1]; int tb = p.b; int ts = p.step + 1; if (!check(tx, ty)) continue; if (mp[tx][ty] == 'P') &#123; ts--; &#125; if (mp[tx][ty] == 'B') &#123; if (tb &lt; 5) tb++; &#125; if (mp[tx][ty] == '#') &#123; if (tb &lt;= 0) continue; tb--; ts++; &#125; if (vis[tx][ty][tb]) continue; vis[tx][ty][tb] = 1; q.push(node(tx, ty, ts, tb)); &#125; &#125; return -1;&#125;int main(void) &#123; FAST_IO; while (cin &gt;&gt; n &gt;&gt; m) &#123; if (n == 0 &amp;&amp; m == 0) break; memset(vis, 0, sizeof(vis)); for (int i = 1; i &lt;= n; i++) &#123; cin &gt;&gt; (mp[i] + 1); &#125; int statr = -1, end = -1; for (int i = 1; i &lt;= n; i++) &#123; for (int j = 1; j &lt;= m; j++) &#123; if (mp[i][j] == 'S') &#123; statr = i; end = j; break; &#125; &#125; if (statr != -1) break; &#125; cout &lt;&lt; bfs(statr, end) &lt;&lt; endl; &#125; return 0;&#125;","content":"<p><a href=\"https://cn.vjudge.net/problem/HihoCoder-1828\" target=\"_blank\" rel=\"noopener\">题目链接</a></p>\n<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>《Journey to the West》(also 《Monkey》) is one of the Four Great Classical Novels of Chinese literature. It was written by Wu Cheng’en during the Ming Dynasty. In this novel, Monkey King Sun Wukong, pig Zhu Bajie and Sha Wujing, escorted Tang Monk to India to get sacred Buddhism texts.</p>\n<a id=\"more\"></a>\n<p>During the journey, Tang Monk was often captured by demons. Most of demons wanted to eat Tang Monk to achieve immortality, but some female demons just wanted to marry him because he was handsome. So, fighting demons and saving Monk Tang is the major job for Sun Wukong to do.</p>\n<p>Once, Tang Monk was captured by the demon White Bones. White Bones lived in a palace and she cuffed Tang Monk in a room. Sun Wukong managed to get into the palace, and he wanted to reach Tang Monk and rescue him.</p>\n<p>The palace can be described as a matrix of characters. Different characters stand for different rooms as below:</p>\n<p>$’S’$ : The original position of Sun Wukong</p>\n<p>$’T’$ : The location of Tang Monk</p>\n<p>$’.’$ : An empty room</p>\n<p>‘#’ : A deadly gas room.</p>\n<p>$’B’$ : A room with unlimited number of oxygen bottles. Every time Sun Wukong entered a ‘B’ room from other rooms, he would get an oxygen bottle. But staying there would not get Sun Wukong more oxygen bottles. Sun Wukong could carry at most 5 oxygen bottles at the same time.</p>\n<p>$’P’$ : A room with unlimited number of speed-up pills. Every time Sun Wukong entered a ‘P’ room from other rooms, he would get a speed-up pill. But staying there would not get Sun Wukong more speed-up pills. Sun Wukong could bring unlimited number of speed-up pills with him.</p>\n<p>Sun Wukong could move in the palace. For each move, Sun Wukong might go to the adjacent rooms in 4 directions(north, west,south and east). But Sun Wukong couldn’t get into a ‘#’ room(deadly gas room) without an oxygen bottle. Entering a ‘#’ room each time would cost Sun Wukong one oxygen bottle.</p>\n<p>Each move took Sun Wukong one minute. But if Sun Wukong ate a speed-up pill, he could make next move without spending any time. In other words, each speed-up pill could save Sun Wukong one minute. And if Sun Wukong went into a ‘#’ room, he had to stay there for one extra minute to recover his health.</p>\n<p>Since Sun Wukong was an impatient monkey, he wanted to save Tang Monk as soon as possible. Please figure out the minimum time Sun Wukong needed to reach Tang Monk.</p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>根据题求最短步数，宽搜变形，优先级搜索</p>\n<ul>\n<li>S: 起点</li>\n<li>T: 重点</li>\n<li>‘.’: The empty room</li>\n<li>‘#’: 有毒的房间，需要氧气瓶，并且需要多一点时间</li>\n<li>P: 获得一个加速器，可以免去一个时间</li>\n<li>B: 一个氧气瓶，最多可以获得5个</li>\n</ul>\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p>本题需要剪枝，通过每一氧气瓶的数量记录状态，$vis[x][y][b_n]$。</p>\n<h1 id=\"AC代码\"><a href=\"#AC代码\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//#include &lt;bits/stdc++.h&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bitset&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;list&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iterator&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cassert&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pdi;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;ll, <span class=\"keyword\">int</span>&gt; pli;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> maxn = <span class=\"number\">100</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">lc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>  </span>&#123;<span class=\"keyword\">return</span> x &lt;&lt; <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">rc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>  </span>&#123;<span class=\"keyword\">return</span> x &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\"><span class=\"keyword\">char</span> mp[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> vis[maxn][maxn][<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> dir[<span class=\"number\">4</span>][<span class=\"number\">2</span>] = &#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">-1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x, y, step, b;</span><br><span class=\"line\">    node(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp;x = <span class=\"number\">0</span>, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp;y = <span class=\"number\">0</span>, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp;step = <span class=\"number\">0</span>, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp;b = <span class=\"number\">0</span>) </span><br><span class=\"line\">        : x(x), y(y), step(step), b(b) &#123; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> node &amp;obj) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (step == obj.step) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> b &lt; obj.b;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> step &gt; obj.step;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt;= <span class=\"number\">0</span> || x &gt; n || y &lt;= <span class=\"number\">0</span> || y &gt; m) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">    priority_queue&lt;node&gt; q;</span><br><span class=\"line\">    q.push(node(x, y));</span><br><span class=\"line\">    vis[x][y][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty()) &#123;</span><br><span class=\"line\">        node p = q.top();</span><br><span class=\"line\">        q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mp[p.x][p.y] == <span class=\"string\">'T'</span>) </span><br><span class=\"line\">            <span class=\"keyword\">return</span> p.step;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tx = p.x + dir[i][<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> ty = p.y + dir[i][<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tb = p.b;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> ts = p.step + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!check(tx, ty)) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mp[tx][ty] == <span class=\"string\">'P'</span>) &#123;</span><br><span class=\"line\">                ts--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mp[tx][ty] == <span class=\"string\">'B'</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tb &lt; <span class=\"number\">5</span>) tb++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mp[tx][ty] == <span class=\"string\">'#'</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tb &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                tb--;</span><br><span class=\"line\">                ts++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (vis[tx][ty][tb]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            vis[tx][ty][tb] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            q.push(node(tx, ty, ts, tb));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span> &amp;&amp; m == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; (mp[i] + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> statr = <span class=\"number\">-1</span>, end = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (mp[i][j] == <span class=\"string\">'S'</span>) &#123;</span><br><span class=\"line\">                    statr = i;</span><br><span class=\"line\">                    end = j;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (statr != <span class=\"number\">-1</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; bfs(statr, end) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","link":"","categories":[{"name":"ACM","slug":"ACM","permalink":"http://yoursite.com/categories/ACM/"},{"name":"题解","slug":"ACM/题解","permalink":"http://yoursite.com/categories/ACM/%E9%A2%98%E8%A7%A3/"},{"name":"2018ICPC北京","slug":"ACM/题解/2018ICPC北京","permalink":"http://yoursite.com/categories/ACM/%E9%A2%98%E8%A7%A3/2018ICPC%E5%8C%97%E4%BA%AC/"}],"tags":[{"name":"bfs","slug":"bfs","permalink":"http://yoursite.com/tags/bfs/"},{"name":"优先队列","slug":"优先队列","permalink":"http://yoursite.com/tags/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"}]},{"title":"Gemstones","date":"2019-08-10T07:33:17.000Z","path":"2019/08/10/Gemstones/","text":"题目来源：2019牛客暑期多校训练营（第八场）- G 题目描述&nbsp;&nbsp;&nbsp;&nbsp;Gromah and LZR have entered the seventh level. There are a sequence of gemstones on the wall. &nbsp;&nbsp;&nbsp;&nbsp;After some tries, Gromah discovers that one can take exactly three successive gemstones with the same types away from the gemstone sequence each time, after taking away three gemstones, the left two parts of origin sequence will be merged to one sequence in origin order automatically.&nbsp;&nbsp;&nbsp;&nbsp;For example, as for “$ATCCCTTG$”, we can take three ‘$C$’s away with two parts “$AT$”, “$TTG$” left, then the two parts will be merged to “$ATTTG$”, and we can take three ‘$T$’s next time. &nbsp;&nbsp;&nbsp;&nbsp;The password of this level is the maximum possible times to take gemstones from origin sequence. &nbsp;&nbsp;&nbsp;&nbsp;Please help them to determine the maximum times. 输入描述 Only one line containing $ a $ string $ s $ , denoting the gemstone sequence, where the same letters are regarded as the same types.$ 1\\leq \\mid s \\mid \\leq 10^5 $.$ s $ only contains uppercase letters. 输出描述 Print a non-negative integer in a single line, denoting the maximum times. ExampleInput ATCCCTTG Output 2 题意取出字符串中相同且连续的三个字母，剩下的字符串拼接再次重负操作。求最大的课操作次数。 分析运用栈后进先出的性质，用栈贪心的模拟取出操作即可。本场多校赛签到题之一。 Solve Code12345678910111213141516171819202122232425262728#include &lt;bits/stdc++.h&gt;using namespace std;#define FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;int const maxn = 1e5 + 10;char st[maxn];int main(void) &#123; FAST_IO; int top = 0; char s; int ans = 0; while (cin &gt;&gt; s) &#123; st[top++] = s; if (top &gt; 2) &#123; if (st[top - 1] == st[top - 2] &amp;&amp; st[top - 1] == st[top - 3]) &#123; ans++; top -= 3; &#125; &#125; &#125; cout &lt;&lt; ans &lt;&lt; endl; return 0;&#125;","content":"<p>题目来源：<a href=\"https://ac.nowcoder.com/acm/contest/888/G\" target=\"_blank\" rel=\"noopener\">2019牛客暑期多校训练营（第八场）- G</a></p>\n<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;Gromah and LZR have entered the seventh level. There are a sequence of gemstones on the wall.</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;After some tries, Gromah discovers that one can take exactly three successive gemstones with the same types away from the gemstone sequence each time, after taking away three gemstones, the left two parts of origin sequence will be merged to one sequence in origin order automatically.<br>&nbsp;&nbsp;&nbsp;&nbsp;For example, as for “$ATCCCTTG$”, we can take three ‘$C$’s away with two parts “$AT$”, “$TTG$” left, then the two parts will be merged to “$ATTTG$”, and we can take three ‘$T$’s next time.</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;The password of this level is the maximum possible times to take gemstones from origin sequence.</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;Please help them to determine the <strong>maximum</strong> times.</p>\n<a id=\"more\"></a>\n\n<h1 id=\"输入描述\"><a href=\"#输入描述\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h1><blockquote>\n<p>Only one line containing $ a $ string $ s $ , denoting the gemstone sequence, where the same letters are regarded as the same types.<br>$ 1\\leq \\mid s \\mid \\leq 10^5 $.<br>$ s $ only contains uppercase letters.</p>\n</blockquote>\n<h1 id=\"输出描述\"><a href=\"#输出描述\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h1><blockquote>\n<p>Print a non-negative integer in a single line, denoting the maximum times.</p>\n</blockquote>\n<h1 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h1><h2 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input\"></a>Input</h2><blockquote>\n<p>ATCCCTTG</p>\n</blockquote>\n<h2 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h2><blockquote>\n<p>2</p>\n</blockquote>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>取出字符串中相同且连续的三个字母，剩下的字符串拼接再次重负操作。求最大的课操作次数。</p>\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p>运用栈后进先出的性质，用栈贪心的模拟取出操作即可。本场多校赛签到题之一。</p>\n<h1 id=\"Solve-Code\"><a href=\"#Solve-Code\" class=\"headerlink\" title=\"Solve Code\"></a>Solve Code</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> maxn = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span> st[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> top = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> s;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">cin</span> &gt;&gt; s) &#123;</span><br><span class=\"line\">        st[top++] = s;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (top &gt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (st[top - <span class=\"number\">1</span>] == st[top - <span class=\"number\">2</span>] &amp;&amp; st[top - <span class=\"number\">1</span>] == st[top - <span class=\"number\">3</span>]) &#123;</span><br><span class=\"line\">                ans++;</span><br><span class=\"line\">                top -= <span class=\"number\">3</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","link":"","categories":[{"name":"ACM","slug":"ACM","permalink":"http://yoursite.com/categories/ACM/"},{"name":"牛客","slug":"ACM/牛客","permalink":"http://yoursite.com/categories/ACM/%E7%89%9B%E5%AE%A2/"},{"name":"多校赛","slug":"ACM/牛客/多校赛","permalink":"http://yoursite.com/categories/ACM/%E7%89%9B%E5%AE%A2/%E5%A4%9A%E6%A0%A1%E8%B5%9B/"},{"name":"题解","slug":"ACM/牛客/多校赛/题解","permalink":"http://yoursite.com/categories/ACM/%E7%89%9B%E5%AE%A2/%E5%A4%9A%E6%A0%A1%E8%B5%9B/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"模拟","slug":"模拟","permalink":"http://yoursite.com/tags/%E6%A8%A1%E6%8B%9F/"},{"name":"栈","slug":"栈","permalink":"http://yoursite.com/tags/%E6%A0%88/"},{"name":"贪心","slug":"贪心","permalink":"http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"}]},{"title":"Leetcode-19:删除链表的倒数第N个节点","date":"2019-08-06T15:17:10.000Z","path":"2019/08/06/LeetCode-19-Remove Nth Node From End of List/","text":"原题链接 题目描述给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。 示例 给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n = 2.当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5. note给定的 n 保证是有效的。 思路遍历两次列表。第一遍历用于求出链表的长度$L$，然后第二次遍历节点指针到$L-n$处，把第$L-n$的节点的next连接到第$L-n+2$节点。复杂度 $O(L)$ 。注意编写接口时的边界处理，一开始在NULL处疯狂WA。 AC代码1234567891011121314151617181920212223242526272829303132/** * Definition for singly-linked list. * struct ListNode &#123; * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: ListNode* removeNthFromEnd(ListNode* head, int n) &#123; std::ios::sync_with_stdio(false),std::cin.tie(0),std::cout.tie(0); ListNode *cntnode = head, *prenode = head; int length = 0, cnt = 0; while (cntnode) &#123; ++length; cntnode = cntnode-&gt;next; &#125; length -= n; if (!length)&#123; head = head-&gt;next; return head; &#125; while (--length) &#123; prenode = prenode-&gt;next; &#125; auto x = prenode-&gt;next; prenode-&gt;next = x-&gt;next; delete x; return head; &#125;&#125;;","content":"<p><a href=\"https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/?utm_source=LCUS&utm_medium=ip_redirect_q_uns&utm_campaign=transfer2china\" target=\"_blank\" rel=\"noopener\">原题链接</a></p>\n<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><blockquote>\n<p>给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n = 2.<br>当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5.</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"note\"><a href=\"#note\" class=\"headerlink\" title=\"note\"></a>note</h2><p>给定的 n 保证是有效的。</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>遍历两次列表。第一遍历用于求出链表的长度$L$，然后第二次遍历节点指针到$L-n$处，把第$L-n$的节点的next连接到第$L-n+2$节点。复杂度 <strong>$O(L)$</strong> 。<br><strong>注意编写接口时的边界处理，一开始在NULL处疯狂WA</strong>。</p>\n<h2 id=\"AC代码\"><a href=\"#AC代码\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * struct ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode *next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">removeNthFromEnd</span><span class=\"params\">(ListNode* head, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::ios::sync_with_stdio(<span class=\"literal\">false</span>),<span class=\"built_in\">std</span>::<span class=\"built_in\">cin</span>.tie(<span class=\"number\">0</span>),<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>.tie(<span class=\"number\">0</span>);</span><br><span class=\"line\">        ListNode *cntnode = head, *prenode = head;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = <span class=\"number\">0</span>, cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cntnode) &#123;</span><br><span class=\"line\">            ++length;</span><br><span class=\"line\">            cntnode = cntnode-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        length -= n;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!length)&#123;</span><br><span class=\"line\">            head = head-&gt;next;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (--length) &#123;</span><br><span class=\"line\">            prenode = prenode-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> x = prenode-&gt;next;</span><br><span class=\"line\">        prenode-&gt;next = x-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> x;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","link":"","categories":[{"name":"LeetCode","slug":"LeetCode","permalink":"http://yoursite.com/categories/LeetCode/"},{"name":"休闲","slug":"LeetCode/休闲","permalink":"http://yoursite.com/categories/LeetCode/%E4%BC%91%E9%97%B2/"}],"tags":[{"name":"链表","slug":"链表","permalink":"http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"}]},{"title":"牛客假日团队赛9-部分题解","date":"2019-08-05T06:19:39.000Z","path":"2019/08/05/nowcoder_team_contest09_solve_part/","text":"A-乘积最大题目链接 题意&nbsp;&nbsp;&nbsp;&nbsp;给定一个数字字符串，把字符串分成$K+1$个数，使这些数乘积最大。 分析本题最佳解法应该是区间dp但本蒟蒻不会dp。只能暴力dfs了。在串中插入*其性质和排列类似。可以参考蓝书P15递归实现排列型枚举。对于在第$i$个位置插入*分成$i$之前的为一段，及$i$和$i$之后一段。 需要注意在数字相连时的边界情况。 AC代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include &lt;bits/stdc++.h&gt;using namespace std;#define FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;const int maxn = 50;string a;int n, k;int vis[maxn];ll s[maxn];ll ans = -1;void dfs(int x) &#123; if (x == k) &#123; ll x = 1; int t = 0; memset(s, 0, sizeof(s)); s[t] = a[0] - 48; for (int i = 1; i &lt; n; i++) &#123; if (vis[i - 1]) &#123; s[++t] = (a[i] - '0'); &#125; else &#123; s[t] = s[t] * 10 + (a[i] - '0'); &#125; &#125; for (int i = 0; i &lt;= t; i++) &#123; x *= s[i]; &#125; ans = max(ans, x); return; &#125; for (int i = 0; i &lt; n - 1; i++) &#123; if (vis[i]) continue; vis[i] = 1; dfs(x + 1); vis[i] = 0; &#125;&#125;int main(void) &#123; FAST_IO; cin &gt;&gt; n &gt;&gt; k; cin &gt;&gt; a; dfs(0); cout &lt;&lt; ans &lt;&lt; endl; return 0;&#125; C-单词接龙题目链接 题意&emsp;&emsp;给定一个字符和一些字符串，按照字符串之间重叠的部分，连接字符串，求最长的连接长度。 分析&emsp;&emsp;比较经典的DFS+字符串，比较考察细节，比如字符串的模拟操作、dfs回溯的处理。&emsp;&emsp;有两种基本的思路： 对于字符串，本题数据较少，可以搜索时暴力处理。使用C++的string比较方便，但仍需要注意边界细节。(我写的时候在substr上调了好久，emmmm) 比较好的做法可以先预处理一个$num$数组，其中$num[i][j]$表示串$i$和串$j$之间可以连接的字符数。在DFS的时候使用 $num[i][j]$ 进行回溯等操作。 AC代码方法1(string暴力)12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#include &lt;bits/stdc++.h&gt;using namespace std;#define FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;int const maxn = 50;int vis[maxn];vector&lt;string&gt; v_str;int ans = 0;void dfs(string &amp;s) &#123; int flag = 0; for (int i = 0; i &lt; (int)v_str.size(); i++) &#123; if (vis[i] &gt;= 2) continue; string &amp;ts = v_str[i]; int n = 0; int len1 = (int)s.length(); int len2 = (int)ts.length(); for (int j = 0; j &lt; min(len1, len2); j++) &#123; if (ts.substr(0, j + 1) == s.substr(len1 - j - 1)) &#123; flag = 1; n = j + 1; break; &#125; &#125; if (n) &#123; vis[i]++; auto temp = s; s = s + ts.substr(n); dfs(s); s = temp; vis[i]--; &#125; &#125; if (!flag) &#123; ans = max((int)s.length(), ans); &#125;&#125;int main(void) &#123; FAST_IO; int n; cin &gt;&gt; n; for (int i = 0; i &lt; n; i++) &#123; string s; cin &gt;&gt; s; v_str.push_back(s); &#125; string s; cin &gt;&gt; s; dfs(s); cout &lt;&lt; ans &lt;&lt; endl; return 0;&#125; 方法2(预处理字符数)12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576#include &lt;bits/stdc++.h&gt;using namespace std; int n;string dc[25];int cd[25][25];int cs[25]; int mincd(int x,int y)&#123; bool p=true; int ky=0; for(int k=dc[x].size()-1;k&gt;=0;k--) &#123; for(int kx=k;kx&lt;dc[x].size();kx++) if(dc[x][kx]!=dc[y][ky++]) &#123; p=false; break; &#125; if(p==true) return dc[x].size()-k; ky=0; p=true; &#125; return 0;&#125; char sta;int ans=0;int mans=0; void dfs(int p)&#123; bool jx=false; for(int i=1;i&lt;=n;i++) &#123; if(cs[i]&gt;=2) continue; if(cd[p][i]==0) continue; if(cd[p][i]==dc[p].size() || cd[p][i]==dc[i].size()) continue; mans+=dc[i].size()-cd[p][i]; cs[i]++; jx=true; dfs(i); //接上 mans-=dc[i].size()-cd[p][i]; //回溯 cs[i]--; &#125; if(jx==false) ans=max(ans,mans); return ;&#125;int main()&#123; cin&gt;&gt;n; for(int i=1;i&lt;=n;i++) cin&gt;&gt;dc[i]; cin&gt;&gt;sta; for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=n;j++) cd[i][j]=mincd(i,j); for(int i=1;i&lt;=n;i++)&#123; if(dc[i][0]==sta)&#123; cs[i]++; mans=dc[i].size(); dfs(i); cs[i]=0; &#125; &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125; D-Cow Line题目链接 题意&emsp;&emsp;有一些人排队，允许进行以下四种操作： A L —– 从左边插入一人 A R —– 从右边插入一人 D L N —– 从左边走出N人 D R N —– 从右边走出N人 &emsp;&emsp;问最后队伍中的序号。 分析&emsp;&emsp;用双端队列$deque$模拟入队出队，即可。复杂度$O(N)$ AC代码123456789101112131415161718192021222324252627282930313233343536373839#include &lt;bits/stdc++.h&gt;using namespace std;#define FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;deque&lt;int&gt; q;int main(void) &#123; FAST_IO; int n; cin &gt;&gt; n; string opt, dir; int num = 0, k; while (n--) &#123; cin &gt;&gt; opt &gt;&gt; dir; if (opt == \"A\") &#123; if (dir == \"L\") &#123; q.push_front(++num); &#125; else &#123; q.push_back(++num); &#125; &#125; else &#123; cin &gt;&gt; k; if (dir == \"L\") &#123; for (int i = 0; i &lt; k &amp;&amp; !q.empty(); i++) q.pop_front(); &#125; else &#123; for (int i = 0; i &lt; k &amp;&amp; !q.empty(); i++) q.pop_back(); &#125; &#125; &#125; while (!q.empty()) &#123; cout &lt;&lt; q.front() &lt;&lt; endl; q.pop_front(); &#125; return 0;&#125; G-Cow Digit Game题目链接 分析&emsp;&emsp;好像是道SG函数的博弈裸题，队友说套一下SG函数就好了。直接上代码吧。 AC代码12345678910111213141516171819202122232425262728293031323334#include &lt;bits/stdc++.h&gt;using namespace std;int g, n;bool sg[1000005]; int main()&#123; for(int i = 1; i &lt;= 9; i++) sg[i] = true; for(int i = 10; i &lt;= 1000000; i++) &#123; int ma = 0, mi = 10, t = i; while(t) &#123; int x = t % 10; if(x) mi = min(mi, x); ma = max(ma, x); t /= 10; &#125; if(sg[i - ma] &amp;&amp; sg[i - mi]) sg[i] = false; else sg[i] = true; &#125; cin &gt;&gt; g; for(int i = 0; i &lt; g; i++) &#123; cin &gt;&gt; n; if (sg[n]) cout &lt;&lt; \"YES\" &lt;&lt; endl; else cout &lt;&lt; \"NO\" &lt;&lt; endl; &#125;&#125; I-旅行家的预算题目链接 分析&emsp;&emsp;一道操作比较繁琐的贪心+模拟。可以转换区间贪心。加入起点与终点共$n+2$个站点。若当前在点$i$则需要考虑若在当前站点加多少油可以到达下一个便宜的站点。如果无法到达下一个便宜的站，那就需要加满油。 复杂度$O(N^2)$。 本题的N超级小。。 AC代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#include &lt;bits/stdc++.h&gt;using namespace std;#define FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;int const maxn = 20;struct node &#123; double d, p; bool operator&lt;(const node &amp;obj) const &#123; if (d == obj.d) return p &lt; obj.p; return d &lt; obj.d; &#125;&#125;D[maxn];int main(void) &#123; FAST_IO; int n; double d, c, cd, p; cin &gt;&gt; d &gt;&gt; c &gt;&gt; cd &gt;&gt; p &gt;&gt; n; D[0].p = p; for (int i = 1; i &lt;= n; i++) &#123; cin &gt;&gt; D[i].d &gt;&gt; D[i].p; &#125; D[n + 1].d = d; D[n + 1].p = 0; sort(D + 1, D + 1 + n); double total = 0, oil = 0, x = 0; for (int i = 0; i &lt;= n + 1; i++) &#123; oil -= (D[i].d - x) / cd;//当前剩余的油量 if (oil &lt; 0) &#123; total = -1; break; &#125; int j = i + 1; while (D[j].p &gt; D[i].p &amp;&amp; j &lt;= n) &#123;//寻找比当前要便宜的站点 j++; &#125; double need = (D[j].d - D[i].d) / cd; need = min(c, need); double add = need - oil; if (add &gt; 0) &#123; total += add * D[i].p; oil += add; &#125; x = D[i].d; &#125; if (total == -1) &#123; cout &lt;&lt; \"No Solution\" &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; fixed &lt;&lt; setprecision(2) &lt;&lt; total &lt;&lt; endl; &#125; return 0;&#125; K-Hide and Seek题目链接 题意&emsp;&emsp;奶牛贝西和农夫约翰（FJ）玩捉迷藏，现在有N个谷仓，FJ开始在第一个谷仓，贝西为了不让FJ找到她，当然要藏在距离第一个谷仓最远的那个谷仓了。现在告诉你N个谷仓，和M个两两谷仓间的“无向边”。每两个仓谷间当然会有最短路径，现在要求距离第一个谷仓（FJ那里）最远的谷仓是哪个（所谓最远就是距离第一个谷仓最大的最短路径）？如有多个则输出编号最小的。以及求这最远距离是多少，和有几个这样的谷仓距离第一个谷仓那么远。 分析&emsp;&emsp;只要求出1-N的单源最短路，遍历找出最大值就可。因为本题所有边的边权全是1，所以只要从1开始bfs遍历图就行了。复杂度$O(N+M)$. 12345// C++的STL里有一些直接的简单算法可用（以下算法复杂度均为O(N)）：//头文件 algorithmmax_element(begin(), end(), cmp); //找到序列最大值，返回其指针min_element(begin(), end(), cmp); //找到序列最小值，返回其指针count(begin(), end(), value) //统计序列中为value值的个数 AC 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include &lt;bits/stdc++.h&gt;using namespace std;#define FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;int const maxn = 50000 + 10;struct node &#123; int v, next;&#125;e[maxn &lt;&lt; 1];int head[maxn], cnt;int dis[maxn], vis[maxn];void add(int u, int v) &#123; e[cnt].v = v; e[cnt].next = head[u]; head[u] = cnt++;&#125;void bfs() &#123; queue&lt;pair&lt;int, int&gt;&gt; q; dis[1] = 0; vis[1] = 1; q.push(make_pair(1, 0)); while (!q.empty()) &#123; auto x = q.front(); q.pop(); int u = x.first; dis[u] = x.second; for (int i = head[u]; ~i; i = e[i].next) &#123; int v = e[i].v; if (vis[v]) continue; vis[v] = 1; q.push(make_pair(v, x.second + 1)); &#125; &#125;&#125;int main(void) &#123; FAST_IO; memset(head, -1, sizeof(head)); int n, m; cin &gt;&gt; n &gt;&gt; m; for (int i = 0; i &lt; m; i++) &#123; int u, v; cin &gt;&gt; u &gt;&gt;v; add(u, v); add(v, u); &#125; bfs(); int mx = *max_element(dis + 1, dis + 1 + n); int cont = count(dis + 1, dis + 1 + n, mx); int p = 0; for (int i = 1; i &lt;= n; i++) &#123; if (dis[i] == mx) &#123; p = i; break; &#125; &#125; cout &lt;&lt; p &lt;&lt; \" \" &lt;&lt; mx &lt;&lt; \" \" &lt;&lt; cont &lt;&lt; endl; return 0;&#125; L-回文数题目链接 分析&emsp;&emsp;模拟N进制加法，并判断回文。 AC代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include &lt;bits/stdc++.h&gt;using namespace std;#define FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;int n;string clac(string a) &#123; string ans, b(a); reverse(b.begin(), b.end()); ans.resize(a.length()); int d = 0; for (int i = a.length() - 1; i &gt;= 0; i--) &#123; int x, y; if (isdigit(a[i])) &#123; x = a[i] - '0'; &#125; else &#123; x = a[i] - 'A' + 10; &#125; if (isdigit(b[i])) &#123; y = b[i] - '0'; &#125; else &#123; y = b[i] - 'A' + 10; &#125; int c = (x + y + d) % n; if (c &lt; 10) ans[i] = c + '0'; else &#123; ans[i] = c - 10 + 'A'; &#125; d = (x + y + d) / n; &#125; if (d &gt; 0) ans.insert(ans.begin(), d &lt; 10 ? d + '0' : d - 10 + 'A'); return ans;&#125;bool ok(string &amp;s) &#123; int len = (int)s.length(); for (int i = 0; i &lt; len / 2; i++) &#123; if (s[i] != s[len - 1 - i]) &#123; return false; &#125; &#125; return true;&#125;int main(void) &#123; FAST_IO; string m; cin &gt;&gt; n &gt;&gt; m; int ans = 0; while (!ok(m)) &#123; m = clac(m); ans++; if (ans &gt; 30) &#123; cout &lt;&lt; \"Impossible!\" &lt;&lt; endl; break; &#125; &#125; if (ans &lt;= 30) cout &lt;&lt; \"STEP=\" &lt;&lt; ans &lt;&lt; endl; return 0;&#125;","content":"<h1 id=\"A-乘积最大\"><a href=\"#A-乘积最大\" class=\"headerlink\" title=\"A-乘积最大\"></a>A-乘积最大</h1><p><a href=\"https://ac.nowcoder.com/acm/contest/1071/A\" target=\"_blank\" rel=\"noopener\">题目链接</a></p>\n<h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;给定一个数字字符串，把字符串分成$K+1$个数，使这些数乘积最大。</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>本题最佳解法应该是<code>区间dp</code>但本蒟蒻不会dp。只能暴力dfs了。<br>在串中插入<code>*</code>其性质和排列类似。可以参考蓝书P15<code>递归实现排列型枚举</code>。<br>对于在第$i$个位置插入<code>*</code>分成$i$之前的为一段，及$i$和$i$之后一段。</p>\n<a id=\"more\"></a>\n\n<blockquote>\n<p>需要注意在数字相连时的边界情况。</p>\n</blockquote>\n<h2 id=\"AC代码\"><a href=\"#AC代码\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">50</span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> a;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, k;</span><br><span class=\"line\"><span class=\"keyword\">int</span> vis[maxn];</span><br><span class=\"line\">ll s[maxn];</span><br><span class=\"line\">ll ans = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x == k) &#123;</span><br><span class=\"line\">        ll x = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> t = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(s, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(s));</span><br><span class=\"line\">        s[t] = a[<span class=\"number\">0</span>] - <span class=\"number\">48</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (vis[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                s[++t] = (a[i] - <span class=\"string\">'0'</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                s[t] = s[t] * <span class=\"number\">10</span> + (a[i] - <span class=\"string\">'0'</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= t; i++) &#123;</span><br><span class=\"line\">            x *= s[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans = max(ans, x);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (vis[i])</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        vis[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        dfs(x + <span class=\"number\">1</span>);</span><br><span class=\"line\">        vis[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; a;</span><br><span class=\"line\">    dfs(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"C-单词接龙\"><a href=\"#C-单词接龙\" class=\"headerlink\" title=\"C-单词接龙\"></a>C-单词接龙</h1><p><a href=\"https://ac.nowcoder.com/acm/contest/1071/C\" target=\"_blank\" rel=\"noopener\">题目链接</a></p>\n<h2 id=\"题意-1\"><a href=\"#题意-1\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>&emsp;&emsp;给定一个字符和一些字符串，按照字符串之间重叠的部分，连接字符串，求最长的连接长度。</p>\n<h2 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>&emsp;&emsp;比较经典的DFS+字符串，比较考察细节，比如字符串的模拟操作、dfs回溯的处理。<br>&emsp;&emsp;有两种基本的思路：</p>\n<ol>\n<li>对于字符串，本题数据较少，可以搜索时暴力处理。使用C++的string比较方便，但仍需要注意边界细节。(我写的时候在substr上调了好久，emmmm)</li>\n<li>比较好的做法可以先预处理一个$num$数组，其中$num[i][j]$表示串$i$和串$j$之间可以连接的字符数。在DFS的时候使用 $num[i][j]$ 进行回溯等操作。</li>\n</ol>\n<h2 id=\"AC代码-1\"><a href=\"#AC代码-1\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><h3 id=\"方法1-string暴力\"><a href=\"#方法1-string暴力\" class=\"headerlink\" title=\"方法1(string暴力)\"></a>方法1(string暴力)</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> maxn = <span class=\"number\">50</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> vis[maxn];</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; v_str;</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"built_in\">string</span> &amp;s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; (<span class=\"keyword\">int</span>)v_str.size(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (vis[i] &gt;= <span class=\"number\">2</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> &amp;ts = v_str[i];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len1 = (<span class=\"keyword\">int</span>)s.length();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len2 = (<span class=\"keyword\">int</span>)ts.length();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; min(len1, len2); j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ts.substr(<span class=\"number\">0</span>, j + <span class=\"number\">1</span>) == s.substr(len1 - j - <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">                flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">                n = j + <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n) &#123;</span><br><span class=\"line\">            vis[i]++;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> temp = s;</span><br><span class=\"line\">            s = s + ts.substr(n);</span><br><span class=\"line\">            dfs(s);</span><br><span class=\"line\">            s = temp;</span><br><span class=\"line\">            vis[i]--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!flag) &#123;</span><br><span class=\"line\">        ans = max((<span class=\"keyword\">int</span>)s.length(), ans);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> s;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; s;</span><br><span class=\"line\">        v_str.push_back(s);</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">    <span class=\"built_in\">string</span> s;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; s;</span><br><span class=\"line\">    dfs(s);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法2-预处理字符数\"><a href=\"#方法2-预处理字符数\" class=\"headerlink\" title=\"方法2(预处理字符数)\"></a>方法2(预处理字符数)</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"built_in\">string</span> dc[<span class=\"number\">25</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> cd[<span class=\"number\">25</span>][<span class=\"number\">25</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> cs[<span class=\"number\">25</span>];</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mincd</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> p=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ky=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=dc[x].size()<span class=\"number\">-1</span>;k&gt;=<span class=\"number\">0</span>;k--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> kx=k;kx&lt;dc[x].size();kx++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dc[x][kx]!=dc[y][ky++])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                p=<span class=\"literal\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p==<span class=\"literal\">true</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> dc[x].size()-k;</span><br><span class=\"line\">         </span><br><span class=\"line\">        ky=<span class=\"number\">0</span>;</span><br><span class=\"line\">        p=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">     </span><br><span class=\"line\"><span class=\"keyword\">char</span> sta;</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> mans=<span class=\"number\">0</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> jx=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cs[i]&gt;=<span class=\"number\">2</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cd[p][i]==<span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cd[p][i]==dc[p].size() || cd[p][i]==dc[i].size()) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        mans+=dc[i].size()-cd[p][i];</span><br><span class=\"line\">        cs[i]++;</span><br><span class=\"line\">        jx=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        dfs(i);   <span class=\"comment\">//接上</span></span><br><span class=\"line\">        mans-=dc[i].size()-cd[p][i];   <span class=\"comment\">//回溯</span></span><br><span class=\"line\">        cs[i]--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(jx==<span class=\"literal\">false</span>)  </span><br><span class=\"line\">    ans=max(ans,mans);</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;dc[i];</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;sta;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)</span><br><span class=\"line\">            cd[i][j]=mincd(i,j);</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dc[i][<span class=\"number\">0</span>]==sta)&#123;</span><br><span class=\"line\">            cs[i]++;</span><br><span class=\"line\">            mans=dc[i].size();</span><br><span class=\"line\">            dfs(i);</span><br><span class=\"line\">            cs[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;ans&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"D-Cow-Line\"><a href=\"#D-Cow-Line\" class=\"headerlink\" title=\"D-Cow Line\"></a>D-Cow Line</h1><p><a href=\"https://ac.nowcoder.com/acm/contest/1071/D\" target=\"_blank\" rel=\"noopener\">题目链接</a></p>\n<h2 id=\"题意-2\"><a href=\"#题意-2\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>&emsp;&emsp;有一些人排队，允许进行以下四种操作：</p>\n<ul>\n<li>A L —– 从左边插入一人</li>\n<li>A R —– 从右边插入一人</li>\n<li>D L N —– 从左边走出N人</li>\n<li>D R N —– 从右边走出N人</li>\n</ul>\n<p>&emsp;&emsp;问最后队伍中的序号。</p>\n<h2 id=\"分析-2\"><a href=\"#分析-2\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>&emsp;&emsp;用双端队列$deque$模拟入队出队，即可。复杂度$O(N)$</p>\n<h2 id=\"AC代码-2\"><a href=\"#AC代码-2\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt; q;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> opt, dir;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>, k;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; opt &gt;&gt; dir;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (opt == <span class=\"string\">\"A\"</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dir == <span class=\"string\">\"L\"</span>) &#123;</span><br><span class=\"line\">                q.push_front(++num);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                q.push_back(++num);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; k;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dir == <span class=\"string\">\"L\"</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k &amp;&amp; !q.empty(); i++)</span><br><span class=\"line\">                    q.pop_front();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k &amp;&amp; !q.empty(); i++)</span><br><span class=\"line\">                    q.pop_back();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty()) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; q.front() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        q.pop_front();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"G-Cow-Digit-Game\"><a href=\"#G-Cow-Digit-Game\" class=\"headerlink\" title=\"G-Cow Digit Game\"></a>G-Cow Digit Game</h1><p><a href=\"https://ac.nowcoder.com/acm/contest/1071/G\" target=\"_blank\" rel=\"noopener\">题目链接</a></p>\n<h2 id=\"分析-3\"><a href=\"#分析-3\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>&emsp;&emsp;好像是道SG函数的博弈裸题，队友说套一下SG函数就好了。直接上代码吧。</p>\n<h2 id=\"AC代码-3\"><a href=\"#AC代码-3\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> g, n;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> sg[<span class=\"number\">1000005</span>];</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">9</span>; i++)</span><br><span class=\"line\">        sg[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">10</span>; i &lt;= <span class=\"number\">1000000</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ma = <span class=\"number\">0</span>, mi = <span class=\"number\">10</span>, t = i;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(t)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x = t % <span class=\"number\">10</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(x) mi = min(mi, x);</span><br><span class=\"line\">            ma = max(ma, x);</span><br><span class=\"line\">            t /= <span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sg[i - ma] &amp;&amp; sg[i - mi])</span><br><span class=\"line\">            sg[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            sg[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; g;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; g; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sg[n]) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"YES\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"NO\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"I-旅行家的预算\"><a href=\"#I-旅行家的预算\" class=\"headerlink\" title=\"I-旅行家的预算\"></a>I-旅行家的预算</h1><p><a href=\"https://ac.nowcoder.com/acm/contest/1071/I\" target=\"_blank\" rel=\"noopener\">题目链接</a></p>\n<h2 id=\"分析-4\"><a href=\"#分析-4\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>&emsp;&emsp;一道操作比较繁琐的<code>贪心+模拟</code>。可以转换区间贪心。加入起点与终点共$n+2$个站点。<br>若当前在点$i$则需要考虑若在当前站点加多少油可以到达下一个便宜的站点。如果无法到达下一个便宜的站，那就需要加满油。</p>\n<p>复杂度$O(N^2)$。 </p>\n<blockquote>\n<p>本题的N超级小。。</p>\n</blockquote>\n<h2 id=\"AC代码-4\"><a href=\"#AC代码-4\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> maxn = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> d, p;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> node &amp;obj) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (d == obj.d)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> p &lt; obj.p;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> d &lt; obj.d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;D[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> d, c, cd, p;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; d &gt;&gt; c &gt;&gt; cd &gt;&gt; p  &gt;&gt; n;</span><br><span class=\"line\">    D[<span class=\"number\">0</span>].p = p;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; D[i].d &gt;&gt; D[i].p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    D[n + <span class=\"number\">1</span>].d = d;</span><br><span class=\"line\">    D[n + <span class=\"number\">1</span>].p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    sort(D + <span class=\"number\">1</span>, D + <span class=\"number\">1</span> + n);</span><br><span class=\"line\">    <span class=\"keyword\">double</span> total = <span class=\"number\">0</span>, oil = <span class=\"number\">0</span>, x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n + <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        oil -= (D[i].d - x) / cd;<span class=\"comment\">//当前剩余的油量</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oil &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            total = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (D[j].p &gt; D[i].p &amp;&amp; j &lt;= n) &#123;<span class=\"comment\">//寻找比当前要便宜的站点</span></span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> need = (D[j].d - D[i].d) / cd;</span><br><span class=\"line\">        need = min(c, need);</span><br><span class=\"line\">        <span class=\"keyword\">double</span> add = need - oil;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (add &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            total += add * D[i].p;</span><br><span class=\"line\">            oil += add;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        x = D[i].d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (total == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"No Solution\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class=\"number\">2</span>) &lt;&lt; total &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"K-Hide-and-Seek\"><a href=\"#K-Hide-and-Seek\" class=\"headerlink\" title=\"K-Hide and Seek\"></a>K-Hide and Seek</h1><p><a href=\"https://ac.nowcoder.com/acm/contest/1071/K\" target=\"_blank\" rel=\"noopener\">题目链接</a></p>\n<h2 id=\"题意-3\"><a href=\"#题意-3\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>&emsp;&emsp;奶牛贝西和农夫约翰（FJ）玩捉迷藏，现在有N个谷仓，FJ开始在第一个谷仓，贝西为了不让FJ找到她，当然要藏在距离第一个谷仓最远的那个谷仓了。现在告诉你N个谷仓，和M个两两谷仓间的“无向边”。每两个仓谷间当然会有最短路径，现在要求距离第一个谷仓（FJ那里）最远的谷仓是哪个（所谓最远就是距离第一个谷仓最大的最短路径）？如有多个则输出编号最小的。以及求这最远距离是多少，和有几个这样的谷仓距离第一个谷仓那么远。</p>\n<h2 id=\"分析-5\"><a href=\"#分析-5\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>&emsp;&emsp;只要求出1-N的单源最短路，遍历找出最大值就可。因为本题所有边的边权全是1，所以只要从1开始bfs遍历图就行了。复杂度$O(N+M)$.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// C++的STL里有一些直接的简单算法可用（以下算法复杂度均为O(N)）：</span></span><br><span class=\"line\"><span class=\"comment\">//头文件 algorithm</span></span><br><span class=\"line\">max_element(begin(), end(), cmp);  <span class=\"comment\">//找到序列最大值，返回其指针</span></span><br><span class=\"line\">min_element(begin(), end(), cmp); <span class=\"comment\">//找到序列最小值，返回其指针</span></span><br><span class=\"line\">count(begin(), end(), value) <span class=\"comment\">//统计序列中为value值的个数</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"AC-代码\"><a href=\"#AC-代码\" class=\"headerlink\" title=\"AC 代码\"></a>AC 代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> maxn = <span class=\"number\">50000</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> v, next;</span><br><span class=\"line\">&#125;e[maxn &lt;&lt; <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> head[maxn], cnt;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dis[maxn], vis[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    e[cnt].v = v;</span><br><span class=\"line\">    e[cnt].next = head[u];</span><br><span class=\"line\">    head[u] = cnt++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt; q;</span><br><span class=\"line\">    dis[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    vis[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    q.push(make_pair(<span class=\"number\">1</span>, <span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> x = q.front();</span><br><span class=\"line\">        q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = x.first;</span><br><span class=\"line\">        dis[u] = x.second;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = head[u]; ~i; i = e[i].next) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v = e[i].v;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (vis[v]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            vis[v] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            q.push(make_pair(v, x.second + <span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(head, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(head));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u, v;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; u &gt;&gt;v;</span><br><span class=\"line\">        add(u, v);</span><br><span class=\"line\">        add(v, u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bfs();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mx = *max_element(dis + <span class=\"number\">1</span>, dis + <span class=\"number\">1</span> + n);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cont = count(dis + <span class=\"number\">1</span>, dis + <span class=\"number\">1</span> + n, mx);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dis[i] == mx) &#123;</span><br><span class=\"line\">            p = i;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; p &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; mx &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; cont &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"L-回文数\"><a href=\"#L-回文数\" class=\"headerlink\" title=\"L-回文数\"></a>L-回文数</h1><p><a href=\"https://ac.nowcoder.com/acm/contest/1071/L\" target=\"_blank\" rel=\"noopener\">题目链接</a></p>\n<h2 id=\"分析-6\"><a href=\"#分析-6\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>&emsp;&emsp;模拟N进制加法，并判断回文。</p>\n<h2 id=\"AC代码-5\"><a href=\"#AC代码-5\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">clac</span><span class=\"params\">(<span class=\"built_in\">string</span> a)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> ans, b(a);</span><br><span class=\"line\">    reverse(b.begin(), b.end());</span><br><span class=\"line\">    ans.resize(a.length());</span><br><span class=\"line\">    <span class=\"keyword\">int</span> d = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = a.length() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x, y;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">isdigit</span>(a[i])) &#123;</span><br><span class=\"line\">            x = a[i] - <span class=\"string\">'0'</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            x = a[i] - <span class=\"string\">'A'</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">isdigit</span>(b[i])) &#123;</span><br><span class=\"line\">            y = b[i] - <span class=\"string\">'0'</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            y = b[i] - <span class=\"string\">'A'</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> c = (x + y + d) % n;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c &lt; <span class=\"number\">10</span>)</span><br><span class=\"line\">            ans[i] = c + <span class=\"string\">'0'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            ans[i] = c - <span class=\"number\">10</span> + <span class=\"string\">'A'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        d = (x + y + d) / n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        ans.insert(ans.begin(), d &lt; <span class=\"number\">10</span> ? d + <span class=\"string\">'0'</span> : d - <span class=\"number\">10</span> + <span class=\"string\">'A'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">ok</span><span class=\"params\">(<span class=\"built_in\">string</span> &amp;s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = (<span class=\"keyword\">int</span>)s.length();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len / <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s[i] != s[len - <span class=\"number\">1</span> - i]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> m;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!ok(m)) &#123;</span><br><span class=\"line\">        m = clac(m);</span><br><span class=\"line\">        ans++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ans &gt; <span class=\"number\">30</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Impossible!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ans &lt;= <span class=\"number\">30</span>) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"STEP=\"</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","link":"","categories":[{"name":"ACM","slug":"ACM","permalink":"http://yoursite.com/categories/ACM/"},{"name":"牛客","slug":"ACM/牛客","permalink":"http://yoursite.com/categories/ACM/%E7%89%9B%E5%AE%A2/"},{"name":"题解","slug":"ACM/牛客/题解","permalink":"http://yoursite.com/categories/ACM/%E7%89%9B%E5%AE%A2/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"最短路","slug":"最短路","permalink":"http://yoursite.com/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"},{"name":"模拟","slug":"模拟","permalink":"http://yoursite.com/tags/%E6%A8%A1%E6%8B%9F/"},{"name":"贪心","slug":"贪心","permalink":"http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"},{"name":"DP","slug":"DP","permalink":"http://yoursite.com/tags/DP/"},{"name":"暴力","slug":"暴力","permalink":"http://yoursite.com/tags/%E6%9A%B4%E5%8A%9B/"},{"name":"dfs","slug":"dfs","permalink":"http://yoursite.com/tags/dfs/"}]},{"title":"牛客假日团队赛8-部分题解","date":"2019-07-28T13:50:53.000Z","path":"2019/07/28/nowcoder-team-contest08-solve-part/","text":"比赛总结暑期第一次打牛客团队赛，居然运气不错的就中奖了。不过这次的题总体都不难，差1题就可以AK了呢。还是来总结下吧，先附上算法大纲。 easy：B(模拟)、C(高精度)、G(排序)、H(BF)、I(规律题)、J(简单DP)、L(打表BF) mid：K(floyd传递闭包)、D(复杂模拟)、F(最短路+二分) hard：E(二分+并查集)、A(树形DP求最小支配集合) 其中蒟蒻的我写了BCGHIF(果然我只配写简单题) B-iCow题目传送门 题意&emsp;&emsp;有$N$ $(1 &lt;= N &lt;= 1,000)$首歌曲，按照$1-N$编号。 第i首曲子有一个初始权值$R_i(1 &lt;= R_i &lt;= 10,000)$。 当一首曲子播放完毕，接下来播放的将是所有曲子中权值最大的那首（如果有两首或多首曲子的权值相同，那么这些曲子中编号最小的那首会被选中）。 一首曲子在播放结束后，它的权值会被平均地分给其他N-1首曲子，它本身的权值清零。 &emsp;&emsp;如果一首曲子的权值无法被平均分配（也就是说，无法被N-1整除），那么被N-1除的余数部分将会以1为单位，顺次分配给排名靠前的曲子（也就是说，顺序为曲目1、曲目2 etc依次下去。当然，刚播放过的那首曲子需要被跳过），直到多出的部分被分配完。在选定的下一首曲子播放完毕后，这个算法再次被执行，调整曲子的权值，并选出再接下来播放的曲目。 &emsp;&emsp;请你计算一下，按FJ的算法，最先播放的$T(1 &lt;= T &lt;= 1000)$首曲子分别是哪些。 分析&emsp;&emsp;数据不大，简单模拟题。 AC代码1234567891011121314151617181920212223242526272829303132333435#include &lt;bits/stdc++.h&gt;#define FAST_IO std::ios::sync_with_stdio(false),std::cin.tie(0),std::cout.tie(0)#define pause system(\"pause\")using namespace std;typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;int const maxn = 1000 + 10;int a[maxn];int main(void) &#123; FAST_IO; int n, t; cin &gt;&gt; n &gt;&gt; t; for (int i = 1; i &lt;= n; i++) &#123; cin &gt;&gt; a[i]; &#125; for (int i = 0; i &lt; t; i++) &#123; int pos = max_element(a + 1, a + 1 + n) - a; cout &lt;&lt; pos &lt;&lt; endl; int x = a[pos] % (n - 1); int s = a[pos] / (n - 1); a[pos]= 0; for (int i = 1; i &lt;= n; i++) &#123; if (i == pos) continue; a[i] += s; if (x) &#123; a[i]++; x--; &#125; &#125; &#125; // pause; return 0;&#125; C-阶乘之和题目传送门 分析&emsp;&emsp;python大法真好 AC代码1234567891011121314n = int(input())def fact(x): s = 1 for i in range(1, x + 1): s *= i return ssum = 0for i in range(1, n + 1): sum += fact(i)if sum == 0: sum += 1print(sum) G-Election Time题目传送门 题意&emsp;&emsp;一场比赛，规则有两轮，再第一轮中选出前k个牛，再在这k只牛中选取第二轮中票数最多的牛，输出它的编号。 分析&emsp;&emsp;进行两次排序就行。 AC代码1234567891011121314151617181920212223242526272829303132#include &lt;bits/stdc++.h&gt;#define FAST_IO std::ios::sync_with_stdio(false),std::cin.tie(0),std::cout.tie(0)#define pause system(\"pause\")using namespace std;typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;typedef pair&lt;ll, ll&gt; pll;int const maxn = 50000 + 10;struct node &#123; ll a, b; int x;&#125;;node a[maxn];int main(void) &#123; FAST_IO; int n, k; cin &gt;&gt; n &gt;&gt; k; for (int i = 1; i &lt;= n; i++) &#123; cin &gt;&gt; a[i].a &gt;&gt; a[i].b; a[i].x = i; &#125; sort(a + 1 , a + 1 + k, [](const node &amp;x, const node &amp;y)&#123; return x.a &gt; y.a; &#125;); sort(a + 1 , a + 1 + k, [](const node &amp;x, const node &amp;y)&#123; return x.b &gt; y.b; &#125;); cout &lt;&lt; a[1].x &lt;&lt; endl; // pause; return 0;&#125; H-Costume Party题目传送门 分析真的暴力就行了emmm. AC代码1234567891011121314151617181920212223242526272829#include &lt;bits/stdc++.h&gt;#define FAST_IO std::ios::sync_with_stdio(false),std::cin.tie(0),std::cout.tie(0)#define pause system(\"pause\")using namespace std;typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;typedef pair&lt;ll, ll&gt; pll;int const maxn = 50000 + 10;int a[maxn];int main(void) &#123; FAST_IO; int num = 0; int n, s; cin &gt;&gt; n &gt;&gt; s; for (int i = 0; i &lt; n;i++) &#123; cin &gt;&gt; a[i]; &#125; for (int i = 0; i &lt; n; i++) &#123; for (int j = i + 1;j &lt; n; j++) &#123; if (a[i] + a[j] &lt;= s) ++num; &#125; &#125; cout &lt;&lt; num &lt;&lt; endl; // pause; return 0;&#125; I-Cantor表题目传送门 分析数表提示我们按照斜线分类。第1条斜线有1个数，第2条有2个数，第3条有3个数……第k条有k个数。这样，前k条斜线一共有$S=1+2+3+……+k$个数。 第n项在哪条斜线上呢？只要找到一个最小的k，使得$S≥n$，那么第$n$项就是第k条斜线上倒数第$S-n+1$个数（最后一个元素是倒数第1个元素，而不是倒数第0个元素）。 而k的奇偶决定着第k条斜线上数的顺序：若k是奇数，第k条斜线上倒数第i个元素是$i\\over (k+1-i)$；若k是偶数，第k条斜线上倒数第i个元素是$(k+1-i)\\over i$。 AC代码1234567891011121314151617181920#include &lt;bits/stdc++.h&gt;using namespace std; int main()&#123; ios::sync_with_stdio(false); cin.tie(0); int n,h=1; cin&gt;&gt;n; while(n-h&gt;0) &#123; n=n-h; h++; &#125; if(!h%2) cout&lt;&lt;n&lt;&lt;\"/\"&lt;&lt;h+1-n&lt;&lt;endl; else cout&lt;&lt;h+1-n&lt;&lt;\"/\"&lt;&lt;n&lt;&lt;endl; return 0;&#125; F-Telephone Lines题目传送门 题意找出1-n的通路中，第K+1大的路径权值最小的值。 分析经典的二分+最短路解法。由于答案具有单调性，所以可以对其二分答案，若路径$i$的权值大于$mid$则为1，否则为0。然后进行找$1$到$n$的最短路。那么跑完最短路之后，由于小于$mid$的边权值均为0，$1-n$最短路的值就是路径上所有比$mid$大的边的总数。 AC代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091#include &lt;bits/stdc++.h&gt;typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;typedef unsigned long long ull;#define FAST_IO std::ios::sync_with_stdio(false),std::cin.tie(0),std::cout.tie(0)#define PAUSE system(\"pause\")using namespace std;int const maxn = 10000 + 10;struct Node &#123; int v, w, next;&#125;e[maxn &lt;&lt; 1];struct node &#123; int u; int w; node(int const &amp;u = 0, int const &amp;w = 0) : u(u), w(w) &#123;&#125; bool operator&lt;(const node &amp;p) const&#123; return w &gt; p.w; &#125; &#125;;int head[maxn], vis[maxn];int dis[maxn];int cnt = 0;int n, m, k;void add(int u, int v, int w) &#123; e[cnt].v = v; e[cnt].w = w; e[cnt].next = head[u]; head[u] = cnt++;&#125;void dijkstra(int mid) &#123; priority_queue&lt;node&gt; q; for (int i = 1; i &lt;= n; i++) &#123; dis[i] = INT_MAX; vis[i] = 0; &#125; dis[1] = 0; q.push(node(1, dis[1])); while (!q.empty()) &#123; int u = q.top().u; q.pop(); if (vis[u]) continue; vis[u] = 1; for (int i = head[u]; ~i; i = e[i].next) &#123; int v = e[i].v; int w = e[i].w &gt; mid ? 1 : 0; if (dis[v] &gt; dis[u] + w) &#123; dis[v] = dis[u] + w; q.push(node(v, dis[v])); &#125; &#125; &#125;&#125;int main(void) &#123; FAST_IO; memset(head, -1, sizeof(head)); cin &gt;&gt; n &gt;&gt; m &gt;&gt; k; int l = 0, r = -1; for (int i = 0; i &lt; m; i++) &#123; int u, v, w; cin &gt;&gt; u &gt;&gt; v &gt;&gt; w; r = max(r, w); add(u, v, w); add(v, u, w); &#125; int mx = r; while (l &lt; r) &#123; int mid = (l + r) / 2; dijkstra(mid); if (dis[n] &lt;= k) &#123; r = mid; &#125; else &#123; l = mid + 1; &#125; &#125; if (mx == r) &#123; cout &lt;&lt; -1 &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; r &lt;&lt; endl; &#125; // PAUSE; return 0;&#125;","content":"<h1 id=\"比赛总结\"><a href=\"#比赛总结\" class=\"headerlink\" title=\"比赛总结\"></a>比赛总结</h1><p>暑期第一次打牛客团队赛，居然运气不错的就中奖了。不过这次的题总体都不难，差1题就可以AK了呢。<br>还是来总结下吧，先附上算法大纲。</p>\n<ul>\n<li>easy：B(模拟)、C(高精度)、G(排序)、H(BF)、I(规律题)、J(简单DP)、L(打表BF)</li>\n<li>mid：K(floyd传递闭包)、D(复杂模拟)、F(最短路+二分)</li>\n<li>hard：E(二分+并查集)、A(树形DP求最小支配集合)</li>\n</ul>\n<p>其中蒟蒻的我写了BCGHIF(果然我只配写简单题)</p>\n<a id=\"more\"></a>\n\n<h1 id=\"B-iCow\"><a href=\"#B-iCow\" class=\"headerlink\" title=\"B-iCow\"></a>B-iCow</h1><p><a href=\"https://ac.nowcoder.com/acm/contest/1069/B\" target=\"_blank\" rel=\"noopener\">题目传送门</a></p>\n<h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>&emsp;&emsp;有$N$ $(1 &lt;= N &lt;= 1,000)$首歌曲，按照$1-N$编号。</p>\n<ul>\n<li>第i首曲子有一个初始权值$R_i(1 &lt;= R_i &lt;= 10,000)$。</li>\n<li>当一首曲子播放完毕，接下来播放的将是所有曲子中权值最大的那首（如果有两首或多首曲子的权值相同，那么这些曲子中编号最小的那首会被选中）。</li>\n<li>一首曲子在播放结束后，它的权值会被平均地分给其他N-1首曲子，它本身的权值清零。</li>\n</ul>\n<p>&emsp;&emsp;如果一首曲子的权值无法被平均分配（也就是说，无法被N-1整除），那么被N-1除的余数部分将会以1为单位，顺次分配给排名靠前的曲子（也就是说，顺序为<strong>曲目1、曲目2 etc</strong>依次下去。当然，刚播放过的那首曲子需要被跳过），直到多出的部分被分配完。<br>在选定的下一首曲子播放完毕后，这个算法再次被执行，调整曲子的权值，并选出再接下来播放的曲目。</p>\n<p>&emsp;&emsp;请你计算一下，按FJ的算法，最先播放的$T(1 &lt;= T &lt;= 1000)$首曲子分别是哪些。</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>&emsp;&emsp;数据不大，简单模拟题。</p>\n<h2 id=\"AC代码\"><a href=\"#AC代码\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO std::ios::sync_with_stdio(false),std::cin.tie(0),std::cout.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pause system(<span class=\"meta-string\">\"pause\"</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> maxn = <span class=\"number\">1000</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, t;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; t; </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; t; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pos = max_element(a + <span class=\"number\">1</span>, a + <span class=\"number\">1</span> + n) - a;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; pos &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = a[pos] % (n - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> s = a[pos] / (n - <span class=\"number\">1</span>);</span><br><span class=\"line\">        a[pos]= <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == pos) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            a[i] += s;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x) &#123;</span><br><span class=\"line\">                a[i]++;</span><br><span class=\"line\">                x--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// pause;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"C-阶乘之和\"><a href=\"#C-阶乘之和\" class=\"headerlink\" title=\"C-阶乘之和\"></a>C-阶乘之和</h1><p><a href=\"https://ac.nowcoder.com/acm/contest/1069/C\" target=\"_blank\" rel=\"noopener\">题目传送门</a></p>\n<h2 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>&emsp;&emsp;python大法真好</p>\n<h2 id=\"AC代码-1\"><a href=\"#AC代码-1\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = int(input())</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fact</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    s = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, x + <span class=\"number\">1</span>):</span><br><span class=\"line\">        s *= i</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s</span><br><span class=\"line\"></span><br><span class=\"line\">sum = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, n + <span class=\"number\">1</span>):</span><br><span class=\"line\">    sum += fact(i)</span><br><span class=\"line\"><span class=\"keyword\">if</span> sum == <span class=\"number\">0</span>:</span><br><span class=\"line\">    sum += <span class=\"number\">1</span></span><br><span class=\"line\">print(sum)</span><br></pre></td></tr></table></figure>\n<h1 id=\"G-Election-Time\"><a href=\"#G-Election-Time\" class=\"headerlink\" title=\"G-Election Time\"></a>G-Election Time</h1><p><a href=\"https://ac.nowcoder.com/acm/contest/1069/G\" target=\"_blank\" rel=\"noopener\">题目传送门</a></p>\n<h2 id=\"题意-1\"><a href=\"#题意-1\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>&emsp;&emsp;一场比赛，规则有两轮，再第一轮中选出前k个牛，再在这k只牛中选取第二轮中票数最多的牛，输出它的编号。</p>\n<h2 id=\"分析-2\"><a href=\"#分析-2\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>&emsp;&emsp;进行两次排序就行。</p>\n<h2 id=\"AC代码-2\"><a href=\"#AC代码-2\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO std::ios::sync_with_stdio(false),std::cin.tie(0),std::cout.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pause system(<span class=\"meta-string\">\"pause\"</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> maxn = <span class=\"number\">50000</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">    ll a, b;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">node a[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, k;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; a[i].a &gt;&gt; a[i].b;</span><br><span class=\"line\">        a[i].x = i; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sort(a + <span class=\"number\">1</span> , a + <span class=\"number\">1</span> + k, [](<span class=\"keyword\">const</span> node &amp;x, <span class=\"keyword\">const</span> node &amp;y)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x.a &gt; y.a;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    sort(a + <span class=\"number\">1</span> , a + <span class=\"number\">1</span> + k, [](<span class=\"keyword\">const</span> node &amp;x, <span class=\"keyword\">const</span> node &amp;y)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x.b &gt; y.b;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; a[<span class=\"number\">1</span>].x &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"comment\">// pause;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"H-Costume-Party\"><a href=\"#H-Costume-Party\" class=\"headerlink\" title=\"H-Costume Party\"></a>H-Costume Party</h1><p><a href=\"https://ac.nowcoder.com/acm/contest/1069/H\" target=\"_blank\" rel=\"noopener\">题目传送门</a></p>\n<h2 id=\"分析-3\"><a href=\"#分析-3\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>真的暴力就行了emmm.</p>\n<h2 id=\"AC代码-3\"><a href=\"#AC代码-3\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO std::ios::sync_with_stdio(false),std::cin.tie(0),std::cout.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pause system(<span class=\"meta-string\">\"pause\"</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> maxn = <span class=\"number\">50000</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, s;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; s;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n;i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>;j &lt; n; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a[i] + a[j] &lt;= s) </span><br><span class=\"line\">                ++num;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; num &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"comment\">// pause;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"I-Cantor表\"><a href=\"#I-Cantor表\" class=\"headerlink\" title=\"I-Cantor表\"></a>I-Cantor表</h1><p><a href=\"https://ac.nowcoder.com/acm/contest/1069/I\" target=\"_blank\" rel=\"noopener\">题目传送门</a></p>\n<h2 id=\"分析-4\"><a href=\"#分析-4\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>数表提示我们按照斜线分类。第1条斜线有1个数，第2条有2个数，第3条有3个数……第k条有k个数。这样，前k条斜线一共有$S=1+2+3+……+k$个数。</p>\n<p>第n项在哪条斜线上呢？只要找到一个最小的k，使得$S≥n$，那么第$n$项就是第k条斜线上倒数第$S-n+1$个数（最后一个元素是倒数第1个元素，而不是倒数第0个元素）。</p>\n<p>而k的奇偶决定着第k条斜线上数的顺序：若k是奇数，第k条斜线上倒数第i个元素是$i\\over (k+1-i)$；若k是偶数，第k条斜线上倒数第i个元素是$(k+1-i)\\over i$。</p>\n<h2 id=\"AC代码-4\"><a href=\"#AC代码-4\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::sync_with_stdio(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>.tie(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,h=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n-h&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        n=n-h;</span><br><span class=\"line\">        h++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!h%<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;n&lt;&lt;<span class=\"string\">\"/\"</span>&lt;&lt;h+<span class=\"number\">1</span>-n&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;h+<span class=\"number\">1</span>-n&lt;&lt;<span class=\"string\">\"/\"</span>&lt;&lt;n&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"F-Telephone-Lines\"><a href=\"#F-Telephone-Lines\" class=\"headerlink\" title=\"F-Telephone Lines\"></a>F-Telephone Lines</h1><p><a href=\"https://ac.nowcoder.com/acm/contest/1069/F\" target=\"_blank\" rel=\"noopener\">题目传送门</a></p>\n<h2 id=\"题意-2\"><a href=\"#题意-2\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>找出1-n的通路中，第<code>K+1</code>大的路径权值最小的值。</p>\n<h2 id=\"分析-5\"><a href=\"#分析-5\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>经典的二分+最短路解法。由于答案具有单调性，所以可以对其二分答案，若路径$i$的权值大于$mid$则为1，否则为0。然后进行找$1$到$n$的最短路。那么跑完最短路之后，由于小于$mid$的边权值均为0，$1-n$最短路的值就是路径上所有比$mid$大的边的总数。</p>\n<h2 id=\"AC代码-5\"><a href=\"#AC代码-5\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO std::ios::sync_with_stdio(false),std::cin.tie(0),std::cout.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PAUSE system(<span class=\"meta-string\">\"pause\"</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> maxn = <span class=\"number\">10000</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> v, w, next;</span><br><span class=\"line\">&#125;e[maxn &lt;&lt; <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> u;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> w;</span><br><span class=\"line\">    node(<span class=\"keyword\">int</span> <span class=\"keyword\">const</span> &amp;u = <span class=\"number\">0</span>, <span class=\"keyword\">int</span> <span class=\"keyword\">const</span> &amp;w = <span class=\"number\">0</span>) : </span><br><span class=\"line\">        u(u), w(w) &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> node &amp;p) <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> w &gt; p.w;</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> head[maxn], vis[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dis[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, k;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> w)</span> </span>&#123;</span><br><span class=\"line\">    e[cnt].v = v;</span><br><span class=\"line\">    e[cnt].w = w;</span><br><span class=\"line\">    e[cnt].next = head[u];</span><br><span class=\"line\">    head[u] = cnt++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dijkstra</span><span class=\"params\">(<span class=\"keyword\">int</span> mid)</span> </span>&#123;</span><br><span class=\"line\">    priority_queue&lt;node&gt; q;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        dis[i] = INT_MAX;</span><br><span class=\"line\">        vis[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dis[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    q.push(node(<span class=\"number\">1</span>, dis[<span class=\"number\">1</span>]));</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = q.top().u;</span><br><span class=\"line\">        q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (vis[u]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        vis[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = head[u]; ~i; i = e[i].next) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v = e[i].v;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> w = e[i].w &gt; mid ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dis[v] &gt; dis[u] + w) &#123;</span><br><span class=\"line\">                dis[v] = dis[u] + w;</span><br><span class=\"line\">                q.push(node(v, dis[v]));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    FAST_IO;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(head, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(head));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = <span class=\"number\">0</span>, r = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u, v, w;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class=\"line\">        r = max(r, w);</span><br><span class=\"line\">        add(u, v, w);</span><br><span class=\"line\">        add(v, u, w);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mx = r;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (l &lt; r) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = (l + r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        dijkstra(mid);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dis[n] &lt;= k) &#123;</span><br><span class=\"line\">            r = mid;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            l = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mx == r) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"number\">-1</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; r &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// PAUSE;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","link":"","categories":[{"name":"ACM","slug":"ACM","permalink":"http://yoursite.com/categories/ACM/"},{"name":"牛客","slug":"ACM/牛客","permalink":"http://yoursite.com/categories/ACM/%E7%89%9B%E5%AE%A2/"},{"name":"题解","slug":"ACM/牛客/题解","permalink":"http://yoursite.com/categories/ACM/%E7%89%9B%E5%AE%A2/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"最短路","slug":"最短路","permalink":"http://yoursite.com/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"},{"name":"二分","slug":"二分","permalink":"http://yoursite.com/tags/%E4%BA%8C%E5%88%86/"},{"name":"模拟","slug":"模拟","permalink":"http://yoursite.com/tags/%E6%A8%A1%E6%8B%9F/"},{"name":"DP","slug":"DP","permalink":"http://yoursite.com/tags/DP/"},{"name":"暴力","slug":"暴力","permalink":"http://yoursite.com/tags/%E6%9A%B4%E5%8A%9B/"},{"name":"数学","slug":"数学","permalink":"http://yoursite.com/tags/%E6%95%B0%E5%AD%A6/"},{"name":"高精度","slug":"高精度","permalink":"http://yoursite.com/tags/%E9%AB%98%E7%B2%BE%E5%BA%A6/"}]},{"title":"TextOut","date":"2019-07-20T11:42:42.000Z","path":"2019/07/20/TextOut/","text":"TextOut函数原型1234567BOOL TextOut( HDC hdc, //设备环境句柄 int nXStart, //开始输出位置的x坐标 int nYStart, //开始输出位置的y坐标 LPCTSTR lpString, //要输出的字符串 int cbString //字符串的长度); 样例123456789101112131415161718192021222324252627LRESULT CALLBACK WndProc( HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)&#123; HDC hdc; //设备环境句柄 PAINTSTRUCT ps; //存储绘图环境的相关信息 TCHAR szText[20] = TEXT(\"Hello\"); switch (message)&#123; case WM_PAINT: //开始绘图并返回环境句柄 hdc = BeginPaint (hwnd, &amp;ps); //输出文字 TextOut(hdc, 50, 50, szText, wcslen(szText)); //结束绘图并释放环境句柄 EndPaint (hwnd, &amp;ps) ; return 0 ; case WM_DESTROY: PostQuitMessage(0) ; return 0 ; &#125; return DefWindowProc(hwnd, message, wParam, lParam) ;&#125;","content":"<h1 id=\"TextOut\"><a href=\"#TextOut\" class=\"headerlink\" title=\"TextOut\"></a>TextOut</h1><h1 id=\"函数原型\"><a href=\"#函数原型\" class=\"headerlink\" title=\"函数原型\"></a>函数原型</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">BOOL <span class=\"title\">TextOut</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    HDC hdc, <span class=\"comment\">//设备环境句柄</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"keyword\">int</span> nXStart, <span class=\"comment\">//开始输出位置的x坐标</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"keyword\">int</span> nYStart, <span class=\"comment\">//开始输出位置的y坐标</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    LPCTSTR lpString, <span class=\"comment\">//要输出的字符串</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"keyword\">int</span> cbString <span class=\"comment\">//字符串的长度</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">)</span></span>;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h1 id=\"样例\"><a href=\"#样例\" class=\"headerlink\" title=\"样例\"></a>样例</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">LRESULT CALLBACK <span class=\"title\">WndProc</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    HWND hwnd,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    UINT message,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    WPARAM wParam,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    LPARAM lParam</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    HDC         hdc;  <span class=\"comment\">//设备环境句柄</span></span><br><span class=\"line\">    PAINTSTRUCT ps;  <span class=\"comment\">//存储绘图环境的相关信息</span></span><br><span class=\"line\">    TCHAR szText[<span class=\"number\">20</span>] = TEXT(<span class=\"string\">\"Hello\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (message)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> WM_PAINT:</span><br><span class=\"line\">            <span class=\"comment\">//开始绘图并返回环境句柄</span></span><br><span class=\"line\">            hdc = BeginPaint (hwnd, &amp;ps);</span><br><span class=\"line\">            <span class=\"comment\">//输出文字</span></span><br><span class=\"line\">            TextOut(hdc, <span class=\"number\">50</span>, <span class=\"number\">50</span>, szText, wcslen(szText));</span><br><span class=\"line\">            <span class=\"comment\">//结束绘图并释放环境句柄</span></span><br><span class=\"line\">            EndPaint (hwnd, &amp;ps) ;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> WM_DESTROY:</span><br><span class=\"line\">            PostQuitMessage(<span class=\"number\">0</span>) ;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> DefWindowProc(hwnd, message, wParam, lParam) ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","link":"","categories":[],"tags":[{"name":"Windows","slug":"Windows","permalink":"http://yoursite.com/tags/Windows/"}]},{"title":"POJ 2777 Count Color(线段树+二进制位运算)","date":"2019-07-19T11:38:54.000Z","path":"2019/07/19/POJ-2777-Count-Color-线段树-二进制位运算/","text":"DescriptionChosen Problem Solving and Program design as an optional course, you are required to solve all kinds of problems. Here, we get a new problem. There is a very long board with length L centimeter, L is a positive integer, so we can evenly divide the board into L segments, and they are labeled by 1, 2, … L from left to right, each is 1 centimeter long. Now we have to color the board - one segment with only one color. We can do following two operations on the board: “C A B C” Color the board from segment A to segment B with color C. “P A B” Output the number of different colors painted between segment A and segment B (including). In our daily life, we have very few words to describe a color (red, green, blue, yellow…), so you may assume that the total number of different colors T is very small. To make it simple, we express the names of colors as color 1, color 2, … color T. At the beginning, the board was painted in color 1. Now the rest of problem is left to your. InputFirst line of input contains L (1 &lt;= L &lt;= 100000), T (1 &lt;= T &lt;= 30) and O (1 &lt;= O &lt;= 100000). Here O denotes the number of operations. Following O lines, each contains “C A B C” or “P A B” (here A, B, C are integers, and A may be larger than B) as an operation defined previously. OutputOuput results of the output operation in order, each line contains a number. Sample Input2 2 4C 1 1 2P 1 2C 2 2 2P 1 2 Sample Output21 题意给一个固定长度为L的画板有两个操作：C A B C：区间A–B内涂上颜色C。P A B：查询区间AB内颜色种类数。 思路可以采用二进制的思想，第i种颜色，则标记二进制的i位为1，可以建立线段树，然后使用 | 运算传递二进制。 AC代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;cstring&gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;string&gt;#include &lt;algorithm&gt;#define FAST_IO std::ios::sync_with_stdio(false),std::cin.tie(0),std::cout.tie(0)#define pause system(\"pause\")using namespace std;typedef long long ll;typedef unsigned int UINT;typedef unsigned long long ull;int const maxn = 100000 + 10;int a[maxn], color[maxn], ans;struct seg &#123; int l, r; int v, tag; void update(int x) &#123; v = x; tag = x; &#125;&#125;tree[maxn &lt;&lt; 2];inline int lc(int x) &#123;return x &lt;&lt; 1;&#125;inline int rc(int x) &#123;return x &lt;&lt; 1 | 1;&#125;void push_up(int p) &#123; tree[p].v = tree[lc(p)].v | tree[rc(p)].v;&#125;void push_down(int p) &#123; if (tree[p].tag) &#123; int v = tree[p].v; tree[lc(p)].update(v); tree[rc(p)].update(v); tree[p].tag = 0; &#125;&#125;void bulid(int p, int l, int r) &#123; tree[p].l = l, tree[p].r = r; tree[p].tag = tree[p].v = 0; if(l == r) &#123; tree[p].v = 1; tree[p].tag = 0; return; &#125; int mid = (l + r ) &gt;&gt; 1; bulid(lc(p), l, mid); bulid(rc(p), mid + 1, r); push_up(p);&#125;void update(int p, int l, int r, int x) &#123; if (l &lt;= tree[p].l &amp;&amp; r &gt;= tree[p].r) &#123; tree[p].update((1 &lt;&lt; (x - 1))); return; &#125; push_down(p); int mid = (tree[p].l + tree[p].r) &gt;&gt; 1; if (l &lt;= mid) update(lc(p), l, r, x); if (r &gt; mid) update(rc(p), l, r, x); push_up(p);&#125;ll query(int p, int l, int r) &#123; if(l &lt;= tree[p].l &amp;&amp; r &gt;= tree[p].r) &#123; return tree[p].v; &#125; push_down(p); int ans = 0; int mid = (tree[p].l + tree[p].r) &gt;&gt; 1; if (l &lt;= mid) ans = ans | query(lc(p),l , r); if (r &gt; mid) ans = ans | query(rc(p),l , r); return ans;&#125;int main(void) &#123; int n, m, t; scanf(\"%d %d %d\", &amp;n, &amp;t, &amp;m); bulid(1, 1, n); while (m--) &#123; char opt[5]; int x, y; scanf(\"%s %d %d\", opt, &amp;x, &amp;y); if (x &gt; y) swap(x, y); if(opt[0] == 'C') &#123; int z; scanf(\"%d\", &amp;z); update(1, x, y, z); &#125; else &#123; int ans = query(1, x, y); int num = 0; while (ans) &#123; if (ans &amp; 1) num++; ans &gt;&gt;= 1; &#125; printf(\"%d\\n\", num); &#125; &#125; // pause; return 0;&#125;","content":"<h1 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h1><p>Chosen Problem Solving and Program design as an optional course, you are required to solve all kinds of problems. Here, we get a new problem. </p>\n<p>There is a very long board with length L centimeter, L is a positive integer, so we can evenly divide the board into L segments, and they are labeled by 1, 2, … L from left to right, each is 1 centimeter long. Now we have to color the board - one segment with only one color. We can do following two operations on the board: </p>\n<blockquote>\n<ol>\n<li>“C A B C” Color the board from segment A to segment B with color C. </li>\n<li>“P A B” Output the number of different colors painted between segment A and segment B (including). </li>\n</ol>\n</blockquote>\n<p>In our daily life, we have very few words to describe a color (red, green, blue, yellow…), so you may assume that the total number of different colors T is very small. To make it simple, we express the names of colors as color 1, color 2, … color T. At the beginning, the board was painted in color 1. Now the rest of problem is left to your. </p>\n<a id=\"more\"></a>\n<h1 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input\"></a>Input</h1><p>First line of input contains L (1 &lt;= L &lt;= 100000), T (1 &lt;= T &lt;= 30) and O (1 &lt;= O &lt;= 100000). Here O denotes the number of operations. Following O lines, each contains “C A B C” or “P A B” (here A, B, C are integers, and A may be larger than B) as an operation defined previously.</p>\n<h1 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h1><p>Ouput results of the output operation in order, each line contains a number.</p>\n<h1 id=\"Sample-Input\"><a href=\"#Sample-Input\" class=\"headerlink\" title=\"Sample Input\"></a>Sample Input</h1><p>2 2 4<br>C 1 1 2<br>P 1 2<br>C 2 2 2<br>P 1 2</p>\n<h1 id=\"Sample-Output\"><a href=\"#Sample-Output\" class=\"headerlink\" title=\"Sample Output\"></a>Sample Output</h1><p>2<br>1</p>\n<h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>给一个固定长度为L的画板<br>有两个操作：<br>C A B C：区间A–B内涂上颜色C。<br>P A B：查询区间AB内颜色种类数。</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>可以采用二进制的思想，第i种颜色，则标记二进制的i位为1，可以建立线段树，然后使用 <code>|</code> 运算传递二进制。</p>\n<h2 id=\"AC代码\"><a href=\"#AC代码\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FAST_IO std::ios::sync_with_stdio(false),std::cin.tie(0),std::cout.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pause system(<span class=\"meta-string\">\"pause\"</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> UINT;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> maxn = <span class=\"number\">100000</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[maxn], color[maxn], ans;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">seg</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> l, r;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> v, tag;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        v = x;</span><br><span class=\"line\">        tag = x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;tree[maxn &lt;&lt; <span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">lc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>  </span>&#123;<span class=\"keyword\">return</span> x &lt;&lt; <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">rc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>  </span>&#123;<span class=\"keyword\">return</span> x &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push_up</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span> </span>&#123;</span><br><span class=\"line\">    tree[p].v = tree[lc(p)].v | tree[rc(p)].v;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push_down</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tree[p].tag) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = tree[p].v;</span><br><span class=\"line\">        tree[lc(p)].update(v);</span><br><span class=\"line\">        tree[rc(p)].update(v);</span><br><span class=\"line\">        tree[p].tag = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bulid</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">    tree[p].l = l, tree[p].r = r;</span><br><span class=\"line\">    tree[p].tag = tree[p].v = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l == r) &#123;</span><br><span class=\"line\">        tree[p].v = <span class=\"number\">1</span>;</span><br><span class=\"line\">        tree[p].tag = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l + r ) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    bulid(lc(p), l, mid);</span><br><span class=\"line\">    bulid(rc(p), mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">    push_up(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &lt;= tree[p].l &amp;&amp; r &gt;= tree[p].r) &#123;</span><br><span class=\"line\">        tree[p].update((<span class=\"number\">1</span> &lt;&lt; (x - <span class=\"number\">1</span>)));</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    push_down(p);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (tree[p].l + tree[p].r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &lt;= mid)</span><br><span class=\"line\">        update(lc(p), l, r, x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r &gt; mid)</span><br><span class=\"line\">        update(rc(p), l, r, x);</span><br><span class=\"line\">    push_up(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &lt;= tree[p].l &amp;&amp; r &gt;= tree[p].r) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tree[p].v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    push_down(p);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (tree[p].l + tree[p].r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &lt;= mid)</span><br><span class=\"line\">        ans = ans | query(lc(p),l , r);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r &gt; mid)</span><br><span class=\"line\">        ans = ans | query(rc(p),l , r);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, m, t;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d %d\"</span>, &amp;n, &amp;t, &amp;m);</span><br><span class=\"line\">    bulid(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (m--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> opt[<span class=\"number\">5</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x, y;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s %d %d\"</span>, opt, &amp;x, &amp;y);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &gt; y)</span><br><span class=\"line\">            swap(x, y);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(opt[<span class=\"number\">0</span>] == <span class=\"string\">'C'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> z;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;z);</span><br><span class=\"line\">            update(<span class=\"number\">1</span>, x, y, z);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> ans = query(<span class=\"number\">1</span>, x, y);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (ans) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ans &amp; <span class=\"number\">1</span>) num++;</span><br><span class=\"line\">                ans &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, num);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// pause;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","link":"","categories":[{"name":"ACM","slug":"ACM","permalink":"http://yoursite.com/categories/ACM/"},{"name":"题解","slug":"ACM/题解","permalink":"http://yoursite.com/categories/ACM/%E9%A2%98%E8%A7%A3/"},{"name":"POJ","slug":"ACM/题解/POJ","permalink":"http://yoursite.com/categories/ACM/%E9%A2%98%E8%A7%A3/POJ/"}],"tags":[{"name":"线段树","slug":"线段树","permalink":"http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"},{"name":"位运算","slug":"位运算","permalink":"http://yoursite.com/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"}]},{"title":"Device Context","date":"2019-07-19T07:55:11.000Z","path":"2019/07/19/Device-Context/","text":"Device Context 和 BeginPaint EndPaint设备环境（DC）在Windows中，一切能在显示器上看到的都是图形，不但包括点、线、矩形、圆等，也包括文字、字体。对用户来说文字和图片是不同的，但它们在本质上都是图形，都需要在显示器上画出来。这也是Windows被称作图形操作系统的原因。 Windows不允许我们直接访问硬件，如键盘、显示器、打印机等，在与这些硬件通信前要获得设备环境（Device Context，简称 DC），进而间接的访问硬件。 设备环境有时也被称为设备上下文或设备描述表。 所谓设备环境，就是与当前硬件设备有关的各种信息，它是硬件设备的抽象。也就是说，设备环境就代表当前的硬件。 与文字输出、图形绘制有关的函数，在使用时大都需要传入一个参数，就是设备环境句柄。获取设备环境句柄有多种方式，常用的是 BeginPaint 函数。绘图完成后，还要释放句柄，使用 EndPaint 函数。 BeginPaint 和 EndPaint 函数当发生 WM_PAINT 事件时，应用程序开始绘图。绘图之前需要先调用 BeginPai绘图结束后，也需要调用 EndPaint 函数通知Windows，告诉它绘图结束了，你可以继续后面的工作了。nt 函数通知 Windows，告诉它当前程序需要使用显示器，你安排一下吧。BeginPaint 函数执行完毕就返回设备环境句柄，接下来就可以使用 GDI 函数绘图了。","content":"<h1 id=\"Device-Context-和-BeginPaint-EndPaint\"><a href=\"#Device-Context-和-BeginPaint-EndPaint\" class=\"headerlink\" title=\"Device Context 和 BeginPaint EndPaint\"></a>Device Context 和 BeginPaint EndPaint</h1><h1 id=\"设备环境（DC）\"><a href=\"#设备环境（DC）\" class=\"headerlink\" title=\"设备环境（DC）\"></a>设备环境（DC）</h1><p>在Windows中，一切能在显示器上看到的都是图形，不但包括点、线、矩形、圆等，也包括文字、字体。对用户来说文字和图片是不同的，但它们在本质上都是图形，都需要在显示器上画出来。这也是Windows被称作图形操作系统的原因。</p>\n<p>Windows不允许我们直接访问硬件，如键盘、显示器、打印机等，在与这些硬件通信前要获得<strong>设备环境（Device Context，简称 DC）</strong>，进而间接的访问硬件。</p>\n<blockquote>\n<p>设备环境有时也被称为设备上下文或设备描述表。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>所谓设备环境，就是与当前硬件设备有关的各种信息，它是硬件设备的抽象。也就是说，设备环境就代表当前的硬件。</p>\n<p>与文字输出、图形绘制有关的函数，在使用时大都需要传入一个参数，就是设备环境句柄。获取设备环境句柄有多种方式，常用的是 BeginPaint 函数。绘图完成后，还要释放句柄，使用 EndPaint 函数。</p>\n<h1 id=\"BeginPaint-和-EndPaint-函数\"><a href=\"#BeginPaint-和-EndPaint-函数\" class=\"headerlink\" title=\"BeginPaint 和 EndPaint 函数\"></a>BeginPaint 和 EndPaint 函数</h1><p>当发生 WM_PAINT 事件时，应用程序开始绘图。绘图之前需要先调用 BeginPai<br>绘图结束后，也需要调用 EndPaint 函数通知Windows，告诉它绘图结束了，你可以继续后面的工作了。nt 函数通知 Windows，告诉它当前程序需要使用显示器，你安排一下吧。BeginPaint 函数执行完毕就返回设备环境句柄，接下来就可以使用 GDI 函数绘图了。</p>\n","link":"","categories":[],"tags":[{"name":"Windows","slug":"Windows","permalink":"http://yoursite.com/tags/Windows/"}]}]